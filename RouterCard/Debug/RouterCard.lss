
RouterCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000038e  00800100  00004420  000044b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a19  0080048e  0080048e  00004842  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004842  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000720  00000000  00000000  000048b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b818  00000000  00000000  00004fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021e9  00000000  00000000  000107ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004788  00000000  00000000  000129d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a28  00000000  00000000  00017160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c11  00000000  00000000  00018b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000658d  00000000  00000000  0001a799  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  00020d26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
       2:	00 00       	nop
       4:	8a c0       	rjmp	.+276    	; 0x11a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c0       	rjmp	.+272    	; 0x11a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c0       	rjmp	.+268    	; 0x11a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c0       	rjmp	.+252    	; 0x11a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c0       	rjmp	.+240    	; 0x11a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c0       	rjmp	.+236    	; 0x11a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c0       	rjmp	.+232    	; 0x11a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c0       	rjmp	.+228    	; 0x11a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c0       	rjmp	.+224    	; 0x11a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c0       	rjmp	.+220    	; 0x11a <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c0       	rjmp	.+216    	; 0x11a <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__vector_17>
      48:	14 c3       	rjmp	.+1576   	; 0x672 <__vector_18>
      4a:	00 00       	nop
      4c:	66 c0       	rjmp	.+204    	; 0x11a <__bad_interrupt>
      4e:	00 00       	nop
      50:	64 c0       	rjmp	.+200    	; 0x11a <__bad_interrupt>
      52:	00 00       	nop
      54:	df c2       	rjmp	.+1470   	; 0x614 <__vector_21>
      56:	00 00       	nop
      58:	60 c2       	rjmp	.+1216   	; 0x51a <__vector_22>
      5a:	00 00       	nop
      5c:	5e c0       	rjmp	.+188    	; 0x11a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c0       	rjmp	.+184    	; 0x11a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c0       	rjmp	.+180    	; 0x11a <__bad_interrupt>
      66:	00 00       	nop
      68:	58 c0       	rjmp	.+176    	; 0x11a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	56 c0       	rjmp	.+172    	; 0x11a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c0       	rjmp	.+168    	; 0x11a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c0       	rjmp	.+164    	; 0x11a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c0       	rjmp	.+160    	; 0x11a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c0       	rjmp	.+156    	; 0x11a <__bad_interrupt>
      7e:	00 00       	nop
      80:	9a c2       	rjmp	.+1332   	; 0x5b6 <__vector_32>
      82:	00 00       	nop
      84:	06 c2       	rjmp	.+1036   	; 0x492 <__vector_33>
      86:	00 00       	nop
      88:	8c c2       	rjmp	.+1304   	; 0x5a2 <__vector_34>
      8a:	00 00       	nop
      8c:	46 c0       	rjmp	.+140    	; 0x11a <__bad_interrupt>
      8e:	00 00       	nop
      90:	44 c0       	rjmp	.+136    	; 0x11a <__bad_interrupt>
      92:	00 00       	nop
      94:	61 11       	cpse	r22, r1
      96:	17 11       	cpse	r17, r7
      98:	19 11       	cpse	r17, r9
      9a:	1b 11       	cpse	r17, r11
      9c:	1d 11       	cpse	r17, r13
      9e:	1f 11       	cpse	r17, r15
      a0:	67 11       	cpse	r22, r7
      a2:	15 11       	cpse	r17, r5
      a4:	69 11       	cpse	r22, r9
      a6:	63 11       	cpse	r22, r3
      a8:	21 11       	cpse	r18, r1
      aa:	23 11       	cpse	r18, r3
      ac:	65 11       	cpse	r22, r5
      ae:	32 11       	cpse	r19, r2
      b0:	36 11       	cpse	r19, r6
      b2:	38 11       	cpse	r19, r8
      b4:	3a 11       	cpse	r19, r10
      b6:	3c 11       	cpse	r19, r12
      b8:	6b 11       	cpse	r22, r11
      ba:	30 11       	cpse	r19, r0
      bc:	34 11       	cpse	r19, r4
      be:	3e 11       	cpse	r19, r14
      c0:	40 11       	cpse	r20, r0
      c2:	42 11       	cpse	r20, r2
      c4:	98 11       	cpse	r25, r8
      c6:	7b 11       	cpse	r23, r11
      c8:	7d 11       	cpse	r23, r13
      ca:	7f 11       	cpse	r23, r15
      cc:	81 11       	cpse	r24, r1
      ce:	83 11       	cpse	r24, r3
      d0:	9c 11       	cpse	r25, r12
      d2:	79 11       	cpse	r23, r9
      d4:	9e 11       	cpse	r25, r14
      d6:	9a 11       	cpse	r25, r10
      d8:	85 11       	cpse	r24, r5
      da:	87 11       	cpse	r24, r7

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d0 e1       	ldi	r29, 0x10	; 16
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	14 e0       	ldi	r17, 0x04	; 4
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e0 e2       	ldi	r30, 0x20	; 32
      f0:	f4 e4       	ldi	r31, 0x44	; 68
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0b bf       	out	0x3b, r16	; 59
      f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x14>
      f8:	07 90       	elpm	r0, Z+
      fa:	0d 92       	st	X+, r0
      fc:	ae 38       	cpi	r26, 0x8E	; 142
      fe:	b1 07       	cpc	r27, r17
     100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0x10>

00000102 <__do_clear_bss>:
     102:	2e e0       	ldi	r18, 0x0E	; 14
     104:	ae e8       	ldi	r26, 0x8E	; 142
     106:	b4 e0       	ldi	r27, 0x04	; 4
     108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
     10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
     10c:	a7 3a       	cpi	r26, 0xA7	; 167
     10e:	b2 07       	cpc	r27, r18
     110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
     112:	0e 94 a1 11 	call	0x2342	; 0x2342 <main>
     116:	0c 94 0e 22 	jmp	0x441c	; 0x441c <_exit>

0000011a <__bad_interrupt>:
     11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <cb_init>:
	char temp;
	while (cb_size(&UART1_RX_Buffer)>0)
	{
		cb_pop_front(&UART1_RX_Buffer, &temp);
	}
}
     11c:	cf 92       	push	r12
     11e:	df 92       	push	r13
     120:	ef 92       	push	r14
     122:	ff 92       	push	r15
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	ec 01       	movw	r28, r24
     12e:	6b 01       	movw	r12, r22
     130:	7a 01       	movw	r14, r20
     132:	64 9f       	mul	r22, r20
     134:	80 01       	movw	r16, r0
     136:	65 9f       	mul	r22, r21
     138:	10 0d       	add	r17, r0
     13a:	74 9f       	mul	r23, r20
     13c:	10 0d       	add	r17, r0
     13e:	11 24       	eor	r1, r1
     140:	c8 01       	movw	r24, r16
     142:	0e 94 a8 20 	call	0x4150	; 0x4150 <malloc>
     146:	99 83       	std	Y+1, r25	; 0x01
     148:	88 83       	st	Y, r24
     14a:	00 0f       	add	r16, r16
     14c:	11 1f       	adc	r17, r17
     14e:	08 0f       	add	r16, r24
     150:	19 1f       	adc	r17, r25
     152:	1b 83       	std	Y+3, r17	; 0x03
     154:	0a 83       	std	Y+2, r16	; 0x02
     156:	dd 82       	std	Y+5, r13	; 0x05
     158:	cc 82       	std	Y+4, r12	; 0x04
     15a:	1f 82       	std	Y+7, r1	; 0x07
     15c:	1e 82       	std	Y+6, r1	; 0x06
     15e:	f9 86       	std	Y+9, r15	; 0x09
     160:	e8 86       	std	Y+8, r14	; 0x08
     162:	9b 87       	std	Y+11, r25	; 0x0b
     164:	8a 87       	std	Y+10, r24	; 0x0a
     166:	9d 87       	std	Y+13, r25	; 0x0d
     168:	8c 87       	std	Y+12, r24	; 0x0c
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	1f 91       	pop	r17
     170:	0f 91       	pop	r16
     172:	ff 90       	pop	r15
     174:	ef 90       	pop	r14
     176:	df 90       	pop	r13
     178:	cf 90       	pop	r12
     17a:	08 95       	ret

0000017c <cb_push_back>:
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	ec 01       	movw	r28, r24
     182:	2e 81       	ldd	r18, Y+6	; 0x06
     184:	3f 81       	ldd	r19, Y+7	; 0x07
     186:	8c 81       	ldd	r24, Y+4	; 0x04
     188:	9d 81       	ldd	r25, Y+5	; 0x05
     18a:	28 17       	cp	r18, r24
     18c:	39 07       	cpc	r19, r25
     18e:	f1 f0       	breq	.+60     	; 0x1cc <cb_push_back+0x50>
     190:	48 85       	ldd	r20, Y+8	; 0x08
     192:	59 85       	ldd	r21, Y+9	; 0x09
     194:	8a 85       	ldd	r24, Y+10	; 0x0a
     196:	9b 85       	ldd	r25, Y+11	; 0x0b
     198:	0e 94 d5 21 	call	0x43aa	; 0x43aa <memcpy>
     19c:	88 85       	ldd	r24, Y+8	; 0x08
     19e:	99 85       	ldd	r25, Y+9	; 0x09
     1a0:	88 0f       	add	r24, r24
     1a2:	99 1f       	adc	r25, r25
     1a4:	2a 85       	ldd	r18, Y+10	; 0x0a
     1a6:	3b 85       	ldd	r19, Y+11	; 0x0b
     1a8:	82 0f       	add	r24, r18
     1aa:	93 1f       	adc	r25, r19
     1ac:	9b 87       	std	Y+11, r25	; 0x0b
     1ae:	8a 87       	std	Y+10, r24	; 0x0a
     1b0:	2a 81       	ldd	r18, Y+2	; 0x02
     1b2:	3b 81       	ldd	r19, Y+3	; 0x03
     1b4:	82 17       	cp	r24, r18
     1b6:	93 07       	cpc	r25, r19
     1b8:	21 f4       	brne	.+8      	; 0x1c2 <cb_push_back+0x46>
     1ba:	88 81       	ld	r24, Y
     1bc:	99 81       	ldd	r25, Y+1	; 0x01
     1be:	9b 87       	std	Y+11, r25	; 0x0b
     1c0:	8a 87       	std	Y+10, r24	; 0x0a
     1c2:	8e 81       	ldd	r24, Y+6	; 0x06
     1c4:	9f 81       	ldd	r25, Y+7	; 0x07
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	9f 83       	std	Y+7, r25	; 0x07
     1ca:	8e 83       	std	Y+6, r24	; 0x06
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <cb_pop_front>:
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	ec 01       	movw	r28, r24
     1d8:	8e 81       	ldd	r24, Y+6	; 0x06
     1da:	9f 81       	ldd	r25, Y+7	; 0x07
     1dc:	89 2b       	or	r24, r25
     1de:	f9 f0       	breq	.+62     	; 0x21e <cb_pop_front+0x4c>
     1e0:	cb 01       	movw	r24, r22
     1e2:	6c 85       	ldd	r22, Y+12	; 0x0c
     1e4:	7d 85       	ldd	r23, Y+13	; 0x0d
     1e6:	48 85       	ldd	r20, Y+8	; 0x08
     1e8:	59 85       	ldd	r21, Y+9	; 0x09
     1ea:	0e 94 d5 21 	call	0x43aa	; 0x43aa <memcpy>
     1ee:	88 85       	ldd	r24, Y+8	; 0x08
     1f0:	99 85       	ldd	r25, Y+9	; 0x09
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	2c 85       	ldd	r18, Y+12	; 0x0c
     1f8:	3d 85       	ldd	r19, Y+13	; 0x0d
     1fa:	82 0f       	add	r24, r18
     1fc:	93 1f       	adc	r25, r19
     1fe:	9d 87       	std	Y+13, r25	; 0x0d
     200:	8c 87       	std	Y+12, r24	; 0x0c
     202:	2a 81       	ldd	r18, Y+2	; 0x02
     204:	3b 81       	ldd	r19, Y+3	; 0x03
     206:	82 17       	cp	r24, r18
     208:	93 07       	cpc	r25, r19
     20a:	21 f4       	brne	.+8      	; 0x214 <cb_pop_front+0x42>
     20c:	88 81       	ld	r24, Y
     20e:	99 81       	ldd	r25, Y+1	; 0x01
     210:	9d 87       	std	Y+13, r25	; 0x0d
     212:	8c 87       	std	Y+12, r24	; 0x0c
     214:	8e 81       	ldd	r24, Y+6	; 0x06
     216:	9f 81       	ldd	r25, Y+7	; 0x07
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	9f 83       	std	Y+7, r25	; 0x07
     21c:	8e 83       	std	Y+6, r24	; 0x06
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <cb_peek_front>:
     224:	fc 01       	movw	r30, r24
     226:	cb 01       	movw	r24, r22
     228:	64 85       	ldd	r22, Z+12	; 0x0c
     22a:	75 85       	ldd	r23, Z+13	; 0x0d
     22c:	40 85       	ldd	r20, Z+8	; 0x08
     22e:	51 85       	ldd	r21, Z+9	; 0x09
     230:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <memcpy>
     234:	08 95       	ret

00000236 <cb_size>:
     236:	fc 01       	movw	r30, r24
     238:	86 81       	ldd	r24, Z+6	; 0x06
     23a:	97 81       	ldd	r25, Z+7	; 0x07
     23c:	08 95       	ret

0000023e <USART0_Init>:
     23e:	61 15       	cp	r22, r1
     240:	26 e9       	ldi	r18, 0x96	; 150
     242:	72 07       	cpc	r23, r18
     244:	81 05       	cpc	r24, r1
     246:	91 05       	cpc	r25, r1
     248:	01 f1       	breq	.+64     	; 0x28a <USART0_Init+0x4c>
     24a:	30 f4       	brcc	.+12     	; 0x258 <USART0_Init+0x1a>
     24c:	61 15       	cp	r22, r1
     24e:	7b 44       	sbci	r23, 0x4B	; 75
     250:	81 05       	cpc	r24, r1
     252:	91 05       	cpc	r25, r1
     254:	09 f1       	breq	.+66     	; 0x298 <USART0_Init+0x5a>
     256:	27 c0       	rjmp	.+78     	; 0x2a6 <USART0_Init+0x68>
     258:	61 15       	cp	r22, r1
     25a:	21 ee       	ldi	r18, 0xE1	; 225
     25c:	72 07       	cpc	r23, r18
     25e:	81 05       	cpc	r24, r1
     260:	91 05       	cpc	r25, r1
     262:	61 f0       	breq	.+24     	; 0x27c <USART0_Init+0x3e>
     264:	61 15       	cp	r22, r1
     266:	72 4c       	sbci	r23, 0xC2	; 194
     268:	81 40       	sbci	r24, 0x01	; 1
     26a:	91 05       	cpc	r25, r1
     26c:	e1 f4       	brne	.+56     	; 0x2a6 <USART0_Init+0x68>
     26e:	80 e1       	ldi	r24, 0x10	; 16
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     276:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     27a:	1b c0       	rjmp	.+54     	; 0x2b2 <USART0_Init+0x74>
     27c:	82 e2       	ldi	r24, 0x22	; 34
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     284:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     288:	14 c0       	rjmp	.+40     	; 0x2b2 <USART0_Init+0x74>
     28a:	83 e3       	ldi	r24, 0x33	; 51
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     292:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     296:	0d c0       	rjmp	.+26     	; 0x2b2 <USART0_Init+0x74>
     298:	87 e6       	ldi	r24, 0x67	; 103
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2a4:	06 c0       	rjmp	.+12     	; 0x2b2 <USART0_Init+0x74>
     2a6:	8f ec       	ldi	r24, 0xCF	; 207
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2b8:	8e e0       	ldi	r24, 0x0E	; 14
     2ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     2be:	88 e9       	ldi	r24, 0x98	; 152
     2c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     2c4:	41 e0       	ldi	r20, 0x01	; 1
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	62 e3       	ldi	r22, 0x32	; 50
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	8a ec       	ldi	r24, 0xCA	; 202
     2ce:	94 e0       	ldi	r25, 0x04	; 4
     2d0:	25 df       	rcall	.-438    	; 0x11c <cb_init>
     2d2:	41 e0       	ldi	r20, 0x01	; 1
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	62 e3       	ldi	r22, 0x32	; 50
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	86 ee       	ldi	r24, 0xE6	; 230
     2dc:	94 e0       	ldi	r25, 0x04	; 4
     2de:	1e cf       	rjmp	.-452    	; 0x11c <cb_init>
     2e0:	08 95       	ret

000002e2 <USART1_Init>:
     2e2:	61 15       	cp	r22, r1
     2e4:	26 e9       	ldi	r18, 0x96	; 150
     2e6:	72 07       	cpc	r23, r18
     2e8:	81 05       	cpc	r24, r1
     2ea:	91 05       	cpc	r25, r1
     2ec:	01 f1       	breq	.+64     	; 0x32e <USART1_Init+0x4c>
     2ee:	30 f4       	brcc	.+12     	; 0x2fc <USART1_Init+0x1a>
     2f0:	61 15       	cp	r22, r1
     2f2:	7b 44       	sbci	r23, 0x4B	; 75
     2f4:	81 05       	cpc	r24, r1
     2f6:	91 05       	cpc	r25, r1
     2f8:	09 f1       	breq	.+66     	; 0x33c <USART1_Init+0x5a>
     2fa:	27 c0       	rjmp	.+78     	; 0x34a <USART1_Init+0x68>
     2fc:	61 15       	cp	r22, r1
     2fe:	21 ee       	ldi	r18, 0xE1	; 225
     300:	72 07       	cpc	r23, r18
     302:	81 05       	cpc	r24, r1
     304:	91 05       	cpc	r25, r1
     306:	61 f0       	breq	.+24     	; 0x320 <USART1_Init+0x3e>
     308:	61 15       	cp	r22, r1
     30a:	72 4c       	sbci	r23, 0xC2	; 194
     30c:	81 40       	sbci	r24, 0x01	; 1
     30e:	91 05       	cpc	r25, r1
     310:	e1 f4       	brne	.+56     	; 0x34a <USART1_Init+0x68>
     312:	80 e1       	ldi	r24, 0x10	; 16
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     31a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     31e:	1b c0       	rjmp	.+54     	; 0x356 <USART1_Init+0x74>
     320:	82 e2       	ldi	r24, 0x22	; 34
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     328:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     32c:	14 c0       	rjmp	.+40     	; 0x356 <USART1_Init+0x74>
     32e:	83 e3       	ldi	r24, 0x33	; 51
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     336:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     33a:	0d c0       	rjmp	.+26     	; 0x356 <USART1_Init+0x74>
     33c:	87 e6       	ldi	r24, 0x67	; 103
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     344:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     348:	06 c0       	rjmp	.+12     	; 0x356 <USART1_Init+0x74>
     34a:	8f ec       	ldi	r24, 0xCF	; 207
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     352:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     35c:	86 e0       	ldi	r24, 0x06	; 6
     35e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     362:	88 e9       	ldi	r24, 0x98	; 152
     364:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     368:	41 e0       	ldi	r20, 0x01	; 1
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	62 e3       	ldi	r22, 0x32	; 50
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	8b eb       	ldi	r24, 0xBB	; 187
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	d3 de       	rcall	.-602    	; 0x11c <cb_init>
     376:	41 e0       	ldi	r20, 0x01	; 1
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	62 e3       	ldi	r22, 0x32	; 50
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	88 ed       	ldi	r24, 0xD8	; 216
     380:	94 e0       	ldi	r25, 0x04	; 4
     382:	cc ce       	rjmp	.-616    	; 0x11c <cb_init>
     384:	08 95       	ret

00000386 <USART0_put_C>:
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	1f 92       	push	r1
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	89 83       	std	Y+1, r24	; 0x01
     396:	01 ec       	ldi	r16, 0xC1	; 193
     398:	10 e0       	ldi	r17, 0x00	; 0
     39a:	f8 01       	movw	r30, r16
     39c:	80 81       	ld	r24, Z
     39e:	8f 7d       	andi	r24, 0xDF	; 223
     3a0:	80 83       	st	Z, r24
     3a2:	be 01       	movw	r22, r28
     3a4:	6f 5f       	subi	r22, 0xFF	; 255
     3a6:	7f 4f       	sbci	r23, 0xFF	; 255
     3a8:	8a ec       	ldi	r24, 0xCA	; 202
     3aa:	94 e0       	ldi	r25, 0x04	; 4
     3ac:	e7 de       	rcall	.-562    	; 0x17c <cb_push_back>
     3ae:	f8 01       	movw	r30, r16
     3b0:	80 81       	ld	r24, Z
     3b2:	80 62       	ori	r24, 0x20	; 32
     3b4:	80 83       	st	Z, r24
     3b6:	0f 90       	pop	r0
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	08 95       	ret

000003c2 <USART1_put_C>:
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	1f 92       	push	r1
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	09 ec       	ldi	r16, 0xC9	; 201
     3d4:	10 e0       	ldi	r17, 0x00	; 0
     3d6:	f8 01       	movw	r30, r16
     3d8:	80 81       	ld	r24, Z
     3da:	8f 7d       	andi	r24, 0xDF	; 223
     3dc:	80 83       	st	Z, r24
     3de:	be 01       	movw	r22, r28
     3e0:	6f 5f       	subi	r22, 0xFF	; 255
     3e2:	7f 4f       	sbci	r23, 0xFF	; 255
     3e4:	8b eb       	ldi	r24, 0xBB	; 187
     3e6:	94 e0       	ldi	r25, 0x04	; 4
     3e8:	c9 de       	rcall	.-622    	; 0x17c <cb_push_back>
     3ea:	f8 01       	movw	r30, r16
     3ec:	80 81       	ld	r24, Z
     3ee:	80 62       	ori	r24, 0x20	; 32
     3f0:	80 83       	st	Z, r24
     3f2:	0f 90       	pop	r0
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	08 95       	ret

000003fe <USART1_get_C>:
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	1f 92       	push	r1
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	be 01       	movw	r22, r28
     40a:	6f 5f       	subi	r22, 0xFF	; 255
     40c:	7f 4f       	sbci	r23, 0xFF	; 255
     40e:	88 ed       	ldi	r24, 0xD8	; 216
     410:	94 e0       	ldi	r25, 0x04	; 4
     412:	df de       	rcall	.-578    	; 0x1d2 <cb_pop_front>
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	0f 90       	pop	r0
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <USART0_get_C>:
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	1f 92       	push	r1
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	be 01       	movw	r22, r28
     42a:	6f 5f       	subi	r22, 0xFF	; 255
     42c:	7f 4f       	sbci	r23, 0xFF	; 255
     42e:	86 ee       	ldi	r24, 0xE6	; 230
     430:	94 e0       	ldi	r25, 0x04	; 4
     432:	cf de       	rcall	.-610    	; 0x1d2 <cb_pop_front>
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	0f 90       	pop	r0
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <USART0_peek_C>:
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	1f 92       	push	r1
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	be 01       	movw	r22, r28
     44a:	6f 5f       	subi	r22, 0xFF	; 255
     44c:	7f 4f       	sbci	r23, 0xFF	; 255
     44e:	86 ee       	ldi	r24, 0xE6	; 230
     450:	94 e0       	ldi	r25, 0x04	; 4
     452:	e8 de       	rcall	.-560    	; 0x224 <cb_peek_front>
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	0f 90       	pop	r0
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <USART1_peek_C>:
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	1f 92       	push	r1
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	88 ed       	ldi	r24, 0xD8	; 216
     470:	94 e0       	ldi	r25, 0x04	; 4
     472:	d8 de       	rcall	.-592    	; 0x224 <cb_peek_front>
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	0f 90       	pop	r0
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <USART0_Available>:
     47e:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <UART0_RX_Buffer+0x6>
     482:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <UART0_RX_Buffer+0x7>
     486:	08 95       	ret

00000488 <USART1_Available>:
     488:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <UART1_RX_Buffer+0x6>
     48c:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <UART1_RX_Buffer+0x7>
     490:	08 95       	ret

00000492 <__vector_33>:
ISR(USART1_UDRE_vect)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	0b b6       	in	r0, 0x3b	; 59
     49e:	0f 92       	push	r0
     4a0:	2f 93       	push	r18
     4a2:	3f 93       	push	r19
     4a4:	4f 93       	push	r20
     4a6:	5f 93       	push	r21
     4a8:	6f 93       	push	r22
     4aa:	7f 93       	push	r23
     4ac:	8f 93       	push	r24
     4ae:	9f 93       	push	r25
     4b0:	af 93       	push	r26
     4b2:	bf 93       	push	r27
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	1f 92       	push	r1
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
	if (cb_size(&UART1_TX_Buffer) > 0)
     4c2:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <UART1_TX_Buffer+0x6>
     4c6:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <UART1_TX_Buffer+0x7>
     4ca:	18 16       	cp	r1, r24
     4cc:	19 06       	cpc	r1, r25
     4ce:	54 f4       	brge	.+20     	; 0x4e4 <__vector_33+0x52>
	{
		char temp; 
		cb_pop_front(&UART1_TX_Buffer, &temp);
     4d0:	be 01       	movw	r22, r28
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	8b eb       	ldi	r24, 0xBB	; 187
     4d8:	94 e0       	ldi	r25, 0x04	; 4
     4da:	7b de       	rcall	.-778    	; 0x1d2 <cb_pop_front>
		UDR1 = temp; 
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     4e2:	05 c0       	rjmp	.+10     	; 0x4ee <__vector_33+0x5c>
	}
	else
	{
		UCSR1B &=  ~(1<<UDRIE1); //disable sending when buffer empty
     4e4:	e9 ec       	ldi	r30, 0xC9	; 201
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	8f 7d       	andi	r24, 0xDF	; 223
     4ec:	80 83       	st	Z, r24
	}	
}
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	ff 91       	pop	r31
     4f6:	ef 91       	pop	r30
     4f8:	bf 91       	pop	r27
     4fa:	af 91       	pop	r26
     4fc:	9f 91       	pop	r25
     4fe:	8f 91       	pop	r24
     500:	7f 91       	pop	r23
     502:	6f 91       	pop	r22
     504:	5f 91       	pop	r21
     506:	4f 91       	pop	r20
     508:	3f 91       	pop	r19
     50a:	2f 91       	pop	r18
     50c:	0f 90       	pop	r0
     50e:	0b be       	out	0x3b, r0	; 59
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <__vector_22>:
ISR(USART0_UDRE_vect)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     51a:	1f 92       	push	r1
     51c:	0f 92       	push	r0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	0f 92       	push	r0
     522:	11 24       	eor	r1, r1
     524:	0b b6       	in	r0, 0x3b	; 59
     526:	0f 92       	push	r0
     528:	2f 93       	push	r18
     52a:	3f 93       	push	r19
     52c:	4f 93       	push	r20
     52e:	5f 93       	push	r21
     530:	6f 93       	push	r22
     532:	7f 93       	push	r23
     534:	8f 93       	push	r24
     536:	9f 93       	push	r25
     538:	af 93       	push	r26
     53a:	bf 93       	push	r27
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	1f 92       	push	r1
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
	if (cb_size(&UART0_TX_Buffer) > 0)
     54a:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <UART0_TX_Buffer+0x6>
     54e:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <UART0_TX_Buffer+0x7>
     552:	18 16       	cp	r1, r24
     554:	19 06       	cpc	r1, r25
     556:	54 f4       	brge	.+20     	; 0x56c <__vector_22+0x52>
	{
		char temp; 
		cb_pop_front(&UART0_TX_Buffer, &temp);
     558:	be 01       	movw	r22, r28
     55a:	6f 5f       	subi	r22, 0xFF	; 255
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	8a ec       	ldi	r24, 0xCA	; 202
     560:	94 e0       	ldi	r25, 0x04	; 4
     562:	37 de       	rcall	.-914    	; 0x1d2 <cb_pop_front>
		UDR0 = temp; 
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     56a:	05 c0       	rjmp	.+10     	; 0x576 <__vector_22+0x5c>
	}
	else
	{
		UCSR0B &=  ~(1<<UDRIE0); //disable sending when buffer empty
     56c:	e1 ec       	ldi	r30, 0xC1	; 193
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	8f 7d       	andi	r24, 0xDF	; 223
     574:	80 83       	st	Z, r24
	}
}
     576:	0f 90       	pop	r0
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	ff 91       	pop	r31
     57e:	ef 91       	pop	r30
     580:	bf 91       	pop	r27
     582:	af 91       	pop	r26
     584:	9f 91       	pop	r25
     586:	8f 91       	pop	r24
     588:	7f 91       	pop	r23
     58a:	6f 91       	pop	r22
     58c:	5f 91       	pop	r21
     58e:	4f 91       	pop	r20
     590:	3f 91       	pop	r19
     592:	2f 91       	pop	r18
     594:	0f 90       	pop	r0
     596:	0b be       	out	0x3b, r0	; 59
     598:	0f 90       	pop	r0
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	0f 90       	pop	r0
     59e:	1f 90       	pop	r1
     5a0:	18 95       	reti

000005a2 <__vector_34>:

ISR(USART1_TX_vect){
     5a2:	1f 92       	push	r1
     5a4:	0f 92       	push	r0
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
//not used
}
     5ac:	0f 90       	pop	r0
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	0f 90       	pop	r0
     5b2:	1f 90       	pop	r1
     5b4:	18 95       	reti

000005b6 <__vector_32>:
char received1;
ISR(USART1_RX_vect) {
     5b6:	1f 92       	push	r1
     5b8:	0f 92       	push	r0
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	0f 92       	push	r0
     5be:	11 24       	eor	r1, r1
     5c0:	0b b6       	in	r0, 0x3b	; 59
     5c2:	0f 92       	push	r0
     5c4:	2f 93       	push	r18
     5c6:	3f 93       	push	r19
     5c8:	4f 93       	push	r20
     5ca:	5f 93       	push	r21
     5cc:	6f 93       	push	r22
     5ce:	7f 93       	push	r23
     5d0:	8f 93       	push	r24
     5d2:	9f 93       	push	r25
     5d4:	af 93       	push	r26
     5d6:	bf 93       	push	r27
     5d8:	ef 93       	push	r30
     5da:	ff 93       	push	r31
	received1 = UDR1; // might be able to eliminate this line. 
     5dc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     5e0:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <received1>
	cb_push_back(&UART1_RX_Buffer, &received1);
     5e4:	69 ec       	ldi	r22, 0xC9	; 201
     5e6:	74 e0       	ldi	r23, 0x04	; 4
     5e8:	88 ed       	ldi	r24, 0xD8	; 216
     5ea:	94 e0       	ldi	r25, 0x04	; 4
     5ec:	c7 dd       	rcall	.-1138   	; 0x17c <cb_push_back>
}
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	4f 91       	pop	r20
     602:	3f 91       	pop	r19
     604:	2f 91       	pop	r18
     606:	0f 90       	pop	r0
     608:	0b be       	out	0x3b, r0	; 59
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <__vector_21>:

char received0;
ISR(USART0_RX_vect) {
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	0b b6       	in	r0, 0x3b	; 59
     620:	0f 92       	push	r0
     622:	2f 93       	push	r18
     624:	3f 93       	push	r19
     626:	4f 93       	push	r20
     628:	5f 93       	push	r21
     62a:	6f 93       	push	r22
     62c:	7f 93       	push	r23
     62e:	8f 93       	push	r24
     630:	9f 93       	push	r25
     632:	af 93       	push	r26
     634:	bf 93       	push	r27
     636:	ef 93       	push	r30
     638:	ff 93       	push	r31
	received0 = UDR0; // might be able to eliminate this line.
     63a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     63e:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <received0>
	cb_push_back(&UART0_RX_Buffer, &received0);
     642:	64 ef       	ldi	r22, 0xF4	; 244
     644:	74 e0       	ldi	r23, 0x04	; 4
     646:	86 ee       	ldi	r24, 0xE6	; 230
     648:	94 e0       	ldi	r25, 0x04	; 4
     64a:	98 dd       	rcall	.-1232   	; 0x17c <cb_push_back>
     64c:	ff 91       	pop	r31
     64e:	ef 91       	pop	r30
     650:	bf 91       	pop	r27
     652:	af 91       	pop	r26
     654:	9f 91       	pop	r25
     656:	8f 91       	pop	r24
     658:	7f 91       	pop	r23
     65a:	6f 91       	pop	r22
     65c:	5f 91       	pop	r21
     65e:	4f 91       	pop	r20
     660:	3f 91       	pop	r19
     662:	2f 91       	pop	r18
     664:	0f 90       	pop	r0
     666:	0b be       	out	0x3b, r0	; 59
     668:	0f 90       	pop	r0
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	0f 90       	pop	r0
     66e:	1f 90       	pop	r1
     670:	18 95       	reti

00000672 <__vector_18>:
//! presently only used for reception of CAN packets


//THIS LOOKS OKAY
ISR( CANIT_vect)
{		
     672:	1f 92       	push	r1
     674:	0f 92       	push	r0
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	0f 92       	push	r0
     67a:	11 24       	eor	r1, r1
     67c:	0b b6       	in	r0, 0x3b	; 59
     67e:	0f 92       	push	r0
     680:	2f 93       	push	r18
     682:	3f 93       	push	r19
     684:	4f 93       	push	r20
     686:	5f 93       	push	r21
     688:	6f 93       	push	r22
     68a:	7f 93       	push	r23
     68c:	8f 93       	push	r24
     68e:	9f 93       	push	r25
     690:	af 93       	push	r26
     692:	bf 93       	push	r27
     694:	cf 93       	push	r28
     696:	ef 93       	push	r30
     698:	ff 93       	push	r31
	
	//Process packet (static??)
	static CAN_packet packet;
	
	//CANPage saving
	char save_canpage=CANPAGE;
     69a:	ed ee       	ldi	r30, 0xED	; 237
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	c0 81       	ld	r28, Z
	
	unsigned mob=CANHPMOB; // get highest prio mob
     6a0:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     6a4:	68 2f       	mov	r22, r24
     6a6:	70 e0       	ldi	r23, 0x00	; 0
	CANPAGE = mob & 0xf0;
     6a8:	80 7f       	andi	r24, 0xF0	; 240
     6aa:	80 83       	st	Z, r24
	
	mob >>= 4; // -> mob number 0..15
     6ac:	72 95       	swap	r23
     6ae:	62 95       	swap	r22
     6b0:	6f 70       	andi	r22, 0x0F	; 15
     6b2:	67 27       	eor	r22, r23
     6b4:	7f 70       	andi	r23, 0x0F	; 15
     6b6:	67 27       	eor	r22, r23
	//----------------RECEIVING DATA (RX)----------------
	if((CANSTMOB & ~0x20) ==0)
     6b8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     6bc:	8f 7d       	andi	r24, 0xDF	; 223
     6be:	c1 f5       	brne	.+112    	; 0x730 <__vector_18+0xbe>
	{		
		register char length;
		packet.id=(CANIDT2>>5) | (CANIDT1 <<3);
     6c0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     6c4:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     6c8:	e9 e9       	ldi	r30, 0x99	; 153
     6ca:	f4 e0       	ldi	r31, 0x04	; 4
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	22 95       	swap	r18
     6dc:	26 95       	lsr	r18
     6de:	27 70       	andi	r18, 0x07	; 7
     6e0:	82 2b       	or	r24, r18
     6e2:	91 83       	std	Z+1, r25	; 0x01
     6e4:	80 83       	st	Z, r24
		
		//Identify the length of the packet
		length=CANCDMOB & 0x0f;
     6e6:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     6ea:	8f 70       	andi	r24, 0x0F	; 15
		packet.length=length;
     6ec:	82 83       	std	Z+2, r24	; 0x02
		
		//Push the packet in to the storage
		for (i = 0; i <length; ++i)
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	59 f0       	breq	.+22     	; 0x70a <__vector_18+0x98>
     6f4:	ec e9       	ldi	r30, 0x9C	; 156
     6f6:	f4 e0       	ldi	r31, 0x04	; 4
     6f8:	84 56       	subi	r24, 0x64	; 100
     6fa:	9b 4f       	sbci	r25, 0xFB	; 251
		{
			packet.data[i] = CANMSG;
     6fc:	aa ef       	ldi	r26, 0xFA	; 250
     6fe:	b0 e0       	ldi	r27, 0x00	; 0
     700:	2c 91       	ld	r18, X
     702:	21 93       	st	Z+, r18
		//Identify the length of the packet
		length=CANCDMOB & 0x0f;
		packet.length=length;
		
		//Push the packet in to the storage
		for (i = 0; i <length; ++i)
     704:	e8 17       	cp	r30, r24
     706:	f9 07       	cpc	r31, r25
     708:	d9 f7       	brne	.-10     	; 0x700 <__vector_18+0x8e>
		{
			packet.data[i] = CANMSG;
		}
		CANSTMOB=0;		// reset INT reason
     70a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB=0x80;	// re-enable RX on this channel
     70e:	80 e8       	ldi	r24, 0x80	; 128
     710:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		canlist[ mob]( &packet, mob);
     714:	fb 01       	movw	r30, r22
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	ea 50       	subi	r30, 0x0A	; 10
     71c:	fb 4f       	sbci	r31, 0xFB	; 251
     71e:	01 90       	ld	r0, Z+
     720:	f0 81       	ld	r31, Z
     722:	e0 2d       	mov	r30, r0
     724:	89 e9       	ldi	r24, 0x99	; 153
     726:	94 e0       	ldi	r25, 0x04	; 4
     728:	09 95       	icall
		CANPAGE=save_canpage;	// restore CANPAGE
     72a:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     72e:	d8 c0       	rjmp	.+432    	; 0x8e0 <__vector_18+0x26e>
	}
	//----------------SENDING DATA (TX) ----------------
	else if((CANSTMOB & ~0x40) ==0) 
     730:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     734:	8f 7b       	andi	r24, 0xBF	; 191
     736:	09 f0       	breq	.+2      	; 0x73a <__vector_18+0xc8>
     738:	57 c0       	rjmp	.+174    	; 0x7e8 <__vector_18+0x176>
	{
		canlist[ mob]( &packet, mob); //if data remains in send buffer
     73a:	fb 01       	movw	r30, r22
     73c:	ee 0f       	add	r30, r30
     73e:	ff 1f       	adc	r31, r31
     740:	ea 50       	subi	r30, 0x0A	; 10
     742:	fb 4f       	sbci	r31, 0xFB	; 251
     744:	01 90       	ld	r0, Z+
     746:	f0 81       	ld	r31, Z
     748:	e0 2d       	mov	r30, r0
     74a:	89 e9       	ldi	r24, 0x99	; 153
     74c:	94 e0       	ldi	r25, 0x04	; 4
     74e:	09 95       	icall
		
		if(packet.length > 0)
     750:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <packet.1642+0x2>
     754:	88 23       	and	r24, r24
     756:	09 f4       	brne	.+2      	; 0x75a <__vector_18+0xe8>
     758:	40 c0       	rjmp	.+128    	; 0x7da <__vector_18+0x168>
		{
			//Set the TX ID
			CANIDT1 = packet.id >>3;
     75a:	e9 e9       	ldi	r30, 0x99	; 153
     75c:	f4 e0       	ldi	r31, 0x04	; 4
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	96 95       	lsr	r25
     764:	87 95       	ror	r24
     766:	96 95       	lsr	r25
     768:	87 95       	ror	r24
     76a:	96 95       	lsr	r25
     76c:	87 95       	ror	r24
     76e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
			CANIDT2 = packet.id <<5;
     772:	80 81       	ld	r24, Z
     774:	82 95       	swap	r24
     776:	88 0f       	add	r24, r24
     778:	80 7e       	andi	r24, 0xE0	; 224
     77a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT3 = 0;
     77e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			CANIDT4 = 0;
     782:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			
			//PUSH THE PACKET
			if(packet.length == 9) 
     786:	82 81       	ldd	r24, Z+2	; 0x02
     788:	89 30       	cpi	r24, 0x09	; 9
     78a:	19 f0       	breq	.+6      	; 0x792 <__vector_18+0x120>
				for (unsigned char cnt=0; cnt < 8; ++cnt)
				CANMSG = packet.data[cnt];
			}
			else 
			{
				for (unsigned char cnt=0; cnt < packet.length; ++cnt)
     78c:	81 11       	cpse	r24, r1
     78e:	0d c0       	rjmp	.+26     	; 0x7aa <__vector_18+0x138>
     790:	1c c0       	rjmp	.+56     	; 0x7ca <__vector_18+0x158>
     792:	ec e9       	ldi	r30, 0x9C	; 156
     794:	f4 e0       	ldi	r31, 0x04	; 4
     796:	24 ea       	ldi	r18, 0xA4	; 164
     798:	34 e0       	ldi	r19, 0x04	; 4
			
			//PUSH THE PACKET
			if(packet.length == 9) 
			{
				for (unsigned char cnt=0; cnt < 8; ++cnt)
				CANMSG = packet.data[cnt];
     79a:	aa ef       	ldi	r26, 0xFA	; 250
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	81 91       	ld	r24, Z+
     7a0:	8c 93       	st	X, r24
			CANIDT4 = 0;
			
			//PUSH THE PACKET
			if(packet.length == 9) 
			{
				for (unsigned char cnt=0; cnt < 8; ++cnt)
     7a2:	e2 17       	cp	r30, r18
     7a4:	f3 07       	cpc	r31, r19
     7a6:	d9 f7       	brne	.-10     	; 0x79e <__vector_18+0x12c>
     7a8:	10 c0       	rjmp	.+32     	; 0x7ca <__vector_18+0x158>
				CANMSG = packet.data[cnt];
			}
			else 
			{
				for (unsigned char cnt=0; cnt < packet.length; ++cnt)
     7aa:	80 e0       	ldi	r24, 0x00	; 0
				CANMSG = packet.data[cnt];
     7ac:	29 e9       	ldi	r18, 0x99	; 153
     7ae:	34 e0       	ldi	r19, 0x04	; 4
     7b0:	aa ef       	ldi	r26, 0xFA	; 250
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	e8 2f       	mov	r30, r24
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	e7 56       	subi	r30, 0x67	; 103
     7ba:	fb 4f       	sbci	r31, 0xFB	; 251
     7bc:	93 81       	ldd	r25, Z+3	; 0x03
     7be:	9c 93       	st	X, r25
				for (unsigned char cnt=0; cnt < 8; ++cnt)
				CANMSG = packet.data[cnt];
			}
			else 
			{
				for (unsigned char cnt=0; cnt < packet.length; ++cnt)
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
     7c2:	f9 01       	movw	r30, r18
     7c4:	92 81       	ldd	r25, Z+2	; 0x02
     7c6:	89 17       	cp	r24, r25
     7c8:	a8 f3       	brcs	.-22     	; 0x7b4 <__vector_18+0x142>
				CANMSG = packet.data[cnt];
			}
			CANSTMOB = 0;		// reset INT reason
     7ca:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x40 + packet.length;
     7ce:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <packet.1642+0x2>
     7d2:	80 5c       	subi	r24, 0xC0	; 192
     7d4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <__vector_18+0x170>
		}
		else //Disable mob to stop interrupts (NO MORE TX TO SEND)
		{
			CANSTMOB=0;		// reset INT reason
     7da:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANCDMOB = 0x00;
     7de:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		}
		CANPAGE=save_canpage;	// restore CANPAGE
     7e2:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     7e6:	7c c0       	rjmp	.+248    	; 0x8e0 <__vector_18+0x26e>
		
	}
	else if((CANSTMOB & ~0x80) ==0) //DLC warning
     7e8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	8f 77       	andi	r24, 0x7F	; 127
     7f0:	89 2b       	or	r24, r25
     7f2:	c1 f5       	brne	.+112    	; 0x864 <__vector_18+0x1f2>
	{
		
		register char length;
		packet.id=(CANIDT2>>5) | (CANIDT1 <<3);
     7f4:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     7f8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     7fc:	e9 e9       	ldi	r30, 0x99	; 153
     7fe:	f4 e0       	ldi	r31, 0x04	; 4
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	22 95       	swap	r18
     810:	26 95       	lsr	r18
     812:	27 70       	andi	r18, 0x07	; 7
     814:	82 2b       	or	r24, r18
     816:	91 83       	std	Z+1, r25	; 0x01
     818:	80 83       	st	Z, r24
		length=CANCDMOB & 0x0f;
     81a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     81e:	8f 70       	andi	r24, 0x0F	; 15
		packet.length=length;
     820:	82 83       	std	Z+2, r24	; 0x02
		for (i = 0; i <length; ++i)
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	59 f0       	breq	.+22     	; 0x83e <__vector_18+0x1cc>
     828:	ec e9       	ldi	r30, 0x9C	; 156
     82a:	f4 e0       	ldi	r31, 0x04	; 4
     82c:	84 56       	subi	r24, 0x64	; 100
     82e:	9b 4f       	sbci	r25, 0xFB	; 251
		{
			packet.data[i] = CANMSG;
     830:	aa ef       	ldi	r26, 0xFA	; 250
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	2c 91       	ld	r18, X
     836:	21 93       	st	Z+, r18
		
		register char length;
		packet.id=(CANIDT2>>5) | (CANIDT1 <<3);
		length=CANCDMOB & 0x0f;
		packet.length=length;
		for (i = 0; i <length; ++i)
     838:	e8 17       	cp	r30, r24
     83a:	f9 07       	cpc	r31, r25
     83c:	d9 f7       	brne	.-10     	; 0x834 <__vector_18+0x1c2>
		{
			packet.data[i] = CANMSG;
		}
		CANSTMOB=0;		// reset INT reason
     83e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB=0x80;	// re-enable RX on this channel
     842:	80 e8       	ldi	r24, 0x80	; 128
     844:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		canlist[ mob]( &packet, mob);
     848:	fb 01       	movw	r30, r22
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	ea 50       	subi	r30, 0x0A	; 10
     850:	fb 4f       	sbci	r31, 0xFB	; 251
     852:	01 90       	ld	r0, Z+
     854:	f0 81       	ld	r31, Z
     856:	e0 2d       	mov	r30, r0
     858:	89 e9       	ldi	r24, 0x99	; 153
     85a:	94 e0       	ldi	r25, 0x04	; 4
     85c:	09 95       	icall
		CANPAGE=save_canpage;	// restore CANPAGE
     85e:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     862:	3e c0       	rjmp	.+124    	; 0x8e0 <__vector_18+0x26e>
	}
	else if((CANSTMOB & ~0xA0) ==0) //DLC warning and RX ok
     864:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     868:	8f 75       	andi	r24, 0x5F	; 95
     86a:	c1 f5       	brne	.+112    	; 0x8dc <__vector_18+0x26a>
	{
		
		register char length;
		packet.id=(CANIDT2>>5) | (CANIDT1 <<3);
     86c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     870:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     874:	e9 e9       	ldi	r30, 0x99	; 153
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	22 95       	swap	r18
     888:	26 95       	lsr	r18
     88a:	27 70       	andi	r18, 0x07	; 7
     88c:	82 2b       	or	r24, r18
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	80 83       	st	Z, r24
		length=CANCDMOB & 0x0f;
     892:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     896:	8f 70       	andi	r24, 0x0F	; 15
		packet.length=length;
     898:	82 83       	std	Z+2, r24	; 0x02
		for (i = 0; i <length; ++i)
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	00 97       	sbiw	r24, 0x00	; 0
     89e:	59 f0       	breq	.+22     	; 0x8b6 <__vector_18+0x244>
     8a0:	ec e9       	ldi	r30, 0x9C	; 156
     8a2:	f4 e0       	ldi	r31, 0x04	; 4
     8a4:	84 56       	subi	r24, 0x64	; 100
     8a6:	9b 4f       	sbci	r25, 0xFB	; 251
		{
			packet.data[i] = CANMSG;
     8a8:	aa ef       	ldi	r26, 0xFA	; 250
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	2c 91       	ld	r18, X
     8ae:	21 93       	st	Z+, r18
		
		register char length;
		packet.id=(CANIDT2>>5) | (CANIDT1 <<3);
		length=CANCDMOB & 0x0f;
		packet.length=length;
		for (i = 0; i <length; ++i)
     8b0:	e8 17       	cp	r30, r24
     8b2:	f9 07       	cpc	r31, r25
     8b4:	d9 f7       	brne	.-10     	; 0x8ac <__vector_18+0x23a>
		{
			packet.data[i] = CANMSG;
		}
		CANSTMOB=0;		// reset INT reason
     8b6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB=0x80;	// re-enable RX on this channel
     8ba:	80 e8       	ldi	r24, 0x80	; 128
     8bc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		canlist[ mob]( &packet, mob);
     8c0:	fb 01       	movw	r30, r22
     8c2:	ee 0f       	add	r30, r30
     8c4:	ff 1f       	adc	r31, r31
     8c6:	ea 50       	subi	r30, 0x0A	; 10
     8c8:	fb 4f       	sbci	r31, 0xFB	; 251
     8ca:	01 90       	ld	r0, Z+
     8cc:	f0 81       	ld	r31, Z
     8ce:	e0 2d       	mov	r30, r0
     8d0:	89 e9       	ldi	r24, 0x99	; 153
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	09 95       	icall
		CANPAGE=save_canpage;	// restore CANPAGE
     8d6:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__vector_18+0x26e>
	}
	else if((CANSTMOB & ~0x10) ==0) //Bit Error warning
     8dc:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	{
		
		//handle transmission error
	}
	
}
     8e0:	ff 91       	pop	r31
     8e2:	ef 91       	pop	r30
     8e4:	cf 91       	pop	r28
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	7f 91       	pop	r23
     8f0:	6f 91       	pop	r22
     8f2:	5f 91       	pop	r21
     8f4:	4f 91       	pop	r20
     8f6:	3f 91       	pop	r19
     8f8:	2f 91       	pop	r18
     8fa:	0f 90       	pop	r0
     8fc:	0b be       	out	0x3b, r0	; 59
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <can_tx_kick>:

BOOL can_tx_kick(char mob) //used to start transmission, interrupt will send rest of buffer
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
	static CAN_packet packet;
	if (
	(  CANCDMOB & 0b11000000) // if MOB in use
     90c:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     910:	90 7c       	andi	r25, 0xC0	; 192
}

BOOL can_tx_kick(char mob) //used to start transmission, interrupt will send rest of buffer
{
	static CAN_packet packet;
	if (
     912:	21 f0       	breq	.+8      	; 0x91c <can_tx_kick+0x14>
	(  CANCDMOB & 0b11000000) // if MOB in use
	&&
	( (CANSTMOB & 0x40) ==0)   // TX not ready
     914:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
BOOL can_tx_kick(char mob) //used to start transmission, interrupt will send rest of buffer
{
	static CAN_packet packet;
	if (
	(  CANCDMOB & 0b11000000) // if MOB in use
	&&
     918:	96 ff       	sbrs	r25, 6
     91a:	73 c0       	rjmp	.+230    	; 0xa02 <can_tx_kick+0xfa>
     91c:	c8 2f       	mov	r28, r24
	( (CANSTMOB & 0x40) ==0)   // TX not ready
	)
	return FALSE;
	
	canlist[ mob]( &packet, mob); //if data remains in send buffer
     91e:	e8 2f       	mov	r30, r24
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	ea 50       	subi	r30, 0x0A	; 10
     928:	fb 4f       	sbci	r31, 0xFB	; 251
     92a:	01 90       	ld	r0, Z+
     92c:	f0 81       	ld	r31, Z
     92e:	e0 2d       	mov	r30, r0
     930:	68 2f       	mov	r22, r24
     932:	8e e8       	ldi	r24, 0x8E	; 142
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	09 95       	icall
	unsigned char cnt;
	CANPAGE = mob << 4;
     938:	c2 95       	swap	r28
     93a:	c0 7f       	andi	r28, 0xF0	; 240
     93c:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if(packet.length == 0)
     940:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <__data_end+0x2>
     944:	88 23       	and	r24, r24
     946:	09 f4       	brne	.+2      	; 0x94a <can_tx_kick+0x42>
     948:	5e c0       	rjmp	.+188    	; 0xa06 <can_tx_kick+0xfe>
	{
		return FALSE; //no data to send
	}
	
	CANSTMOB = 0x00;    	// cancel pending operation
     94a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     94e:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	if( packet.length!=RTR)
     952:	8f 3f       	cpi	r24, 0xFF	; 255
     954:	c1 f1       	breq	.+112    	; 0x9c6 <can_tx_kick+0xbe>
	{
		CANIDT1=packet.id >>3;
     956:	ee e8       	ldi	r30, 0x8E	; 142
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	80 81       	ld	r24, Z
     95c:	91 81       	ldd	r25, Z+1	; 0x01
     95e:	96 95       	lsr	r25
     960:	87 95       	ror	r24
     962:	96 95       	lsr	r25
     964:	87 95       	ror	r24
     966:	96 95       	lsr	r25
     968:	87 95       	ror	r24
     96a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2=packet.id <<5;
     96e:	80 81       	ld	r24, Z
     970:	82 95       	swap	r24
     972:	88 0f       	add	r24, r24
     974:	80 7e       	andi	r24, 0xE0	; 224
     976:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     97a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
     97e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if(packet.length == 9) 
     982:	82 81       	ldd	r24, Z+2	; 0x02
     984:	89 30       	cpi	r24, 0x09	; 9
     986:	19 f0       	breq	.+6      	; 0x98e <can_tx_kick+0x86>
			for (cnt=0; cnt < 8; ++cnt)
			CANMSG = packet.data[cnt]; 
		}
		else 
		{
			for (cnt=0; cnt < packet.length; ++cnt)
     988:	81 11       	cpse	r24, r1
     98a:	0d c0       	rjmp	.+26     	; 0x9a6 <can_tx_kick+0x9e>
     98c:	33 c0       	rjmp	.+102    	; 0x9f4 <can_tx_kick+0xec>
     98e:	e1 e9       	ldi	r30, 0x91	; 145
     990:	f4 e0       	ldi	r31, 0x04	; 4
     992:	29 e9       	ldi	r18, 0x99	; 153
     994:	34 e0       	ldi	r19, 0x04	; 4
		CANIDT3 = 0;
		CANIDT4 = 0;
		if(packet.length == 9) 
		{
			for (cnt=0; cnt < 8; ++cnt)
			CANMSG = packet.data[cnt]; 
     996:	aa ef       	ldi	r26, 0xFA	; 250
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	81 91       	ld	r24, Z+
     99c:	8c 93       	st	X, r24
		CANIDT2=packet.id <<5;
		CANIDT3 = 0;
		CANIDT4 = 0;
		if(packet.length == 9) 
		{
			for (cnt=0; cnt < 8; ++cnt)
     99e:	e2 17       	cp	r30, r18
     9a0:	f3 07       	cpc	r31, r19
     9a2:	d9 f7       	brne	.-10     	; 0x99a <can_tx_kick+0x92>
     9a4:	27 c0       	rjmp	.+78     	; 0x9f4 <can_tx_kick+0xec>
			CANMSG = packet.data[cnt]; 
		}
		else 
		{
			for (cnt=0; cnt < packet.length; ++cnt)
     9a6:	80 e0       	ldi	r24, 0x00	; 0
			CANMSG = packet.data[cnt];
     9a8:	ce e8       	ldi	r28, 0x8E	; 142
     9aa:	d4 e0       	ldi	r29, 0x04	; 4
     9ac:	aa ef       	ldi	r26, 0xFA	; 250
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	e8 2f       	mov	r30, r24
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	e2 57       	subi	r30, 0x72	; 114
     9b6:	fb 4f       	sbci	r31, 0xFB	; 251
     9b8:	93 81       	ldd	r25, Z+3	; 0x03
     9ba:	9c 93       	st	X, r25
			for (cnt=0; cnt < 8; ++cnt)
			CANMSG = packet.data[cnt]; 
		}
		else 
		{
			for (cnt=0; cnt < packet.length; ++cnt)
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	89 17       	cp	r24, r25
     9c2:	b0 f3       	brcs	.-20     	; 0x9b0 <can_tx_kick+0xa8>
     9c4:	17 c0       	rjmp	.+46     	; 0x9f4 <can_tx_kick+0xec>
		}
	}
	
	else
	{
		CANIDT1=packet.id >>3;
     9c6:	ee e8       	ldi	r30, 0x8E	; 142
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	80 81       	ld	r24, Z
     9cc:	91 81       	ldd	r25, Z+1	; 0x01
     9ce:	96 95       	lsr	r25
     9d0:	87 95       	ror	r24
     9d2:	96 95       	lsr	r25
     9d4:	87 95       	ror	r24
     9d6:	96 95       	lsr	r25
     9d8:	87 95       	ror	r24
     9da:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2=packet.id <<5;
     9de:	80 81       	ld	r24, Z
     9e0:	82 95       	swap	r24
     9e2:	88 0f       	add	r24, r24
     9e4:	80 7e       	andi	r24, 0xE0	; 224
     9e6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     9ea:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 1<<RTRTAG;
     9ee:	84 e0       	ldi	r24, 0x04	; 4
     9f0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	}
	CANCDMOB = 0x40 + packet.length;
     9f4:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <__data_end+0x2>
     9f8:	80 5c       	subi	r24, 0xC0	; 192
     9fa:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	return TRUE;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	03 c0       	rjmp	.+6      	; 0xa08 <can_tx_kick+0x100>
	if (
	(  CANCDMOB & 0b11000000) // if MOB in use
	&&
	( (CANSTMOB & 0x40) ==0)   // TX not ready
	)
	return FALSE;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <can_tx_kick+0x100>
	canlist[ mob]( &packet, mob); //if data remains in send buffer
	unsigned char cnt;
	CANPAGE = mob << 4;
	if(packet.length == 0)
	{
		return FALSE; //no data to send
     a06:	80 e0       	ldi	r24, 0x00	; 0
		CANIDT4 = 1<<RTRTAG;
	}
	CANCDMOB = 0x40 + packet.length;

	return TRUE;
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <can_tx>:

BOOL can_tx( char mob, 	CAN_packet *packet) //leaving this here for legacy
	{
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	fb 01       	movw	r30, r22
	unsigned cnt;
	ASSERT( packet->id <= 0x7ff);
     a14:	20 81       	ld	r18, Z
     a16:	31 81       	ldd	r19, Z+1	; 0x01
     a18:	21 15       	cp	r18, r1
     a1a:	38 40       	sbci	r19, 0x08	; 8
     a1c:	08 f0       	brcs	.+2      	; 0xa20 <can_tx+0x12>
     a1e:	98 95       	break
	ASSERT( packet->length <=8);
     a20:	92 81       	ldd	r25, Z+2	; 0x02
     a22:	99 30       	cpi	r25, 0x09	; 9
     a24:	08 f0       	brcs	.+2      	; 0xa28 <can_tx+0x1a>
     a26:	98 95       	break
	ASSERT( mob <=14);
     a28:	8f 30       	cpi	r24, 0x0F	; 15
     a2a:	08 f0       	brcs	.+2      	; 0xa2e <can_tx+0x20>
     a2c:	98 95       	break
	CANPAGE = mob << 4;
     a2e:	82 95       	swap	r24
     a30:	80 7f       	andi	r24, 0xF0	; 240
     a32:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	if (
		(  CANCDMOB & 0b11000000) // if MOB in use
     a36:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     a3a:	80 7c       	andi	r24, 0xC0	; 192
	ASSERT( packet->id <= 0x7ff);
	ASSERT( packet->length <=8);
	ASSERT( mob <=14);
	CANPAGE = mob << 4;
	
	if (
     a3c:	21 f0       	breq	.+8      	; 0xa46 <can_tx+0x38>
		(  CANCDMOB & 0b11000000) // if MOB in use
		&& 
	  	( (CANSTMOB & 0x40) ==0)   // TX not ready
     a3e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	ASSERT( mob <=14);
	CANPAGE = mob << 4;
	
	if (
		(  CANCDMOB & 0b11000000) // if MOB in use
		&& 
     a42:	86 ff       	sbrs	r24, 6
     a44:	49 c0       	rjmp	.+146    	; 0xad8 <can_tx+0xca>
	  	( (CANSTMOB & 0x40) ==0)   // TX not ready
	  )
		return FALSE;
		
	CANSTMOB = 0x00;    	// cancel pending operation 
     a46:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;		
     a4a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	if( packet->length!=RTR)
     a4e:	82 81       	ldd	r24, Z+2	; 0x02
     a50:	8f 3f       	cpi	r24, 0xFF	; 255
     a52:	39 f1       	breq	.+78     	; 0xaa2 <can_tx+0x94>
	{
		CANIDT1 = packet->id >>3;
     a54:	80 81       	ld	r24, Z
     a56:	91 81       	ldd	r25, Z+1	; 0x01
     a58:	96 95       	lsr	r25
     a5a:	87 95       	ror	r24
     a5c:	96 95       	lsr	r25
     a5e:	87 95       	ror	r24
     a60:	96 95       	lsr	r25
     a62:	87 95       	ror	r24
     a64:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = packet->id <<5;
     a68:	80 81       	ld	r24, Z
     a6a:	82 95       	swap	r24
     a6c:	88 0f       	add	r24, r24
     a6e:	80 7e       	andi	r24, 0xE0	; 224
     a70:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     a74:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
     a78:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		for (cnt=0; cnt < packet->length; ++cnt)
     a7c:	82 81       	ldd	r24, Z+2	; 0x02
     a7e:	88 23       	and	r24, r24
     a80:	29 f1       	breq	.+74     	; 0xacc <can_tx+0xbe>
     a82:	df 01       	movw	r26, r30
     a84:	13 96       	adiw	r26, 0x03	; 3
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
			CANMSG = packet->data[cnt];
     a8a:	ca ef       	ldi	r28, 0xFA	; 250
     a8c:	d0 e0       	ldi	r29, 0x00	; 0
     a8e:	8d 91       	ld	r24, X+
     a90:	88 83       	st	Y, r24
	{
		CANIDT1 = packet->id >>3;
		CANIDT2 = packet->id <<5;
		CANIDT3 = 0;
		CANIDT4 = 0;
		for (cnt=0; cnt < packet->length; ++cnt)
     a92:	2f 5f       	subi	r18, 0xFF	; 255
     a94:	3f 4f       	sbci	r19, 0xFF	; 255
     a96:	82 81       	ldd	r24, Z+2	; 0x02
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	28 17       	cp	r18, r24
     a9c:	39 07       	cpc	r19, r25
     a9e:	b8 f3       	brcs	.-18     	; 0xa8e <can_tx+0x80>
     aa0:	15 c0       	rjmp	.+42     	; 0xacc <can_tx+0xbe>
			CANMSG = packet->data[cnt];
	}		
	else
	{
		CANIDT1 = packet->id >>3;
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	96 95       	lsr	r25
     aa8:	87 95       	ror	r24
     aaa:	96 95       	lsr	r25
     aac:	87 95       	ror	r24
     aae:	96 95       	lsr	r25
     ab0:	87 95       	ror	r24
     ab2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = packet->id <<5;
     ab6:	80 81       	ld	r24, Z
     ab8:	82 95       	swap	r24
     aba:	88 0f       	add	r24, r24
     abc:	80 7e       	andi	r24, 0xE0	; 224
     abe:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     ac2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 1<<RTRTAG;
     ac6:	84 e0       	ldi	r24, 0x04	; 4
     ac8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	}
	CANCDMOB = 0x40 + packet->length;  
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	80 5c       	subi	r24, 0xC0	; 192
     ad0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	return TRUE;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	01 c0       	rjmp	.+2      	; 0xada <can_tx+0xcc>
	if (
		(  CANCDMOB & 0b11000000) // if MOB in use
		&& 
	  	( (CANSTMOB & 0x40) ==0)   // TX not ready
	  )
		return FALSE;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
		CANIDT4 = 1<<RTRTAG;
	}
	CANCDMOB = 0x40 + packet->length;  

	return TRUE;
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <prepare_rx>:

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
     ae0:	8f 30       	cpi	r24, 0x0F	; 15
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <prepare_rx+0x6>
     ae4:	6d c0       	rjmp	.+218    	; 0xbc0 <prepare_rx+0xe0>
		return TRUE;
	canlist[ (unsigned)mob]=callback;
     ae6:	e8 2f       	mov	r30, r24
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	ee 0f       	add	r30, r30
     aec:	ff 1f       	adc	r31, r31
     aee:	ea 50       	subi	r30, 0x0A	; 10
     af0:	fb 4f       	sbci	r31, 0xFB	; 251
     af2:	31 83       	std	Z+1, r19	; 0x01
     af4:	20 83       	st	Z, r18

    CANPAGE = mob << 4;
     af6:	98 2f       	mov	r25, r24
     af8:	92 95       	swap	r25
     afa:	90 7f       	andi	r25, 0xF0	; 240
     afc:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if( callback==0)			// release this MOB 
     b00:	23 2b       	or	r18, r19
     b02:	d9 f4       	brne	.+54     	; 0xb3a <prepare_rx+0x5a>
		{
		CANSTMOB = 0x00;    	// cancel pending operation 
     b04:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0x00;		
     b08:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		unsigned mask=1<<mob;
     b0c:	21 e0       	ldi	r18, 0x01	; 1
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	a9 01       	movw	r20, r18
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <prepare_rx+0x38>
     b14:	44 0f       	add	r20, r20
     b16:	55 1f       	adc	r21, r21
     b18:	8a 95       	dec	r24
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <prepare_rx+0x34>
     b1c:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
     b1e:	ee ed       	ldi	r30, 0xDE	; 222
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	20 81       	ld	r18, Z
     b24:	80 95       	com	r24
     b26:	82 23       	and	r24, r18
     b28:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
     b2a:	ef ed       	ldi	r30, 0xDF	; 223
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	90 95       	com	r25
     b32:	89 23       	and	r24, r25
     b34:	80 83       	st	Z, r24
		return FALSE;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	08 95       	ret
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
     b3a:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     b3e:	90 7c       	andi	r25, 0xC0	; 192
     b40:	09 f0       	breq	.+2      	; 0xb44 <prepare_rx+0x64>
     b42:	40 c0       	rjmp	.+128    	; 0xbc4 <prepare_rx+0xe4>
		return TRUE;			// no vacancy ...
	CANSTMOB = 0x00;    	// cancel pending operation 
     b44:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;		
     b48:	ef ee       	ldi	r30, 0xEF	; 239
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	10 82       	st	Z, r1
	CANHPMOB = 0x00;		// enable direct mob indexing, see docu
     b4e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANIDT1=id >>3;
     b52:	9b 01       	movw	r18, r22
     b54:	36 95       	lsr	r19
     b56:	27 95       	ror	r18
     b58:	36 95       	lsr	r19
     b5a:	27 95       	ror	r18
     b5c:	36 95       	lsr	r19
     b5e:	27 95       	ror	r18
     b60:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2=id <<5;
     b64:	62 95       	swap	r22
     b66:	66 0f       	add	r22, r22
     b68:	60 7e       	andi	r22, 0xE0	; 224
     b6a:	60 93 f2 00 	sts	0x00F2, r22	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDM1=idmask >>3;
     b6e:	9a 01       	movw	r18, r20
     b70:	36 95       	lsr	r19
     b72:	27 95       	ror	r18
     b74:	36 95       	lsr	r19
     b76:	27 95       	ror	r18
     b78:	36 95       	lsr	r19
     b7a:	27 95       	ror	r18
     b7c:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2=idmask <<5;
     b80:	42 95       	swap	r20
     b82:	44 0f       	add	r20, r20
     b84:	40 7e       	andi	r20, 0xE0	; 224
     b86:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM3=0;
     b8a:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM4=0;
     b8e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANCDMOB=0x80; // enable RX
     b92:	90 e8       	ldi	r25, 0x80	; 128
     b94:	90 83       	st	Z, r25
	unsigned mask=1<<mob;
     b96:	21 e0       	ldi	r18, 0x01	; 1
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	a9 01       	movw	r20, r18
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <prepare_rx+0xc2>
     b9e:	44 0f       	add	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	8a 95       	dec	r24
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <prepare_rx+0xbe>
     ba6:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
     ba8:	ee ed       	ldi	r30, 0xDE	; 222
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	20 81       	ld	r18, Z
     bae:	82 2b       	or	r24, r18
     bb0:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
     bb2:	ef ed       	ldi	r30, 0xDF	; 223
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	89 2b       	or	r24, r25
     bba:	80 83       	st	Z, r24
	return FALSE;
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	08 95       	ret
}

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
		return TRUE;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return FALSE;
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
		return TRUE;			// no vacancy ...
     bc4:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return FALSE;
	}
     bc6:	08 95       	ret

00000bc8 <prepare_tx>:

BOOL prepare_tx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15) 				// illegal MOB number
     bc8:	8f 30       	cpi	r24, 0x0F	; 15
     bca:	08 f0       	brcs	.+2      	; 0xbce <prepare_tx+0x6>
     bcc:	49 c0       	rjmp	.+146    	; 0xc60 <prepare_tx+0x98>
		return TRUE;
	canlist[ (unsigned)mob]=callback;
     bce:	e8 2f       	mov	r30, r24
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	ea 50       	subi	r30, 0x0A	; 10
     bd8:	fb 4f       	sbci	r31, 0xFB	; 251
     bda:	31 83       	std	Z+1, r19	; 0x01
     bdc:	20 83       	st	Z, r18

	CANPAGE = mob << 4;
     bde:	98 2f       	mov	r25, r24
     be0:	92 95       	swap	r25
     be2:	90 7f       	andi	r25, 0xF0	; 240
     be4:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if( callback==0)			// release this MOB
     be8:	23 2b       	or	r18, r19
     bea:	d9 f4       	brne	.+54     	; 0xc22 <prepare_tx+0x5a>
	{
		CANSTMOB = 0x00;    	// cancel pending operation
     bec:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0x00;
     bf0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		unsigned mask=1<<mob;
     bf4:	21 e0       	ldi	r18, 0x01	; 1
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	a9 01       	movw	r20, r18
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <prepare_tx+0x38>
     bfc:	44 0f       	add	r20, r20
     bfe:	55 1f       	adc	r21, r21
     c00:	8a 95       	dec	r24
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <prepare_tx+0x34>
     c04:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
     c06:	ee ed       	ldi	r30, 0xDE	; 222
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	20 81       	ld	r18, Z
     c0c:	80 95       	com	r24
     c0e:	82 23       	and	r24, r18
     c10:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
     c12:	ef ed       	ldi	r30, 0xDF	; 223
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	90 95       	com	r25
     c1a:	89 23       	and	r24, r25
     c1c:	80 83       	st	Z, r24
		return FALSE;
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	08 95       	ret
	}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
     c22:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     c26:	90 7c       	andi	r25, 0xC0	; 192
     c28:	e9 f4       	brne	.+58     	; 0xc64 <prepare_tx+0x9c>
	return FALSE;			// no vacancy ...
	CANSTMOB = 0x00;    	// cancel pending operation
     c2a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     c2e:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANHPMOB = 0x00;		// enable direct mob indexing, see docu
     c32:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	//CANIDT1=id >>3;
	//CANIDT2=id <<5;
	//CANCDMOB=0x40; // enable TX
	unsigned mask=1<<mob;
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	a9 01       	movw	r20, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <prepare_tx+0x7a>
     c3e:	44 0f       	add	r20, r20
     c40:	55 1f       	adc	r21, r21
     c42:	8a 95       	dec	r24
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <prepare_tx+0x76>
     c46:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
     c48:	ee ed       	ldi	r30, 0xDE	; 222
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	20 81       	ld	r18, Z
     c4e:	82 2b       	or	r24, r18
     c50:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
     c52:	ef ed       	ldi	r30, 0xDF	; 223
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	89 2b       	or	r24, r25
     c5a:	80 83       	st	Z, r24
	return TRUE;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	08 95       	ret
	}

BOOL prepare_tx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
{
	if( mob >= 15) 				// illegal MOB number
		return TRUE;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return FALSE;
	}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
	return FALSE;			// no vacancy ...
     c64:	80 e0       	ldi	r24, 0x00	; 0
	//CANCDMOB=0x40; // enable TX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return TRUE;
}
     c66:	08 95       	ret

00000c68 <can_init>:

void can_init( void)
	{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
	unsigned mob;
	#ifdef BAUD_500K
		CANBT1=0x02;	// 16 MHz, 500kbit/s
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		CANBT2=0x0C;
     c72:	8c e0       	ldi	r24, 0x0C	; 12
     c74:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		CANBT3=0x37;
     c78:	87 e3       	ldi	r24, 0x37	; 55
     c7a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     c7e:	80 e0       	ldi	r24, 0x00	; 0
		CANBT3=0x36;
	#endif
	
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
     c80:	cd ee       	ldi	r28, 0xED	; 237
     c82:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
     c84:	ae ee       	ldi	r26, 0xEE	; 238
     c86:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
     c88:	ef ee       	ldi	r30, 0xEF	; 239
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
		CANBT3=0x36;
	#endif
	
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
     c8c:	98 2f       	mov	r25, r24
     c8e:	92 95       	swap	r25
     c90:	90 7f       	andi	r25, 0xF0	; 240
     c92:	98 83       	st	Y, r25
		CANSTMOB = 0;
     c94:	1c 92       	st	X, r1
		CANCDMOB = 0;
     c96:	10 82       	st	Z, r1
     c98:	8f 5f       	subi	r24, 0xFF	; 255
		CANBT1=0x00;	// 16 MHz, 1000kbit/s
		CANBT2=0x0C;
		CANBT3=0x36;
	#endif
	
	for (mob = 0; mob < NO_MOBS; mob++)
     c9a:	8f 30       	cpi	r24, 0x0F	; 15
     c9c:	b9 f7       	brne	.-18     	; 0xc8c <can_init+0x24>
		{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
		}
	CANGCON |= 0x02;
     c9e:	e8 ed       	ldi	r30, 0xD8	; 216
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	82 60       	ori	r24, 0x02	; 2
     ca6:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX) | (1<< ENTX);
     ca8:	80 eb       	ldi	r24, 0xB0	; 176
     caa:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <Send_buffer_put>:
void Send_buffer_flush(struct ringBufSCAN* _this, const int clearBuffer) {
	_this->count = 0;
	_this->head = 0;
	_this->tail = 0;
	if (clearBuffer) {
		memset(_this->buf, 0, sizeof (_this->buf));
     cb4:	fc 01       	movw	r30, r24
     cb6:	ec 5a       	subi	r30, 0xAC	; 172
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	20 81       	ld	r18, Z
     cbc:	31 81       	ldd	r19, Z+1	; 0x01
     cbe:	25 32       	cpi	r18, 0x25	; 37
     cc0:	31 05       	cpc	r19, r1
     cc2:	8c f5       	brge	.+98     	; 0xd26 <Send_buffer_put+0x72>
     cc4:	34 97       	sbiw	r30, 0x04	; 4
     cc6:	01 90       	ld	r0, Z+
     cc8:	f0 81       	ld	r31, Z
     cca:	e0 2d       	mov	r30, r0
     ccc:	df 01       	movw	r26, r30
     cce:	aa 0f       	add	r26, r26
     cd0:	bb 1f       	adc	r27, r27
     cd2:	a8 0f       	add	r26, r24
     cd4:	b9 1f       	adc	r27, r25
     cd6:	6d 93       	st	X+, r22
     cd8:	7c 93       	st	X, r23
     cda:	bf 01       	movw	r22, r30
     cdc:	6f 5f       	subi	r22, 0xFF	; 255
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
     ce0:	68 32       	cpi	r22, 0x28	; 40
     ce2:	71 05       	cpc	r23, r1
     ce4:	d0 f4       	brcc	.+52     	; 0xd1a <Send_buffer_put+0x66>
     ce6:	66 0f       	add	r22, r22
     ce8:	77 1f       	adc	r23, r23
     cea:	dc 01       	movw	r26, r24
     cec:	a6 0f       	add	r26, r22
     cee:	b7 1f       	adc	r27, r23
     cf0:	4d 93       	st	X+, r20
     cf2:	5c 93       	st	X, r21
     cf4:	32 96       	adiw	r30, 0x02	; 2
     cf6:	e8 32       	cpi	r30, 0x28	; 40
     cf8:	f1 05       	cpc	r31, r1
     cfa:	10 f0       	brcs	.+4      	; 0xd00 <Send_buffer_put+0x4c>
     cfc:	e0 e0       	ldi	r30, 0x00	; 0
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	dc 01       	movw	r26, r24
     d02:	a0 5b       	subi	r26, 0xB0	; 176
     d04:	bf 4f       	sbci	r27, 0xFF	; 255
     d06:	ed 93       	st	X+, r30
     d08:	fc 93       	st	X, r31
     d0a:	fc 01       	movw	r30, r24
     d0c:	ec 5a       	subi	r30, 0xAC	; 172
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	2e 5f       	subi	r18, 0xFE	; 254
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	31 83       	std	Z+1, r19	; 0x01
     d16:	20 83       	st	Z, r18
     d18:	08 95       	ret
     d1a:	fc 01       	movw	r30, r24
     d1c:	51 83       	std	Z+1, r21	; 0x01
     d1e:	40 83       	st	Z, r20
     d20:	e1 e0       	ldi	r30, 0x01	; 1
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	ed cf       	rjmp	.-38     	; 0xd00 <Send_buffer_put+0x4c>
     d26:	08 95       	ret

00000d28 <ReceiveCANFast>:
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	fc 01       	movw	r30, r24
     d2e:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <receiveMode>
     d32:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <receiveMode+0x1>
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	09 f0       	breq	.+2      	; 0xd3c <ReceiveCANFast+0x14>
     d3a:	74 c0       	rjmp	.+232    	; 0xe24 <ReceiveCANFast+0xfc>
     d3c:	ef 01       	movw	r28, r30
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	88 50       	subi	r24, 0x08	; 8
     d42:	82 30       	cpi	r24, 0x02	; 2
     d44:	08 f0       	brcs	.+2      	; 0xd48 <ReceiveCANFast+0x20>
     d46:	46 c0       	rjmp	.+140    	; 0xdd4 <ReceiveCANFast+0xac>
     d48:	63 81       	ldd	r22, Z+3	; 0x03
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	76 2f       	mov	r23, r22
     d4e:	66 27       	eor	r22, r22
     d50:	84 81       	ldd	r24, Z+4	; 0x04
     d52:	68 0f       	add	r22, r24
     d54:	71 1d       	adc	r23, r1
     d56:	80 91 e9 07 	lds	r24, 0x07E9	; 0x8007e9 <MaxIndex>
     d5a:	90 91 ea 07 	lds	r25, 0x07EA	; 0x8007ea <MaxIndex+0x1>
     d5e:	68 17       	cp	r22, r24
     d60:	79 07       	cpc	r23, r25
     d62:	80 f4       	brcc	.+32     	; 0xd84 <ReceiveCANFast+0x5c>
     d64:	45 81       	ldd	r20, Z+5	; 0x05
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	54 2f       	mov	r21, r20
     d6a:	44 27       	eor	r20, r20
     d6c:	86 81       	ldd	r24, Z+6	; 0x06
     d6e:	48 0f       	add	r20, r24
     d70:	51 1d       	adc	r21, r1
     d72:	83 e9       	ldi	r24, 0x93	; 147
     d74:	97 e0       	ldi	r25, 0x07	; 7
     d76:	9e df       	rcall	.-196    	; 0xcb4 <Send_buffer_put>
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <ReceivedData+0x1>
     d80:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <ReceivedData>
     d84:	6f 81       	ldd	r22, Y+7	; 0x07
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	76 2f       	mov	r23, r22
     d8a:	66 27       	eor	r22, r22
     d8c:	88 85       	ldd	r24, Y+8	; 0x08
     d8e:	68 0f       	add	r22, r24
     d90:	71 1d       	adc	r23, r1
     d92:	80 91 e9 07 	lds	r24, 0x07E9	; 0x8007e9 <MaxIndex>
     d96:	90 91 ea 07 	lds	r25, 0x07EA	; 0x8007ea <MaxIndex+0x1>
     d9a:	68 17       	cp	r22, r24
     d9c:	79 07       	cpc	r23, r25
     d9e:	80 f4       	brcc	.+32     	; 0xdc0 <ReceiveCANFast+0x98>
     da0:	49 85       	ldd	r20, Y+9	; 0x09
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	54 2f       	mov	r21, r20
     da6:	44 27       	eor	r20, r20
     da8:	8a 85       	ldd	r24, Y+10	; 0x0a
     daa:	48 0f       	add	r20, r24
     dac:	51 1d       	adc	r21, r1
     dae:	83 e9       	ldi	r24, 0x93	; 147
     db0:	97 e0       	ldi	r25, 0x07	; 7
     db2:	80 df       	rcall	.-256    	; 0xcb4 <Send_buffer_put>
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <ReceivedData+0x1>
     dbc:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <ReceivedData>
     dc0:	48 81       	ld	r20, Y
     dc2:	59 81       	ldd	r21, Y+1	; 0x01
     dc4:	4f 71       	andi	r20, 0x1F	; 31
     dc6:	55 27       	eor	r21, r21
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	83 e9       	ldi	r24, 0x93	; 147
     dce:	97 e0       	ldi	r25, 0x07	; 7
     dd0:	71 df       	rcall	.-286    	; 0xcb4 <Send_buffer_put>
     dd2:	ac c0       	rjmp	.+344    	; 0xf2c <ReceiveCANFast+0x204>
     dd4:	63 81       	ldd	r22, Z+3	; 0x03
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	76 2f       	mov	r23, r22
     dda:	66 27       	eor	r22, r22
     ddc:	84 81       	ldd	r24, Z+4	; 0x04
     dde:	68 0f       	add	r22, r24
     de0:	71 1d       	adc	r23, r1
     de2:	80 91 e9 07 	lds	r24, 0x07E9	; 0x8007e9 <MaxIndex>
     de6:	90 91 ea 07 	lds	r25, 0x07EA	; 0x8007ea <MaxIndex+0x1>
     dea:	68 17       	cp	r22, r24
     dec:	79 07       	cpc	r23, r25
     dee:	80 f4       	brcc	.+32     	; 0xe10 <ReceiveCANFast+0xe8>
     df0:	45 81       	ldd	r20, Z+5	; 0x05
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	54 2f       	mov	r21, r20
     df6:	44 27       	eor	r20, r20
     df8:	86 81       	ldd	r24, Z+6	; 0x06
     dfa:	48 0f       	add	r20, r24
     dfc:	51 1d       	adc	r21, r1
     dfe:	83 e9       	ldi	r24, 0x93	; 147
     e00:	97 e0       	ldi	r25, 0x07	; 7
     e02:	58 df       	rcall	.-336    	; 0xcb4 <Send_buffer_put>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <ReceivedData+0x1>
     e0c:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <ReceivedData>
     e10:	48 81       	ld	r20, Y
     e12:	59 81       	ldd	r21, Y+1	; 0x01
     e14:	4f 71       	andi	r20, 0x1F	; 31
     e16:	55 27       	eor	r21, r21
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	83 e9       	ldi	r24, 0x93	; 147
     e1e:	97 e0       	ldi	r25, 0x07	; 7
     e20:	49 df       	rcall	.-366    	; 0xcb4 <Send_buffer_put>
     e22:	84 c0       	rjmp	.+264    	; 0xf2c <ReceiveCANFast+0x204>
     e24:	a0 91 3b 07 	lds	r26, 0x073B	; 0x80073b <receiveArrayAddressCAN>
     e28:	b0 91 3c 07 	lds	r27, 0x073C	; 0x80073c <receiveArrayAddressCAN+0x1>
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	8f 71       	andi	r24, 0x1F	; 31
     e32:	99 27       	eor	r25, r25
     e34:	11 96       	adiw	r26, 0x01	; 1
     e36:	9c 93       	st	X, r25
     e38:	8e 93       	st	-X, r24
     e3a:	82 81       	ldd	r24, Z+2	; 0x02
     e3c:	88 50       	subi	r24, 0x08	; 8
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	08 f0       	brcs	.+2      	; 0xe44 <ReceiveCANFast+0x11c>
     e42:	4e c0       	rjmp	.+156    	; 0xee0 <ReceiveCANFast+0x1b8>
     e44:	83 81       	ldd	r24, Z+3	; 0x03
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	98 2f       	mov	r25, r24
     e4a:	88 27       	eor	r24, r24
     e4c:	24 81       	ldd	r18, Z+4	; 0x04
     e4e:	82 0f       	add	r24, r18
     e50:	91 1d       	adc	r25, r1
     e52:	20 91 e9 07 	lds	r18, 0x07E9	; 0x8007e9 <MaxIndex>
     e56:	30 91 ea 07 	lds	r19, 0x07EA	; 0x8007ea <MaxIndex+0x1>
     e5a:	82 17       	cp	r24, r18
     e5c:	93 07       	cpc	r25, r19
     e5e:	c0 f4       	brcc	.+48     	; 0xe90 <ReceiveCANFast+0x168>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	a0 91 3b 07 	lds	r26, 0x073B	; 0x80073b <receiveArrayAddressCAN>
     e68:	b0 91 3c 07 	lds	r27, 0x073C	; 0x80073c <receiveArrayAddressCAN+0x1>
     e6c:	a8 0f       	add	r26, r24
     e6e:	b9 1f       	adc	r27, r25
     e70:	85 81       	ldd	r24, Z+5	; 0x05
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	98 2f       	mov	r25, r24
     e76:	88 27       	eor	r24, r24
     e78:	26 81       	ldd	r18, Z+6	; 0x06
     e7a:	82 0f       	add	r24, r18
     e7c:	91 1d       	adc	r25, r1
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	9c 93       	st	X, r25
     e82:	8e 93       	st	-X, r24
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <ReceivedData+0x1>
     e8c:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <ReceivedData>
     e90:	87 81       	ldd	r24, Z+7	; 0x07
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	98 2f       	mov	r25, r24
     e96:	88 27       	eor	r24, r24
     e98:	20 85       	ldd	r18, Z+8	; 0x08
     e9a:	82 0f       	add	r24, r18
     e9c:	91 1d       	adc	r25, r1
     e9e:	20 91 e9 07 	lds	r18, 0x07E9	; 0x8007e9 <MaxIndex>
     ea2:	30 91 ea 07 	lds	r19, 0x07EA	; 0x8007ea <MaxIndex+0x1>
     ea6:	82 17       	cp	r24, r18
     ea8:	93 07       	cpc	r25, r19
     eaa:	08 f0       	brcs	.+2      	; 0xeae <ReceiveCANFast+0x186>
     eac:	3f c0       	rjmp	.+126    	; 0xf2c <ReceiveCANFast+0x204>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	a0 91 3b 07 	lds	r26, 0x073B	; 0x80073b <receiveArrayAddressCAN>
     eb6:	b0 91 3c 07 	lds	r27, 0x073C	; 0x80073c <receiveArrayAddressCAN+0x1>
     eba:	a8 0f       	add	r26, r24
     ebc:	b9 1f       	adc	r27, r25
     ebe:	81 85       	ldd	r24, Z+9	; 0x09
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	98 2f       	mov	r25, r24
     ec4:	88 27       	eor	r24, r24
     ec6:	22 85       	ldd	r18, Z+10	; 0x0a
     ec8:	82 0f       	add	r24, r18
     eca:	91 1d       	adc	r25, r1
     ecc:	11 96       	adiw	r26, 0x01	; 1
     ece:	9c 93       	st	X, r25
     ed0:	8e 93       	st	-X, r24
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <ReceivedData+0x1>
     eda:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <ReceivedData>
     ede:	26 c0       	rjmp	.+76     	; 0xf2c <ReceiveCANFast+0x204>
     ee0:	83 81       	ldd	r24, Z+3	; 0x03
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	98 2f       	mov	r25, r24
     ee6:	88 27       	eor	r24, r24
     ee8:	24 81       	ldd	r18, Z+4	; 0x04
     eea:	82 0f       	add	r24, r18
     eec:	91 1d       	adc	r25, r1
     eee:	20 91 e9 07 	lds	r18, 0x07E9	; 0x8007e9 <MaxIndex>
     ef2:	30 91 ea 07 	lds	r19, 0x07EA	; 0x8007ea <MaxIndex+0x1>
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	c0 f4       	brcc	.+48     	; 0xf2c <ReceiveCANFast+0x204>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	a0 91 3b 07 	lds	r26, 0x073B	; 0x80073b <receiveArrayAddressCAN>
     f04:	b0 91 3c 07 	lds	r27, 0x073C	; 0x80073c <receiveArrayAddressCAN+0x1>
     f08:	a8 0f       	add	r26, r24
     f0a:	b9 1f       	adc	r27, r25
     f0c:	85 81       	ldd	r24, Z+5	; 0x05
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	98 2f       	mov	r25, r24
     f12:	88 27       	eor	r24, r24
     f14:	26 81       	ldd	r18, Z+6	; 0x06
     f16:	82 0f       	add	r24, r18
     f18:	91 1d       	adc	r25, r1
     f1a:	11 96       	adiw	r26, 0x01	; 1
     f1c:	9c 93       	st	X, r25
     f1e:	8e 93       	st	-X, r24
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <ReceivedData+0x1>
     f28:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <ReceivedData>
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	08 95       	ret

00000f32 <ToSendCAN>:
     f32:	ab 01       	movw	r20, r22
     f34:	bc 01       	movw	r22, r24
     f36:	85 ee       	ldi	r24, 0xE5	; 229
     f38:	96 e0       	ldi	r25, 0x06	; 6
     f3a:	bc ce       	rjmp	.-648    	; 0xcb4 <Send_buffer_put>
     f3c:	08 95       	ret

00000f3e <Transmit_buffer_put>:
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	fc 01       	movw	r30, r24
     f48:	e8 54       	subi	r30, 0x48	; 72
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	a0 81       	ld	r26, Z
     f4e:	b1 81       	ldd	r27, Z+1	; 0x01
     f50:	a7 35       	cpi	r26, 0x57	; 87
     f52:	b1 05       	cpc	r27, r1
     f54:	0c f0       	brlt	.+2      	; 0xf58 <Transmit_buffer_put+0x1a>
     f56:	50 c0       	rjmp	.+160    	; 0xff8 <Transmit_buffer_put+0xba>
     f58:	34 97       	sbiw	r30, 0x04	; 4
     f5a:	01 90       	ld	r0, Z+
     f5c:	f0 81       	ld	r31, Z
     f5e:	e0 2d       	mov	r30, r0
     f60:	ef 01       	movw	r28, r30
     f62:	cc 0f       	add	r28, r28
     f64:	dd 1f       	adc	r29, r29
     f66:	c8 0f       	add	r28, r24
     f68:	d9 1f       	adc	r29, r25
     f6a:	79 83       	std	Y+1, r23	; 0x01
     f6c:	68 83       	st	Y, r22
     f6e:	bf 01       	movw	r22, r30
     f70:	6f 5f       	subi	r22, 0xFF	; 255
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	6a 35       	cpi	r22, 0x5A	; 90
     f76:	71 05       	cpc	r23, r1
     f78:	88 f5       	brcc	.+98     	; 0xfdc <Transmit_buffer_put+0x9e>
     f7a:	ec 01       	movw	r28, r24
     f7c:	cc 54       	subi	r28, 0x4C	; 76
     f7e:	df 4f       	sbci	r29, 0xFF	; 255
     f80:	79 83       	std	Y+1, r23	; 0x01
     f82:	68 83       	st	Y, r22
     f84:	24 96       	adiw	r28, 0x04	; 4
     f86:	8d 01       	movw	r16, r26
     f88:	0f 5f       	subi	r16, 0xFF	; 255
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	19 83       	std	Y+1, r17	; 0x01
     f8e:	08 83       	st	Y, r16
     f90:	66 0f       	add	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	ec 01       	movw	r28, r24
     f96:	c6 0f       	add	r28, r22
     f98:	d7 1f       	adc	r29, r23
     f9a:	59 83       	std	Y+1, r21	; 0x01
     f9c:	48 83       	st	Y, r20
     f9e:	af 01       	movw	r20, r30
     fa0:	4e 5f       	subi	r20, 0xFE	; 254
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	4a 35       	cpi	r20, 0x5A	; 90
     fa6:	51 05       	cpc	r21, r1
     fa8:	08 f5       	brcc	.+66     	; 0xfec <Transmit_buffer_put+0xae>
     faa:	44 0f       	add	r20, r20
     fac:	55 1f       	adc	r21, r21
     fae:	ec 01       	movw	r28, r24
     fb0:	c4 0f       	add	r28, r20
     fb2:	d5 1f       	adc	r29, r21
     fb4:	39 83       	std	Y+1, r19	; 0x01
     fb6:	28 83       	st	Y, r18
     fb8:	33 96       	adiw	r30, 0x03	; 3
     fba:	ea 35       	cpi	r30, 0x5A	; 90
     fbc:	f1 05       	cpc	r31, r1
     fbe:	10 f0       	brcs	.+4      	; 0xfc4 <Transmit_buffer_put+0x86>
     fc0:	e0 e0       	ldi	r30, 0x00	; 0
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	ec 01       	movw	r28, r24
     fc6:	cc 54       	subi	r28, 0x4C	; 76
     fc8:	df 4f       	sbci	r29, 0xFF	; 255
     fca:	f9 83       	std	Y+1, r31	; 0x01
     fcc:	e8 83       	st	Y, r30
     fce:	fc 01       	movw	r30, r24
     fd0:	e8 54       	subi	r30, 0x48	; 72
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	13 96       	adiw	r26, 0x03	; 3
     fd6:	b1 83       	std	Z+1, r27	; 0x01
     fd8:	a0 83       	st	Z, r26
     fda:	0e c0       	rjmp	.+28     	; 0xff8 <Transmit_buffer_put+0xba>
     fdc:	fc 01       	movw	r30, r24
     fde:	51 83       	std	Z+1, r21	; 0x01
     fe0:	40 83       	st	Z, r20
     fe2:	33 83       	std	Z+3, r19	; 0x03
     fe4:	22 83       	std	Z+2, r18	; 0x02
     fe6:	e2 e0       	ldi	r30, 0x02	; 2
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	ec cf       	rjmp	.-40     	; 0xfc4 <Transmit_buffer_put+0x86>
     fec:	fc 01       	movw	r30, r24
     fee:	31 83       	std	Z+1, r19	; 0x01
     ff0:	20 83       	st	Z, r18
     ff2:	e1 e0       	ldi	r30, 0x01	; 1
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	e6 cf       	rjmp	.-52     	; 0xfc4 <Transmit_buffer_put+0x86>
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	08 95       	ret

00001002 <Send_buffer_get>:
    1002:	fc 01       	movw	r30, r24
    1004:	ec 5a       	subi	r30, 0xAC	; 172
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	40 81       	ld	r20, Z
    100a:	51 81       	ldd	r21, Z+1	; 0x01
    100c:	14 16       	cp	r1, r20
    100e:	15 06       	cpc	r1, r21
    1010:	e4 f4       	brge	.+56     	; 0x104a <Send_buffer_get+0x48>
    1012:	32 97       	sbiw	r30, 0x02	; 2
    1014:	20 81       	ld	r18, Z
    1016:	31 81       	ldd	r19, Z+1	; 0x01
    1018:	f9 01       	movw	r30, r18
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	e8 0f       	add	r30, r24
    1020:	f9 1f       	adc	r31, r25
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	2f 5f       	subi	r18, 0xFF	; 255
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	28 32       	cpi	r18, 0x28	; 40
    102c:	31 05       	cpc	r19, r1
    102e:	10 f0       	brcs	.+4      	; 0x1034 <Send_buffer_get+0x32>
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	fc 01       	movw	r30, r24
    1036:	ee 5a       	subi	r30, 0xAE	; 174
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	31 83       	std	Z+1, r19	; 0x01
    103c:	20 83       	st	Z, r18
    103e:	32 96       	adiw	r30, 0x02	; 2
    1040:	41 50       	subi	r20, 0x01	; 1
    1042:	51 09       	sbc	r21, r1
    1044:	51 83       	std	Z+1, r21	; 0x01
    1046:	40 83       	st	Z, r20
    1048:	02 c0       	rjmp	.+4      	; 0x104e <Send_buffer_get+0x4c>
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	cb 01       	movw	r24, r22
    1050:	08 95       	ret

00001052 <sendDataCAN>:
    1052:	af 92       	push	r10
    1054:	bf 92       	push	r11
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	6c 01       	movw	r12, r24
    1068:	a0 90 cc 05 	lds	r10, 0x05CC	; 0x8005cc <TransmitBuffer+0xb8>
    106c:	b0 90 cd 05 	lds	r11, 0x05CD	; 0x8005cd <TransmitBuffer+0xb9>
    1070:	e0 90 39 07 	lds	r14, 0x0739	; 0x800739 <ring_buffer_CAN+0x54>
    1074:	f0 90 3a 07 	lds	r15, 0x073A	; 0x80073a <ring_buffer_CAN+0x55>
    1078:	f5 94       	asr	r15
    107a:	e7 94       	ror	r14
    107c:	1e 14       	cp	r1, r14
    107e:	1f 04       	cpc	r1, r15
    1080:	9c f4       	brge	.+38     	; 0x10a8 <sendDataCAN+0x56>
    1082:	c0 e0       	ldi	r28, 0x00	; 0
    1084:	d0 e0       	ldi	r29, 0x00	; 0
    1086:	85 ee       	ldi	r24, 0xE5	; 229
    1088:	96 e0       	ldi	r25, 0x06	; 6
    108a:	bb df       	rcall	.-138    	; 0x1002 <Send_buffer_get>
    108c:	8c 01       	movw	r16, r24
    108e:	85 ee       	ldi	r24, 0xE5	; 229
    1090:	96 e0       	ldi	r25, 0x06	; 6
    1092:	b7 df       	rcall	.-146    	; 0x1002 <Send_buffer_get>
    1094:	9c 01       	movw	r18, r24
    1096:	a8 01       	movw	r20, r16
    1098:	b6 01       	movw	r22, r12
    109a:	84 e1       	ldi	r24, 0x14	; 20
    109c:	95 e0       	ldi	r25, 0x05	; 5
    109e:	4f df       	rcall	.-354    	; 0xf3e <Transmit_buffer_put>
    10a0:	21 96       	adiw	r28, 0x01	; 1
    10a2:	ce 15       	cp	r28, r14
    10a4:	df 05       	cpc	r29, r15
    10a6:	79 f7       	brne	.-34     	; 0x1086 <sendDataCAN+0x34>
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	a8 16       	cp	r10, r24
    10ac:	b1 04       	cpc	r11, r1
    10ae:	10 f4       	brcc	.+4      	; 0x10b4 <sendDataCAN+0x62>
    10b0:	8d e0       	ldi	r24, 0x0D	; 13
    10b2:	2a dc       	rcall	.-1964   	; 0x908 <can_tx_kick>
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	08 95       	ret

000010ca <Transmit_buffer_get>:
    10ca:	fc 01       	movw	r30, r24
    10cc:	e8 54       	subi	r30, 0x48	; 72
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	40 81       	ld	r20, Z
    10d2:	51 81       	ldd	r21, Z+1	; 0x01
    10d4:	14 16       	cp	r1, r20
    10d6:	15 06       	cpc	r1, r21
    10d8:	e4 f4       	brge	.+56     	; 0x1112 <__stack+0x13>
    10da:	32 97       	sbiw	r30, 0x02	; 2
    10dc:	20 81       	ld	r18, Z
    10de:	31 81       	ldd	r19, Z+1	; 0x01
    10e0:	f9 01       	movw	r30, r18
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	e8 0f       	add	r30, r24
    10e8:	f9 1f       	adc	r31, r25
    10ea:	60 81       	ld	r22, Z
    10ec:	71 81       	ldd	r23, Z+1	; 0x01
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	2a 35       	cpi	r18, 0x5A	; 90
    10f4:	31 05       	cpc	r19, r1
    10f6:	10 f0       	brcs	.+4      	; 0x10fc <Transmit_buffer_get+0x32>
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	fc 01       	movw	r30, r24
    10fe:	ea 54       	subi	r30, 0x4A	; 74
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	31 83       	std	Z+1, r19	; 0x01
    1104:	20 83       	st	Z, r18
    1106:	32 96       	adiw	r30, 0x02	; 2
    1108:	41 50       	subi	r20, 0x01	; 1
    110a:	51 09       	sbc	r21, r1
    110c:	51 83       	std	Z+1, r21	; 0x01
    110e:	40 83       	st	Z, r20
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <__stack+0x17>
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	cb 01       	movw	r24, r22
    1118:	08 95       	ret

0000111a <Transmit_buffer_peek>:
    111a:	fc 01       	movw	r30, r24
    111c:	e8 54       	subi	r30, 0x48	; 72
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	20 81       	ld	r18, Z
    1122:	31 81       	ldd	r19, Z+1	; 0x01
    1124:	12 16       	cp	r1, r18
    1126:	13 06       	cpc	r1, r19
    1128:	5c f4       	brge	.+22     	; 0x1140 <Transmit_buffer_peek+0x26>
    112a:	32 97       	sbiw	r30, 0x02	; 2
    112c:	01 90       	ld	r0, Z+
    112e:	f0 81       	ld	r31, Z
    1130:	e0 2d       	mov	r30, r0
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	e8 0f       	add	r30, r24
    1138:	f9 1f       	adc	r31, r25
    113a:	80 81       	ld	r24, Z
    113c:	91 81       	ldd	r25, Z+1	; 0x01
    113e:	08 95       	ret
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	08 95       	ret

00001146 <Transmit_buffer_flush>:
	}
}

void Transmit_buffer_flush(struct ringBufTRANSMIT* _this, const int clearBuffer) {
	_this->count = 0;
    1146:	fc 01       	movw	r30, r24
    1148:	e8 54       	subi	r30, 0x48	; 72
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	11 82       	std	Z+1, r1	; 0x01
    114e:	10 82       	st	Z, r1
	_this->head = 0;
    1150:	34 97       	sbiw	r30, 0x04	; 4
    1152:	11 82       	std	Z+1, r1	; 0x01
    1154:	10 82       	st	Z, r1
	_this->tail = 0;
    1156:	32 96       	adiw	r30, 0x02	; 2
    1158:	11 82       	std	Z+1, r1	; 0x01
    115a:	10 82       	st	Z, r1
	if (clearBuffer) {
    115c:	67 2b       	or	r22, r23
    115e:	29 f0       	breq	.+10     	; 0x116a <Transmit_buffer_flush+0x24>
		memset(_this->buf, 0, sizeof (_this->buf));
    1160:	24 eb       	ldi	r18, 0xB4	; 180
    1162:	fc 01       	movw	r30, r24
    1164:	11 92       	st	Z+, r1
    1166:	2a 95       	dec	r18
    1168:	e9 f7       	brne	.-6      	; 0x1164 <Transmit_buffer_flush+0x1e>
    116a:	08 95       	ret

0000116c <beginCANFast>:
}



void beginCANFast(volatile int * ptr, unsigned int maxSize, unsigned char givenAddress){
	receiveArrayAddressCAN = ptr;
    116c:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <receiveArrayAddressCAN+0x1>
    1170:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <receiveArrayAddressCAN>
	moduleAddressCAN = givenAddress;
    1174:	40 93 e4 06 	sts	0x06E4, r20	; 0x8006e4 <moduleAddressCAN>
	MaxIndex = maxSize;
    1178:	70 93 ea 07 	sts	0x07EA, r23	; 0x8007ea <MaxIndex+0x1>
    117c:	60 93 e9 07 	sts	0x07E9, r22	; 0x8007e9 <MaxIndex>
	
	BOOL ret;
	ret=prepare_rx( CANFAST_MOB, moduleAddressCAN<<6, 0b11111100000, ReceiveCANFast); //all 1s forces comparison
    1180:	80 e4       	ldi	r24, 0x40	; 64
    1182:	48 9f       	mul	r20, r24
    1184:	b0 01       	movw	r22, r0
    1186:	11 24       	eor	r1, r1
    1188:	24 e9       	ldi	r18, 0x94	; 148
    118a:	36 e0       	ldi	r19, 0x06	; 6
    118c:	40 ee       	ldi	r20, 0xE0	; 224
    118e:	57 e0       	ldi	r21, 0x07	; 7
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	a6 dc       	rcall	.-1716   	; 0xae0 <prepare_rx>
	ASSERT( ret==0);
    1194:	88 23       	and	r24, r24
    1196:	09 f0       	breq	.+2      	; 0x119a <beginCANFast+0x2e>
    1198:	98 95       	break
	ASSERT( ret==0);
	ret=prepare_rx( BEACON_MOB, BeaconAddress<<6, 0b11111100000, ReceiveCANFastBEACON); //all 1s forces comparison
	ASSERT( ret==0);
	#endif
	
	prepare_tx(TRANSMITMOB, 0b11111111111, 0b11111111111, TransmitCANFast);
    119a:	22 ef       	ldi	r18, 0xF2	; 242
    119c:	38 e0       	ldi	r19, 0x08	; 8
    119e:	4f ef       	ldi	r20, 0xFF	; 255
    11a0:	57 e0       	ldi	r21, 0x07	; 7
    11a2:	6f ef       	ldi	r22, 0xFF	; 255
    11a4:	77 e0       	ldi	r23, 0x07	; 7
    11a6:	8d e0       	ldi	r24, 0x0D	; 13
    11a8:	0f dd       	rcall	.-1506   	; 0xbc8 <prepare_tx>
	List_Init(&head);
    11aa:	88 ea       	ldi	r24, 0xA8	; 168
    11ac:	94 e0       	ldi	r25, 0x04	; 4
    11ae:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <List_Init>
void *memset(void *s, int c, size_t n);

//flushes the send buffer to get it ready for new data

void Send_buffer_flush(struct ringBufSCAN* _this, const int clearBuffer) {
	_this->count = 0;
    11b2:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <ring_buffer_CAN+0x55>
    11b6:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <ring_buffer_CAN+0x54>
	_this->head = 0;
    11ba:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <ring_buffer_CAN+0x51>
    11be:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <ring_buffer_CAN+0x50>
	_this->tail = 0;
    11c2:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <ring_buffer_CAN+0x53>
    11c6:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <ring_buffer_CAN+0x52>
	prepare_tx(TRANSMITMOB, 0b11111111111, 0b11111111111, TransmitCANFast);
	List_Init(&head);
	Send_buffer_flush(&ring_buffer_CAN,0);
	//Send_buffer_flush(&ring_buffer_CAN_Control,1);
	//Send_buffer_flush(&ring_buffer_CAN_Beacon,1);
	Transmit_buffer_flush(&TransmitBuffer,0); 
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	84 e1       	ldi	r24, 0x14	; 20
    11d0:	95 e0       	ldi	r25, 0x05	; 5
    11d2:	b9 cf       	rjmp	.-142    	; 0x1146 <Transmit_buffer_flush>
    11d4:	08 95       	ret

000011d6 <initCANFastTransfer>:


int ReceiveCAN[10];
void initCANFastTransfer(void)
{
	beginCANFast(ReceiveCAN, sizeof(ReceiveCAN), RouterCardAddress);
    11d6:	44 e0       	ldi	r20, 0x04	; 4
    11d8:	64 e1       	ldi	r22, 0x14	; 20
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	80 ed       	ldi	r24, 0xD0	; 208
    11de:	96 e0       	ldi	r25, 0x06	; 6
    11e0:	c5 cf       	rjmp	.-118    	; 0x116c <beginCANFast>
    11e2:	08 95       	ret

000011e4 <TransmitCANFast>:
	}
}
#endif

void TransmitCANFast( CAN_packet *p, unsigned char mob) // interrupt callback
{
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
	return _this->count; 
	
}

unsigned int Transmit_buffer_GetCount(struct ringBufTRANSMIT* _this) {
	return _this->count;
    11f0:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <TransmitBuffer+0xb8>
    11f4:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <TransmitBuffer+0xb9>
{
	
	//NEW STATIC METHOD
	//if there is something to send
	
	if(Transmit_buffer_GetCount(&TransmitBuffer) > 0) 
    11f8:	21 15       	cp	r18, r1
    11fa:	31 05       	cpc	r19, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <TransmitCANFast+0x1c>
    11fe:	aa c0       	rjmp	.+340    	; 0x1354 <TransmitCANFast+0x170>
    1200:	ec 01       	movw	r28, r24
	{
// 		#ifdef NEW_MAIN
// 		toggleLED(LED1);
// 		#endif
		//if more than 2 data/index pairs left might be able to send large packet. 
		if(Transmit_buffer_GetCount(&TransmitBuffer)>6) {
    1202:	27 30       	cpi	r18, 0x07	; 7
    1204:	31 05       	cpc	r19, r1
    1206:	08 f4       	brcc	.+2      	; 0x120a <TransmitCANFast+0x26>
    1208:	3f c0       	rjmp	.+126    	; 0x1288 <TransmitCANFast+0xa4>
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    120a:	84 e1       	ldi	r24, 0x14	; 20
    120c:	95 e0       	ldi	r25, 0x05	; 5
    120e:	5d df       	rcall	.-326    	; 0x10ca <Transmit_buffer_get>
    1210:	8c 01       	movw	r16, r24
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
    1212:	9c 01       	movw	r18, r24
    1214:	00 24       	eor	r0, r0
    1216:	36 95       	lsr	r19
    1218:	27 95       	ror	r18
    121a:	07 94       	ror	r0
    121c:	36 95       	lsr	r19
    121e:	27 95       	ror	r18
    1220:	07 94       	ror	r0
    1222:	32 2f       	mov	r19, r18
    1224:	20 2d       	mov	r18, r0
    1226:	2c 5f       	subi	r18, 0xFC	; 252
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
    122a:	39 83       	std	Y+1, r19	; 0x01
    122c:	28 83       	st	Y, r18
			//we are good to send the first index/value pair for sure. 
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    122e:	84 e1       	ldi	r24, 0x14	; 20
    1230:	95 e0       	ldi	r25, 0x05	; 5
    1232:	4b df       	rcall	.-362    	; 0x10ca <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);
    1234:	9b 83       	std	Y+3, r25	; 0x03
				p->data[2*i + 1] = temp;
    1236:	8c 83       	std	Y+4, r24	; 0x04
		if(Transmit_buffer_GetCount(&TransmitBuffer)>6) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
			//we are good to send the first index/value pair for sure. 
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1238:	84 e1       	ldi	r24, 0x14	; 20
    123a:	95 e0       	ldi	r25, 0x05	; 5
    123c:	46 df       	rcall	.-372    	; 0x10ca <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);
    123e:	9d 83       	std	Y+5, r25	; 0x05
				p->data[2*i + 1] = temp;
    1240:	8e 83       	std	Y+6, r24	; 0x06
			}
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
    1242:	84 e1       	ldi	r24, 0x14	; 20
    1244:	95 e0       	ldi	r25, 0x05	; 5
    1246:	69 df       	rcall	.-302    	; 0x111a <Transmit_buffer_peek>
    1248:	7c 01       	movw	r14, r24
    124a:	80 17       	cp	r24, r16
    124c:	91 07       	cpc	r25, r17
    124e:	c9 f4       	brne	.+50     	; 0x1282 <TransmitCANFast+0x9e>
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
    1250:	84 e1       	ldi	r24, 0x14	; 20
    1252:	95 e0       	ldi	r25, 0x05	; 5
    1254:	3a df       	rcall	.-396    	; 0x10ca <Transmit_buffer_get>
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1256:	84 e1       	ldi	r24, 0x14	; 20
    1258:	95 e0       	ldi	r25, 0x05	; 5
    125a:	37 df       	rcall	.-402    	; 0x10ca <Transmit_buffer_get>
					p->data[2*i] = (temp >> 8);
    125c:	9f 83       	std	Y+7, r25	; 0x07
					p->data[2*i + 1] = temp;
    125e:	88 87       	std	Y+8, r24	; 0x08
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1260:	84 e1       	ldi	r24, 0x14	; 20
    1262:	95 e0       	ldi	r25, 0x05	; 5
    1264:	32 df       	rcall	.-412    	; 0x10ca <Transmit_buffer_get>
					p->data[2*i] = (temp >> 8);
    1266:	99 87       	std	Y+9, r25	; 0x09
					p->data[2*i + 1] = temp;
    1268:	8a 87       	std	Y+10, r24	; 0x0a
				}
				//need to check if this was the last packet 
				if(Transmit_buffer_peek(&TransmitBuffer) == address) {
    126a:	84 e1       	ldi	r24, 0x14	; 20
    126c:	95 e0       	ldi	r25, 0x05	; 5
    126e:	55 df       	rcall	.-342    	; 0x111a <Transmit_buffer_peek>
    1270:	e8 16       	cp	r14, r24
    1272:	f9 06       	cpc	r15, r25
    1274:	19 f4       	brne	.+6      	; 0x127c <TransmitCANFast+0x98>
					//next address is same, so this isn't the last packet, send a length 8.
					p->length = 8;
    1276:	88 e0       	ldi	r24, 0x08	; 8
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	72 c0       	rjmp	.+228    	; 0x1360 <TransmitCANFast+0x17c>
				}
				else {
					//next address is different, and this is the last packet, so send a 9.
					p->length = 9; 
    127c:	89 e0       	ldi	r24, 0x09	; 9
    127e:	8a 83       	std	Y+2, r24	; 0x02
    1280:	6f c0       	rjmp	.+222    	; 0x1360 <TransmitCANFast+0x17c>
				}
			}
			else {
				//addresses don't match and we should just send what is currently in the packet. 
				p->length = 4; 
    1282:	84 e0       	ldi	r24, 0x04	; 4
    1284:	8a 83       	std	Y+2, r24	; 0x02
    1286:	6c c0       	rjmp	.+216    	; 0x1360 <TransmitCANFast+0x17c>
			}
		}
			//if exactly 2 data/index pairs left send with length 9. Receiver
			//will read the "wrong" length correctly, but realize this is the last packet.
			//note: still need to check incase two different destinations. 
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==6) {
    1288:	26 30       	cpi	r18, 0x06	; 6
    128a:	31 05       	cpc	r19, r1
    128c:	a9 f5       	brne	.+106    	; 0x12f8 <TransmitCANFast+0x114>
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    128e:	84 e1       	ldi	r24, 0x14	; 20
    1290:	95 e0       	ldi	r25, 0x05	; 5
    1292:	1b df       	rcall	.-458    	; 0x10ca <Transmit_buffer_get>
    1294:	8c 01       	movw	r16, r24
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
    1296:	9c 01       	movw	r18, r24
    1298:	00 24       	eor	r0, r0
    129a:	36 95       	lsr	r19
    129c:	27 95       	ror	r18
    129e:	07 94       	ror	r0
    12a0:	36 95       	lsr	r19
    12a2:	27 95       	ror	r18
    12a4:	07 94       	ror	r0
    12a6:	32 2f       	mov	r19, r18
    12a8:	20 2d       	mov	r18, r0
    12aa:	2c 5f       	subi	r18, 0xFC	; 252
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
    12ae:	39 83       	std	Y+1, r19	; 0x01
    12b0:	28 83       	st	Y, r18
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    12b2:	84 e1       	ldi	r24, 0x14	; 20
    12b4:	95 e0       	ldi	r25, 0x05	; 5
    12b6:	09 df       	rcall	.-494    	; 0x10ca <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);//this is so dumb
    12b8:	9b 83       	std	Y+3, r25	; 0x03
				p->data[2*i + 1] = temp;
    12ba:	8c 83       	std	Y+4, r24	; 0x04
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==6) {
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
			//we are good to send the first index/value pair for sure.
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    12bc:	84 e1       	ldi	r24, 0x14	; 20
    12be:	95 e0       	ldi	r25, 0x05	; 5
    12c0:	04 df       	rcall	.-504    	; 0x10ca <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);//this is so dumb
    12c2:	9d 83       	std	Y+5, r25	; 0x05
				p->data[2*i + 1] = temp;
    12c4:	8e 83       	std	Y+6, r24	; 0x06
			}
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
    12c6:	84 e1       	ldi	r24, 0x14	; 20
    12c8:	95 e0       	ldi	r25, 0x05	; 5
    12ca:	27 df       	rcall	.-434    	; 0x111a <Transmit_buffer_peek>
    12cc:	80 17       	cp	r24, r16
    12ce:	91 07       	cpc	r25, r17
    12d0:	81 f4       	brne	.+32     	; 0x12f2 <TransmitCANFast+0x10e>
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
    12d2:	84 e1       	ldi	r24, 0x14	; 20
    12d4:	95 e0       	ldi	r25, 0x05	; 5
    12d6:	f9 de       	rcall	.-526    	; 0x10ca <Transmit_buffer_get>
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    12d8:	84 e1       	ldi	r24, 0x14	; 20
    12da:	95 e0       	ldi	r25, 0x05	; 5
    12dc:	f6 de       	rcall	.-532    	; 0x10ca <Transmit_buffer_get>
					p->data[2*i] = (temp >> 8);
    12de:	9f 83       	std	Y+7, r25	; 0x07
					p->data[2*i + 1] = temp;
    12e0:	88 87       	std	Y+8, r24	; 0x08
			//now we need to check that the next address matches the current address
			if (Transmit_buffer_peek(&TransmitBuffer) == address) {
				//address match and we are clear to send them in a single packet
				Transmit_buffer_get(&TransmitBuffer); //call this to clear out the address
				for(int i = 2; i<4; i++) {
					unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    12e2:	84 e1       	ldi	r24, 0x14	; 20
    12e4:	95 e0       	ldi	r25, 0x05	; 5
    12e6:	f1 de       	rcall	.-542    	; 0x10ca <Transmit_buffer_get>
					p->data[2*i] = (temp >> 8);
    12e8:	99 87       	std	Y+9, r25	; 0x09
					p->data[2*i + 1] = temp;
    12ea:	8a 87       	std	Y+10, r24	; 0x0a
				}
				p->length = 9;
    12ec:	89 e0       	ldi	r24, 0x09	; 9
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	37 c0       	rjmp	.+110    	; 0x1360 <TransmitCANFast+0x17c>
			}
			else {
				//addresses don't match and we should just send what is currently in the packet.
				p->length = 4;
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	34 c0       	rjmp	.+104    	; 0x1360 <TransmitCANFast+0x17c>
			}
			
		}
			//if only 1 data/index pair receiver will know it is the last packet.
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==3){
    12f8:	23 30       	cpi	r18, 0x03	; 3
    12fa:	31 05       	cpc	r19, r1
    12fc:	e1 f4       	brne	.+56     	; 0x1336 <TransmitCANFast+0x152>
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
    12fe:	84 e1       	ldi	r24, 0x14	; 20
    1300:	95 e0       	ldi	r25, 0x05	; 5
    1302:	e3 de       	rcall	.-570    	; 0x10ca <Transmit_buffer_get>
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
    1304:	00 24       	eor	r0, r0
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	07 94       	ror	r0
    130c:	96 95       	lsr	r25
    130e:	87 95       	ror	r24
    1310:	07 94       	ror	r0
    1312:	98 2f       	mov	r25, r24
    1314:	80 2d       	mov	r24, r0
    1316:	04 96       	adiw	r24, 0x04	; 4
    1318:	99 83       	std	Y+1, r25	; 0x01
    131a:	88 83       	st	Y, r24
			p->length = 4;
    131c:	84 e0       	ldi	r24, 0x04	; 4
    131e:	8a 83       	std	Y+2, r24	; 0x02
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    1320:	84 e1       	ldi	r24, 0x14	; 20
    1322:	95 e0       	ldi	r25, 0x05	; 5
    1324:	d2 de       	rcall	.-604    	; 0x10ca <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);
    1326:	9b 83       	std	Y+3, r25	; 0x03
				p->data[2*i + 1] = temp;
    1328:	8c 83       	std	Y+4, r24	; 0x04
		else if(Transmit_buffer_GetCount(&TransmitBuffer)==3){
			unsigned int address = Transmit_buffer_get(&TransmitBuffer);
			p->id = ( address << 6) + RouterCardAddress; //not passed through messages will have wrong sender address
			p->length = 4;
			for(int i = 0; i<2; i++) {
				unsigned int temp = Transmit_buffer_get(&TransmitBuffer);
    132a:	84 e1       	ldi	r24, 0x14	; 20
    132c:	95 e0       	ldi	r25, 0x05	; 5
    132e:	cd de       	rcall	.-614    	; 0x10ca <Transmit_buffer_get>
				p->data[2*i] = (temp >> 8);
    1330:	9d 83       	std	Y+5, r25	; 0x05
				p->data[2*i + 1] = temp;
    1332:	8e 83       	std	Y+6, r24	; 0x06
    1334:	15 c0       	rjmp	.+42     	; 0x1360 <TransmitCANFast+0x17c>
		}
	
		else 
		{
			//error, missing dest/index/value set, previous packets could be very corrupt
			TransmitSetMissMatch++;
    1336:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <TransmitSetMissMatch>
    133a:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <TransmitSetMissMatch+0x1>
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <TransmitSetMissMatch+0x1>
    1344:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <TransmitSetMissMatch>
// 			#ifdef NEW_MAIN
// 				toggleLED(LED9);
// 			#endif
			Transmit_buffer_flush(&TransmitBuffer,1); 
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	84 e1       	ldi	r24, 0x14	; 20
    134e:	95 e0       	ldi	r25, 0x05	; 5
    1350:	fa de       	rcall	.-524    	; 0x1146 <Transmit_buffer_flush>
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <TransmitCANFast+0x17c>
		}
	}
	else {
		p->id = 1;
    1354:	21 e0       	ldi	r18, 0x01	; 1
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	fc 01       	movw	r30, r24
    135a:	31 83       	std	Z+1, r19	; 0x01
    135c:	20 83       	st	Z, r18
		p->length = 0;
    135e:	12 82       	std	Z+2, r1	; 0x02
	}
}
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	08 95       	ret

0000136e <parseComms>:
}

int getMacroSubCommand(void)
{
	return macroSubCommand;
}
    136e:	2c d2       	rcall	.+1112   	; 0x17c8 <getReceiveArray1>
    1370:	fc 01       	movw	r30, r24
    1372:	84 81       	ldd	r24, Z+4	; 0x04
    1374:	95 81       	ldd	r25, Z+5	; 0x05
    1376:	90 93 84 0b 	sts	0x0B84, r25	; 0x800b84 <leftMotorCommand+0x1>
    137a:	80 93 83 0b 	sts	0x0B83, r24	; 0x800b83 <leftMotorCommand>
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	90 93 82 0d 	sts	0x0D82, r25	; 0x800d82 <rightMotorCommand+0x1>
    1386:	80 93 81 0d 	sts	0x0D81, r24	; 0x800d81 <rightMotorCommand>
    138a:	86 81       	ldd	r24, Z+6	; 0x06
    138c:	97 81       	ldd	r25, Z+7	; 0x07
    138e:	90 93 2e 0d 	sts	0x0D2E, r25	; 0x800d2e <bucketMotorCommand+0x1>
    1392:	80 93 2d 0d 	sts	0x0D2D, r24	; 0x800d2d <bucketMotorCommand>
    1396:	80 85       	ldd	r24, Z+8	; 0x08
    1398:	91 85       	ldd	r25, Z+9	; 0x09
    139a:	90 93 30 0d 	sts	0x0D30, r25	; 0x800d30 <conveyorMotorCommand+0x1>
    139e:	80 93 2f 0d 	sts	0x0D2F, r24	; 0x800d2f <conveyorMotorCommand>
    13a2:	82 85       	ldd	r24, Z+10	; 0x0a
    13a4:	93 85       	ldd	r25, Z+11	; 0x0b
    13a6:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <macroCommand+0x1>
    13aa:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <macroCommand>
    13ae:	24 85       	ldd	r18, Z+12	; 0x0c
    13b0:	35 85       	ldd	r19, Z+13	; 0x0d
    13b2:	30 93 af 04 	sts	0x04AF, r19	; 0x8004af <macroSubCommand+0x1>
    13b6:	20 93 ae 04 	sts	0x04AE, r18	; 0x8004ae <macroSubCommand>
    13ba:	89 2b       	or	r24, r25
    13bc:	a1 f1       	breq	.+104    	; 0x1426 <parseComms+0xb8>
    13be:	83 e0       	ldi	r24, 0x03	; 3
    13c0:	8d d7       	rcall	.+3866   	; 0x22dc <toggleLED>
    13c2:	64 e0       	ldi	r22, 0x04	; 4
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	2f d3       	rcall	.+1630   	; 0x1a28 <ToSend1>
    13ca:	60 91 b0 04 	lds	r22, 0x04B0	; 0x8004b0 <macroCommand>
    13ce:	70 91 b1 04 	lds	r23, 0x04B1	; 0x8004b1 <macroCommand+0x1>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	29 d3       	rcall	.+1618   	; 0x1a28 <ToSend1>
    13d6:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <macroSubCommand>
    13da:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <macroSubCommand+0x1>
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	23 d3       	rcall	.+1606   	; 0x1a28 <ToSend1>
    13e2:	85 e0       	ldi	r24, 0x05	; 5
    13e4:	42 d3       	rcall	.+1668   	; 0x1a6a <sendData1>
    13e6:	60 ea       	ldi	r22, 0xA0	; 160
    13e8:	76 e8       	ldi	r23, 0x86	; 134
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <testOpenLoopCommandsLeftAndRight>
    13f2:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <macroCommand+0x1>
    13f6:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <macroCommand>
    13fa:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <macroSubCommand+0x1>
    13fe:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <macroSubCommand>
    1402:	64 e0       	ldi	r22, 0x04	; 4
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	0f d3       	rcall	.+1566   	; 0x1a28 <ToSend1>
    140a:	60 91 b0 04 	lds	r22, 0x04B0	; 0x8004b0 <macroCommand>
    140e:	70 91 b1 04 	lds	r23, 0x04B1	; 0x8004b1 <macroCommand+0x1>
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	09 d3       	rcall	.+1554   	; 0x1a28 <ToSend1>
    1416:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <macroSubCommand>
    141a:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <macroSubCommand+0x1>
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	03 d3       	rcall	.+1542   	; 0x1a28 <ToSend1>
    1422:	85 e0       	ldi	r24, 0x05	; 5
    1424:	22 c3       	rjmp	.+1604   	; 0x1a6a <sendData1>
    1426:	08 95       	ret

00001428 <updateComms>:
    1428:	cf 93       	push	r28
    142a:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <readyToSend>
    142e:	88 23       	and	r24, r24
    1430:	e1 f0       	breq	.+56     	; 0x146a <updateComms+0x42>
    1432:	8f ee       	ldi	r24, 0xEF	; 239
    1434:	97 e0       	ldi	r25, 0x07	; 7
    1436:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <timerDone>
    143a:	88 23       	and	r24, r24
    143c:	b1 f0       	breq	.+44     	; 0x146a <updateComms+0x42>
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	4d d7       	rcall	.+3738   	; 0x22dc <toggleLED>
    1442:	64 e0       	ldi	r22, 0x04	; 4
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	ef d2       	rcall	.+1502   	; 0x1a28 <ToSend1>
    144a:	60 91 b0 04 	lds	r22, 0x04B0	; 0x8004b0 <macroCommand>
    144e:	70 91 b1 04 	lds	r23, 0x04B1	; 0x8004b1 <macroCommand+0x1>
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	e9 d2       	rcall	.+1490   	; 0x1a28 <ToSend1>
    1456:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <macroSubCommand>
    145a:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <macroSubCommand+0x1>
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	e3 d2       	rcall	.+1478   	; 0x1a28 <ToSend1>
    1462:	85 e0       	ldi	r24, 0x05	; 5
    1464:	02 d3       	rcall	.+1540   	; 0x1a6a <sendData1>
    1466:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <readyToSend>
    146a:	8f ef       	ldi	r24, 0xFF	; 255
    146c:	97 e0       	ldi	r25, 0x07	; 7
    146e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <timerDone>
    1472:	81 11       	cpse	r24, r1
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <updateComms+0x5e>
    1476:	0b c1       	rjmp	.+534    	; 0x168e <updateComms+0x266>
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	30 d7       	rcall	.+3680   	; 0x22dc <toggleLED>
    147c:	82 b1       	in	r24, 0x02	; 2
    147e:	80 58       	subi	r24, 0x80	; 128
    1480:	82 b9       	out	0x02, r24	; 2
    1482:	c1 e0       	ldi	r28, 0x01	; 1
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <updateComms+0x60>
    1486:	c0 e0       	ldi	r28, 0x00	; 0
    1488:	05 d4       	rcall	.+2058   	; 0x1c94 <receiveData1>
    148a:	81 11       	cpse	r24, r1
    148c:	f5 cf       	rjmp	.-22     	; 0x1478 <updateComms+0x50>
    148e:	cc 23       	and	r28, r28
    1490:	09 f4       	brne	.+2      	; 0x1494 <updateComms+0x6c>
    1492:	f9 c0       	rjmp	.+498    	; 0x1686 <updateComms+0x25e>
    1494:	6c df       	rcall	.-296    	; 0x136e <parseComms>
    1496:	8c e0       	ldi	r24, 0x0C	; 12
    1498:	21 d7       	rcall	.+3650   	; 0x22dc <toggleLED>
    149a:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <macroCommand>
    149e:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <macroCommand+0x1>
    14a2:	89 2b       	or	r24, r25
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <updateComms+0x80>
    14a6:	df c0       	rjmp	.+446    	; 0x1666 <updateComms+0x23e>
    14a8:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <macroActive>
    14ac:	80 91 81 0d 	lds	r24, 0x0D81	; 0x800d81 <rightMotorCommand>
    14b0:	90 91 82 0d 	lds	r25, 0x0D82	; 0x800d82 <rightMotorCommand+0x1>
    14b4:	99 23       	and	r25, r25
    14b6:	1c f4       	brge	.+6      	; 0x14be <updateComms+0x96>
    14b8:	91 95       	neg	r25
    14ba:	81 95       	neg	r24
    14bc:	91 09       	sbc	r25, r1
    14be:	0d 97       	sbiw	r24, 0x0d	; 13
    14c0:	24 f0       	brlt	.+8      	; 0x14ca <updateComms+0xa2>
    14c2:	61 e0       	ldi	r22, 0x01	; 1
    14c4:	8b e0       	ldi	r24, 0x0B	; 11
    14c6:	a3 d6       	rcall	.+3398   	; 0x220e <setLED>
    14c8:	07 c0       	rjmp	.+14     	; 0x14d8 <updateComms+0xb0>
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	8b e0       	ldi	r24, 0x0B	; 11
    14ce:	9f d6       	rcall	.+3390   	; 0x220e <setLED>
    14d0:	10 92 82 0d 	sts	0x0D82, r1	; 0x800d82 <rightMotorCommand+0x1>
    14d4:	10 92 81 0d 	sts	0x0D81, r1	; 0x800d81 <rightMotorCommand>
    14d8:	80 91 83 0b 	lds	r24, 0x0B83	; 0x800b83 <leftMotorCommand>
    14dc:	90 91 84 0b 	lds	r25, 0x0B84	; 0x800b84 <leftMotorCommand+0x1>
    14e0:	99 23       	and	r25, r25
    14e2:	1c f4       	brge	.+6      	; 0x14ea <updateComms+0xc2>
    14e4:	91 95       	neg	r25
    14e6:	81 95       	neg	r24
    14e8:	91 09       	sbc	r25, r1
    14ea:	0d 97       	sbiw	r24, 0x0d	; 13
    14ec:	24 f0       	brlt	.+8      	; 0x14f6 <updateComms+0xce>
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	8a e0       	ldi	r24, 0x0A	; 10
    14f2:	8d d6       	rcall	.+3354   	; 0x220e <setLED>
    14f4:	07 c0       	rjmp	.+14     	; 0x1504 <updateComms+0xdc>
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	8a e0       	ldi	r24, 0x0A	; 10
    14fa:	89 d6       	rcall	.+3346   	; 0x220e <setLED>
    14fc:	10 92 84 0b 	sts	0x0B84, r1	; 0x800b84 <leftMotorCommand+0x1>
    1500:	10 92 83 0b 	sts	0x0B83, r1	; 0x800b83 <leftMotorCommand>
    1504:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <bucketMotorCommand>
    1508:	90 91 2e 0d 	lds	r25, 0x0D2E	; 0x800d2e <bucketMotorCommand+0x1>
    150c:	99 23       	and	r25, r25
    150e:	1c f4       	brge	.+6      	; 0x1516 <updateComms+0xee>
    1510:	91 95       	neg	r25
    1512:	81 95       	neg	r24
    1514:	91 09       	sbc	r25, r1
    1516:	0d 97       	sbiw	r24, 0x0d	; 13
    1518:	24 f0       	brlt	.+8      	; 0x1522 <updateComms+0xfa>
    151a:	61 e0       	ldi	r22, 0x01	; 1
    151c:	8c e0       	ldi	r24, 0x0C	; 12
    151e:	77 d6       	rcall	.+3310   	; 0x220e <setLED>
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <updateComms+0x108>
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	8c e0       	ldi	r24, 0x0C	; 12
    1526:	73 d6       	rcall	.+3302   	; 0x220e <setLED>
    1528:	10 92 84 0b 	sts	0x0B84, r1	; 0x800b84 <leftMotorCommand+0x1>
    152c:	10 92 83 0b 	sts	0x0B83, r1	; 0x800b83 <leftMotorCommand>
    1530:	20 91 e2 08 	lds	r18, 0x08E2	; 0x8008e2 <prevRightMotorCommand>
    1534:	30 91 e3 08 	lds	r19, 0x08E3	; 0x8008e3 <prevRightMotorCommand+0x1>
    1538:	80 91 81 0d 	lds	r24, 0x0D81	; 0x800d81 <rightMotorCommand>
    153c:	90 91 82 0d 	lds	r25, 0x0D82	; 0x800d82 <rightMotorCommand+0x1>
    1540:	28 17       	cp	r18, r24
    1542:	39 07       	cpc	r19, r25
    1544:	31 f4       	brne	.+12     	; 0x1552 <updateComms+0x12a>
    1546:	81 e7       	ldi	r24, 0x71	; 113
    1548:	9b e0       	ldi	r25, 0x0B	; 11
    154a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <timerDone>
    154e:	88 23       	and	r24, r24
    1550:	a9 f0       	breq	.+42     	; 0x157c <updateComms+0x154>
    1552:	80 91 81 0d 	lds	r24, 0x0D81	; 0x800d81 <rightMotorCommand>
    1556:	90 91 82 0d 	lds	r25, 0x0D82	; 0x800d82 <rightMotorCommand+0x1>
    155a:	28 e2       	ldi	r18, 0x28	; 40
    155c:	ac 01       	movw	r20, r24
    155e:	24 9f       	mul	r18, r20
    1560:	c0 01       	movw	r24, r0
    1562:	25 9f       	mul	r18, r21
    1564:	90 0d       	add	r25, r0
    1566:	11 24       	eor	r1, r1
    1568:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <RightMotor_SetVelNoCommsSafety>
    156c:	80 91 81 0d 	lds	r24, 0x0D81	; 0x800d81 <rightMotorCommand>
    1570:	90 91 82 0d 	lds	r25, 0x0D82	; 0x800d82 <rightMotorCommand+0x1>
    1574:	90 93 e3 08 	sts	0x08E3, r25	; 0x8008e3 <prevRightMotorCommand+0x1>
    1578:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <prevRightMotorCommand>
    157c:	20 91 63 0d 	lds	r18, 0x0D63	; 0x800d63 <prevLeftMotorCommand>
    1580:	30 91 64 0d 	lds	r19, 0x0D64	; 0x800d64 <prevLeftMotorCommand+0x1>
    1584:	80 91 83 0b 	lds	r24, 0x0B83	; 0x800b83 <leftMotorCommand>
    1588:	90 91 84 0b 	lds	r25, 0x0B84	; 0x800b84 <leftMotorCommand+0x1>
    158c:	28 17       	cp	r18, r24
    158e:	39 07       	cpc	r19, r25
    1590:	31 f4       	brne	.+12     	; 0x159e <updateComms+0x176>
    1592:	81 e6       	ldi	r24, 0x61	; 97
    1594:	9b e0       	ldi	r25, 0x0B	; 11
    1596:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <timerDone>
    159a:	88 23       	and	r24, r24
    159c:	a1 f0       	breq	.+40     	; 0x15c6 <updateComms+0x19e>
    159e:	20 91 83 0b 	lds	r18, 0x0B83	; 0x800b83 <leftMotorCommand>
    15a2:	30 91 84 0b 	lds	r19, 0x0B84	; 0x800b84 <leftMotorCommand+0x1>
    15a6:	48 ed       	ldi	r20, 0xD8	; 216
    15a8:	42 03       	mulsu	r20, r18
    15aa:	c0 01       	movw	r24, r0
    15ac:	43 9f       	mul	r20, r19
    15ae:	90 0d       	add	r25, r0
    15b0:	11 24       	eor	r1, r1
    15b2:	0e 94 de 13 	call	0x27bc	; 0x27bc <LeftMotor_SetVelNoCommsSafety>
    15b6:	80 91 83 0b 	lds	r24, 0x0B83	; 0x800b83 <leftMotorCommand>
    15ba:	90 91 84 0b 	lds	r25, 0x0B84	; 0x800b84 <leftMotorCommand+0x1>
    15be:	90 93 64 0d 	sts	0x0D64, r25	; 0x800d64 <prevLeftMotorCommand+0x1>
    15c2:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <prevLeftMotorCommand>
    15c6:	80 91 2f 0d 	lds	r24, 0x0D2F	; 0x800d2f <conveyorMotorCommand>
    15ca:	90 91 30 0d 	lds	r25, 0x0D30	; 0x800d30 <conveyorMotorCommand+0x1>
    15ce:	20 91 e0 08 	lds	r18, 0x08E0	; 0x8008e0 <prevConveyorCommand>
    15d2:	30 91 e1 08 	lds	r19, 0x08E1	; 0x8008e1 <prevConveyorCommand+0x1>
    15d6:	28 17       	cp	r18, r24
    15d8:	39 07       	cpc	r19, r25
    15da:	99 f0       	breq	.+38     	; 0x1602 <updateComms+0x1da>
    15dc:	89 2b       	or	r24, r25
    15de:	29 f0       	breq	.+10     	; 0x15ea <updateComms+0x1c2>
    15e0:	80 ea       	ldi	r24, 0xA0	; 160
    15e2:	9f e0       	ldi	r25, 0x0F	; 15
    15e4:	0e 94 25 1b 	call	0x364a	; 0x364a <ConveyorMotor_SetVelNoCommsSafety>
    15e8:	04 c0       	rjmp	.+8      	; 0x15f2 <updateComms+0x1ca>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 df 1a 	call	0x35be	; 0x35be <ConveyorMotor_SetVel>
    15f2:	80 91 2f 0d 	lds	r24, 0x0D2F	; 0x800d2f <conveyorMotorCommand>
    15f6:	90 91 30 0d 	lds	r25, 0x0D30	; 0x800d30 <conveyorMotorCommand+0x1>
    15fa:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <prevConveyorCommand+0x1>
    15fe:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <prevConveyorCommand>
    1602:	20 91 43 0b 	lds	r18, 0x0B43	; 0x800b43 <prevBucketCommand>
    1606:	30 91 44 0b 	lds	r19, 0x0B44	; 0x800b44 <prevBucketCommand+0x1>
    160a:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <bucketMotorCommand>
    160e:	90 91 2e 0d 	lds	r25, 0x0D2E	; 0x800d2e <bucketMotorCommand+0x1>
    1612:	28 17       	cp	r18, r24
    1614:	39 07       	cpc	r19, r25
    1616:	31 f4       	brne	.+12     	; 0x1624 <updateComms+0x1fc>
    1618:	83 e3       	ldi	r24, 0x33	; 51
    161a:	9d e0       	ldi	r25, 0x0D	; 13
    161c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <timerDone>
    1620:	88 23       	and	r24, r24
    1622:	31 f1       	breq	.+76     	; 0x1670 <updateComms+0x248>
    1624:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <bucketMotorCommand>
    1628:	90 91 2e 0d 	lds	r25, 0x0D2E	; 0x800d2e <bucketMotorCommand+0x1>
    162c:	82 30       	cpi	r24, 0x02	; 2
    162e:	91 05       	cpc	r25, r1
    1630:	2c f0       	brlt	.+10     	; 0x163c <updateComms+0x214>
    1632:	88 ee       	ldi	r24, 0xE8	; 232
    1634:	93 e0       	ldi	r25, 0x03	; 3
    1636:	0e 94 6d 1b 	call	0x36da	; 0x36da <BucketMotor_SetVelNoCommsSafety>
    163a:	0c c0       	rjmp	.+24     	; 0x1654 <updateComms+0x22c>
    163c:	8f 3f       	cpi	r24, 0xFF	; 255
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	2c f4       	brge	.+10     	; 0x164c <updateComms+0x224>
    1642:	88 e1       	ldi	r24, 0x18	; 24
    1644:	9c ef       	ldi	r25, 0xFC	; 252
    1646:	0e 94 6d 1b 	call	0x36da	; 0x36da <BucketMotor_SetVelNoCommsSafety>
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <updateComms+0x22c>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 6d 1b 	call	0x36da	; 0x36da <BucketMotor_SetVelNoCommsSafety>
    1654:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <bucketMotorCommand>
    1658:	90 91 2e 0d 	lds	r25, 0x0D2E	; 0x800d2e <bucketMotorCommand+0x1>
    165c:	90 93 44 0b 	sts	0x0B44, r25	; 0x800b44 <prevBucketCommand+0x1>
    1660:	80 93 43 0b 	sts	0x0B43, r24	; 0x800b43 <prevBucketCommand>
    1664:	05 c0       	rjmp	.+10     	; 0x1670 <updateComms+0x248>
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <macroActive>
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	36 d6       	rcall	.+3180   	; 0x22dc <toggleLED>
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <readyToSend>
    1676:	85 e8       	ldi	r24, 0x85	; 133
    1678:	9b e0       	ldi	r25, 0x0B	; 11
    167a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <resetTimer>
    167e:	8f ee       	ldi	r24, 0xEF	; 239
    1680:	97 e0       	ldi	r25, 0x07	; 7
    1682:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <resetTimer>
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	97 e0       	ldi	r25, 0x07	; 7
    168a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <resetTimer>
    168e:	85 e8       	ldi	r24, 0x85	; 133
    1690:	9b e0       	ldi	r25, 0x0B	; 11
    1692:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <timerDone>
    1696:	88 23       	and	r24, r24
    1698:	11 f1       	breq	.+68     	; 0x16de <updateComms+0x2b6>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 de 13 	call	0x27bc	; 0x27bc <LeftMotor_SetVelNoCommsSafety>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <RightMotor_SetVelNoCommsSafety>
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 6d 1b 	call	0x36da	; 0x36da <BucketMotor_SetVelNoCommsSafety>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 25 1b 	call	0x364a	; 0x364a <ConveyorMotor_SetVelNoCommsSafety>
    16ba:	64 e0       	ldi	r22, 0x04	; 4
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	b3 d1       	rcall	.+870    	; 0x1a28 <ToSend1>
    16c2:	60 91 b0 04 	lds	r22, 0x04B0	; 0x8004b0 <macroCommand>
    16c6:	70 91 b1 04 	lds	r23, 0x04B1	; 0x8004b1 <macroCommand+0x1>
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	ad d1       	rcall	.+858    	; 0x1a28 <ToSend1>
    16ce:	85 e0       	ldi	r24, 0x05	; 5
    16d0:	cc d1       	rcall	.+920    	; 0x1a6a <sendData1>
    16d2:	88 e0       	ldi	r24, 0x08	; 8
    16d4:	03 d6       	rcall	.+3078   	; 0x22dc <toggleLED>
    16d6:	85 e8       	ldi	r24, 0x85	; 133
    16d8:	9b e0       	ldi	r25, 0x0B	; 11
    16da:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <resetTimer>
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <setupCommsTimers>:
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	02 e3       	ldi	r16, 0x32	; 50
    16e8:	10 e0       	ldi	r17, 0x00	; 0
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	84 e4       	ldi	r24, 0x44	; 68
    16f8:	9d e0       	ldi	r25, 0x0D	; 13
    16fa:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
    16fe:	02 e0       	ldi	r16, 0x02	; 2
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	97 e0       	ldi	r25, 0x07	; 7
    1710:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
    1714:	05 e0       	ldi	r16, 0x05	; 5
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	86 e1       	ldi	r24, 0x16	; 22
    1724:	9a e0       	ldi	r25, 0x0A	; 10
    1726:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
    172a:	02 e3       	ldi	r16, 0x32	; 50
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	8b e2       	ldi	r24, 0x2B	; 43
    173a:	9b e0       	ldi	r25, 0x0B	; 11
    173c:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
    1740:	02 e0       	ldi	r16, 0x02	; 2
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	8f ee       	ldi	r24, 0xEF	; 239
    1750:	97 e0       	ldi	r25, 0x07	; 7
    1752:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
    1756:	08 ee       	ldi	r16, 0xE8	; 232
    1758:	13 e0       	ldi	r17, 0x03	; 3
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	85 e8       	ldi	r24, 0x85	; 133
    1768:	9b e0       	ldi	r25, 0x0B	; 11
    176a:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
    176e:	02 e3       	ldi	r16, 0x32	; 50
    1770:	10 e0       	ldi	r17, 0x00	; 0
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	81 e7       	ldi	r24, 0x71	; 113
    1780:	9b e0       	ldi	r25, 0x0B	; 11
    1782:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	81 e6       	ldi	r24, 0x61	; 97
    1794:	9b e0       	ldi	r25, 0x0B	; 11
    1796:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	83 e3       	ldi	r24, 0x33	; 51
    17a8:	9d e0       	ldi	r25, 0x0D	; 13
    17aa:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <setMacroCommand>:

void setMacroCommand(int m)
{
	macroCommand=m;
    17b4:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <macroCommand+0x1>
    17b8:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <macroCommand>
    17bc:	08 95       	ret

000017be <setMacroSubCommand>:

}

void setMacroSubCommand(int ms)
{
	macroSubCommand=ms;
    17be:	90 93 af 04 	sts	0x04AF, r25	; 0x8004af <macroSubCommand+0x1>
    17c2:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <macroSubCommand>
    17c6:	08 95       	ret

000017c8 <getReceiveArray1>:
		}
	}


	return false;
}
    17c8:	85 e8       	ldi	r24, 0x85	; 133
    17ca:	9d e0       	ldi	r25, 0x0D	; 13
    17cc:	08 95       	ret

000017ce <wipeRxBuffer1>:
    17ce:	e8 e2       	ldi	r30, 0x28	; 40
    17d0:	fa e0       	ldi	r31, 0x0A	; 10
    17d2:	82 e2       	ldi	r24, 0x22	; 34
    17d4:	9b e0       	ldi	r25, 0x0B	; 11
    17d6:	11 92       	st	Z+, r1
    17d8:	e8 17       	cp	r30, r24
    17da:	f9 07       	cpc	r31, r25
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <wipeRxBuffer1+0x8>
    17de:	08 95       	ret

000017e0 <begin0>:
    17e0:	af 92       	push	r10
    17e2:	bf 92       	push	r11
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	90 93 3e 0b 	sts	0x0B3E, r25	; 0x800b3e <receiveArrayAddress0+0x1>
    17f4:	80 93 3d 0b 	sts	0x0B3D, r24	; 0x800b3d <receiveArrayAddress0>
    17f8:	40 93 5e 0b 	sts	0x0B5E, r20	; 0x800b5e <moduleAddress0>
    17fc:	10 93 26 0d 	sts	0x0D26, r17	; 0x800d26 <serial_write0+0x1>
    1800:	00 93 25 0d 	sts	0x0D25, r16	; 0x800d25 <serial_write0>
    1804:	d0 92 32 0d 	sts	0x0D32, r13	; 0x800d32 <serial_available0+0x1>
    1808:	c0 92 31 0d 	sts	0x0D31, r12	; 0x800d31 <serial_available0>
    180c:	b0 92 68 0d 	sts	0x0D68, r11	; 0x800d68 <serial_peek0+0x1>
    1810:	a0 92 67 0d 	sts	0x0D67, r10	; 0x800d67 <serial_peek0>
    1814:	f0 92 46 0b 	sts	0x0B46, r15	; 0x800b46 <serial_read0+0x1>
    1818:	e0 92 45 0b 	sts	0x0B45, r14	; 0x800b45 <serial_read0>
    181c:	66 95       	lsr	r22
    181e:	66 95       	lsr	r22
    1820:	60 93 28 0b 	sts	0x0B28, r22	; 0x800b28 <maxDataAddress0>
    1824:	88 e4       	ldi	r24, 0x48	; 72
    1826:	99 e0       	ldi	r25, 0x09	; 9
    1828:	90 93 10 08 	sts	0x0810, r25	; 0x800810 <sendStructAddress0+0x1>
    182c:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <sendStructAddress0>
    1830:	20 93 11 08 	sts	0x0811, r18	; 0x800811 <AKNAKsend0>
    1834:	10 92 fc 0b 	sts	0x0BFC, r1	; 0x800bfc <alignErrorCounter0+0x1>
    1838:	10 92 fb 0b 	sts	0x0BFB, r1	; 0x800bfb <alignErrorCounter0>
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	df 90       	pop	r13
    1846:	cf 90       	pop	r12
    1848:	bf 90       	pop	r11
    184a:	af 90       	pop	r10
    184c:	08 95       	ret

0000184e <begin1>:
    184e:	af 92       	push	r10
    1850:	bf 92       	push	r11
    1852:	cf 92       	push	r12
    1854:	df 92       	push	r13
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	90 93 7e 0d 	sts	0x0D7E, r25	; 0x800d7e <receiveArrayAddress1+0x1>
    1862:	80 93 7d 0d 	sts	0x0D7D, r24	; 0x800d7d <receiveArrayAddress1>
    1866:	40 93 43 0d 	sts	0x0D43, r20	; 0x800d43 <moduleAddress1>
    186a:	10 93 5a 0b 	sts	0x0B5A, r17	; 0x800b5a <serial_write1+0x1>
    186e:	00 93 59 0b 	sts	0x0B59, r16	; 0x800b59 <serial_write1>
    1872:	d0 92 23 0b 	sts	0x0B23, r13	; 0x800b23 <serial_available1+0x1>
    1876:	c0 92 22 0b 	sts	0x0B22, r12	; 0x800b22 <serial_available1>
    187a:	b0 92 27 0a 	sts	0x0A27, r11	; 0x800a27 <serial_peek1+0x1>
    187e:	a0 92 26 0a 	sts	0x0A26, r10	; 0x800a26 <serial_peek1>
    1882:	f0 92 25 0b 	sts	0x0B25, r15	; 0x800b25 <serial_read1+0x1>
    1886:	e0 92 24 0b 	sts	0x0B24, r14	; 0x800b24 <serial_read1>
    188a:	66 95       	lsr	r22
    188c:	66 95       	lsr	r22
    188e:	60 93 2c 0d 	sts	0x0D2C, r22	; 0x800d2c <maxDataAddress1>
    1892:	82 e1       	ldi	r24, 0x12	; 18
    1894:	98 e0       	ldi	r25, 0x08	; 8
    1896:	90 93 82 0b 	sts	0x0B82, r25	; 0x800b82 <sendStructAddress1+0x1>
    189a:	80 93 81 0b 	sts	0x0B81, r24	; 0x800b81 <sendStructAddress1>
    189e:	20 93 77 0d 	sts	0x0D77, r18	; 0x800d77 <AKNAKsend1>
    18a2:	10 92 27 0b 	sts	0x0B27, r1	; 0x800b27 <alignErrorCounter1+0x1>
    18a6:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <alignErrorCounter1>
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	bf 90       	pop	r11
    18b8:	af 90       	pop	r10
    18ba:	08 95       	ret

000018bc <initFastTransfer>:
    18bc:	af 92       	push	r10
    18be:	bf 92       	push	r11
    18c0:	cf 92       	push	r12
    18c2:	df 92       	push	r13
    18c4:	ef 92       	push	r14
    18c6:	ff 92       	push	r15
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	0f 2e       	mov	r0, r31
    18ce:	ff e1       	ldi	r31, 0x1F	; 31
    18d0:	af 2e       	mov	r10, r31
    18d2:	f2 e0       	ldi	r31, 0x02	; 2
    18d4:	bf 2e       	mov	r11, r31
    18d6:	f0 2d       	mov	r31, r0
    18d8:	0f 2e       	mov	r0, r31
    18da:	ff e3       	ldi	r31, 0x3F	; 63
    18dc:	cf 2e       	mov	r12, r31
    18de:	f2 e0       	ldi	r31, 0x02	; 2
    18e0:	df 2e       	mov	r13, r31
    18e2:	f0 2d       	mov	r31, r0
    18e4:	0f 2e       	mov	r0, r31
    18e6:	ff e0       	ldi	r31, 0x0F	; 15
    18e8:	ef 2e       	mov	r14, r31
    18ea:	f2 e0       	ldi	r31, 0x02	; 2
    18ec:	ff 2e       	mov	r15, r31
    18ee:	f0 2d       	mov	r31, r0
    18f0:	03 ec       	ldi	r16, 0xC3	; 195
    18f2:	11 e0       	ldi	r17, 0x01	; 1
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	46 e0       	ldi	r20, 0x06	; 6
    18f8:	64 e6       	ldi	r22, 0x64	; 100
    18fa:	89 ee       	ldi	r24, 0xE9	; 233
    18fc:	9d e0       	ldi	r25, 0x0D	; 13
    18fe:	70 df       	rcall	.-288    	; 0x17e0 <begin0>
    1900:	0f 2e       	mov	r0, r31
    1902:	ff e2       	ldi	r31, 0x2F	; 47
    1904:	af 2e       	mov	r10, r31
    1906:	f2 e0       	ldi	r31, 0x02	; 2
    1908:	bf 2e       	mov	r11, r31
    190a:	f0 2d       	mov	r31, r0
    190c:	0f 2e       	mov	r0, r31
    190e:	f4 e4       	ldi	r31, 0x44	; 68
    1910:	cf 2e       	mov	r12, r31
    1912:	f2 e0       	ldi	r31, 0x02	; 2
    1914:	df 2e       	mov	r13, r31
    1916:	f0 2d       	mov	r31, r0
    1918:	0f 2e       	mov	r0, r31
    191a:	ff ef       	ldi	r31, 0xFF	; 255
    191c:	ef 2e       	mov	r14, r31
    191e:	f1 e0       	ldi	r31, 0x01	; 1
    1920:	ff 2e       	mov	r15, r31
    1922:	f0 2d       	mov	r31, r0
    1924:	01 ee       	ldi	r16, 0xE1	; 225
    1926:	11 e0       	ldi	r17, 0x01	; 1
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	46 e0       	ldi	r20, 0x06	; 6
    192c:	64 e6       	ldi	r22, 0x64	; 100
    192e:	85 e8       	ldi	r24, 0x85	; 133
    1930:	9d e0       	ldi	r25, 0x0D	; 13
    1932:	8d df       	rcall	.-230    	; 0x184e <begin1>
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
    193c:	df 90       	pop	r13
    193e:	cf 90       	pop	r12
    1940:	bf 90       	pop	r11
    1942:	af 90       	pop	r10
    1944:	08 95       	ret

00001946 <CRC8>:
    1946:	fc 01       	movw	r30, r24
    1948:	9c 01       	movw	r18, r24
    194a:	26 0f       	add	r18, r22
    194c:	31 1d       	adc	r19, r1
    194e:	b9 01       	movw	r22, r18
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	58 e0       	ldi	r21, 0x08	; 8
    1954:	4c e8       	ldi	r20, 0x8C	; 140
    1956:	0a c0       	rjmp	.+20     	; 0x196c <CRC8+0x26>
    1958:	21 91       	ld	r18, Z+
    195a:	95 2f       	mov	r25, r21
    195c:	32 2f       	mov	r19, r18
    195e:	38 27       	eor	r19, r24
    1960:	86 95       	lsr	r24
    1962:	30 fd       	sbrc	r19, 0
    1964:	84 27       	eor	r24, r20
    1966:	26 95       	lsr	r18
    1968:	91 50       	subi	r25, 0x01	; 1
    196a:	c1 f7       	brne	.-16     	; 0x195c <CRC8+0x16>
    196c:	e6 17       	cp	r30, r22
    196e:	f7 07       	cpc	r31, r23
    1970:	99 f7       	brne	.-26     	; 0x1958 <CRC8+0x12>
    1972:	08 95       	ret

00001974 <FastTransfer_buffer_put1>:
    1974:	50 93 3c 0b 	sts	0x0B3C, r21	; 0x800b3c <group+0x1>
    1978:	40 93 3b 0b 	sts	0x0B3B, r20	; 0x800b3b <group>
    197c:	fc 01       	movw	r30, r24
    197e:	e4 53       	subi	r30, 0x34	; 52
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	40 81       	ld	r20, Z
    1984:	51 81       	ldd	r21, Z+1	; 0x01
    1986:	45 3c       	cpi	r20, 0xC5	; 197
    1988:	51 05       	cpc	r21, r1
    198a:	0c f0       	brlt	.+2      	; 0x198e <FastTransfer_buffer_put1+0x1a>
    198c:	4c c0       	rjmp	.+152    	; 0x1a26 <FastTransfer_buffer_put1+0xb2>
    198e:	34 97       	sbiw	r30, 0x04	; 4
    1990:	20 81       	ld	r18, Z
    1992:	31 81       	ldd	r19, Z+1	; 0x01
    1994:	fc 01       	movw	r30, r24
    1996:	e2 0f       	add	r30, r18
    1998:	f3 1f       	adc	r31, r19
    199a:	60 83       	st	Z, r22
    199c:	b9 01       	movw	r22, r18
    199e:	6f 5f       	subi	r22, 0xFF	; 255
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	68 3c       	cpi	r22, 0xC8	; 200
    19a4:	71 05       	cpc	r23, r1
    19a6:	68 f5       	brcc	.+90     	; 0x1a02 <FastTransfer_buffer_put1+0x8e>
    19a8:	fc 01       	movw	r30, r24
    19aa:	e8 53       	subi	r30, 0x38	; 56
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	71 83       	std	Z+1, r23	; 0x01
    19b0:	60 83       	st	Z, r22
    19b2:	34 96       	adiw	r30, 0x04	; 4
    19b4:	da 01       	movw	r26, r20
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	b1 83       	std	Z+1, r27	; 0x01
    19ba:	a0 83       	st	Z, r26
    19bc:	e0 91 3b 0b 	lds	r30, 0x0B3B	; 0x800b3b <group>
    19c0:	dc 01       	movw	r26, r24
    19c2:	a6 0f       	add	r26, r22
    19c4:	b7 1f       	adc	r27, r23
    19c6:	ec 93       	st	X, r30
    19c8:	6f 5f       	subi	r22, 0xFF	; 255
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255
    19cc:	68 3c       	cpi	r22, 0xC8	; 200
    19ce:	71 05       	cpc	r23, r1
    19d0:	18 f5       	brcc	.+70     	; 0x1a18 <FastTransfer_buffer_put1+0xa4>
    19d2:	e0 91 3c 0b 	lds	r30, 0x0B3C	; 0x800b3c <group+0x1>
    19d6:	dc 01       	movw	r26, r24
    19d8:	a6 0f       	add	r26, r22
    19da:	b7 1f       	adc	r27, r23
    19dc:	ec 93       	st	X, r30
    19de:	2d 5f       	subi	r18, 0xFD	; 253
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	28 3c       	cpi	r18, 0xC8	; 200
    19e4:	31 05       	cpc	r19, r1
    19e6:	10 f0       	brcs	.+4      	; 0x19ec <FastTransfer_buffer_put1+0x78>
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	fc 01       	movw	r30, r24
    19ee:	e8 53       	subi	r30, 0x38	; 56
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	31 83       	std	Z+1, r19	; 0x01
    19f4:	20 83       	st	Z, r18
    19f6:	34 96       	adiw	r30, 0x04	; 4
    19f8:	4d 5f       	subi	r20, 0xFD	; 253
    19fa:	5f 4f       	sbci	r21, 0xFF	; 255
    19fc:	51 83       	std	Z+1, r21	; 0x01
    19fe:	40 83       	st	Z, r20
    1a00:	08 95       	ret
    1a02:	eb e3       	ldi	r30, 0x3B	; 59
    1a04:	fb e0       	ldi	r31, 0x0B	; 11
    1a06:	20 81       	ld	r18, Z
    1a08:	dc 01       	movw	r26, r24
    1a0a:	2c 93       	st	X, r18
    1a0c:	21 81       	ldd	r18, Z+1	; 0x01
    1a0e:	11 96       	adiw	r26, 0x01	; 1
    1a10:	2c 93       	st	X, r18
    1a12:	22 e0       	ldi	r18, 0x02	; 2
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	ea cf       	rjmp	.-44     	; 0x19ec <FastTransfer_buffer_put1+0x78>
    1a18:	20 91 3c 0b 	lds	r18, 0x0B3C	; 0x800b3c <group+0x1>
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	20 83       	st	Z, r18
    1a20:	21 e0       	ldi	r18, 0x01	; 1
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	e3 cf       	rjmp	.-58     	; 0x19ec <FastTransfer_buffer_put1+0x78>
    1a26:	08 95       	ret

00001a28 <ToSend1>:
    1a28:	ab 01       	movw	r20, r22
    1a2a:	68 2f       	mov	r22, r24
    1a2c:	82 e1       	ldi	r24, 0x12	; 18
    1a2e:	98 e0       	ldi	r25, 0x08	; 8
    1a30:	a1 cf       	rjmp	.-190    	; 0x1974 <FastTransfer_buffer_put1>
    1a32:	08 95       	ret

00001a34 <crcBufS_put>:
    1a34:	dc 01       	movw	r26, r24
    1a36:	1f 96       	adiw	r26, 0x0f	; 15
    1a38:	ed 91       	ld	r30, X+
    1a3a:	fc 91       	ld	r31, X
    1a3c:	50 97       	sbiw	r26, 0x10	; 16
    1a3e:	ae 0f       	add	r26, r30
    1a40:	bf 1f       	adc	r27, r31
    1a42:	6c 93       	st	X, r22
    1a44:	11 96       	adiw	r26, 0x01	; 1
    1a46:	4c 93       	st	X, r20
    1a48:	11 97       	sbiw	r26, 0x01	; 1
    1a4a:	12 96       	adiw	r26, 0x02	; 2
    1a4c:	2c 93       	st	X, r18
    1a4e:	33 96       	adiw	r30, 0x03	; 3
    1a50:	ef 30       	cpi	r30, 0x0F	; 15
    1a52:	f1 05       	cpc	r31, r1
    1a54:	34 f4       	brge	.+12     	; 0x1a62 <crcBufS_put+0x2e>
    1a56:	dc 01       	movw	r26, r24
    1a58:	50 96       	adiw	r26, 0x10	; 16
    1a5a:	fc 93       	st	X, r31
    1a5c:	ee 93       	st	-X, r30
    1a5e:	1f 97       	sbiw	r26, 0x0f	; 15
    1a60:	08 95       	ret
    1a62:	fc 01       	movw	r30, r24
    1a64:	10 8a       	std	Z+16, r1	; 0x10
    1a66:	17 86       	std	Z+15, r1	; 0x0f
    1a68:	08 95       	ret

00001a6a <sendData1>:
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	f8 2e       	mov	r15, r24
    1a78:	ce ed       	ldi	r28, 0xDE	; 222
    1a7a:	d8 e0       	ldi	r29, 0x08	; 8
    1a7c:	68 81       	ld	r22, Y
    1a7e:	80 91 81 0b 	lds	r24, 0x0B81	; 0x800b81 <sendStructAddress1>
    1a82:	90 91 82 0b 	lds	r25, 0x0B82	; 0x800b82 <sendStructAddress1+0x1>
    1a86:	5f df       	rcall	.-322    	; 0x1946 <CRC8>
    1a88:	e8 2e       	mov	r14, r24
    1a8a:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1a8e:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1a92:	86 e0       	ldi	r24, 0x06	; 6
    1a94:	09 95       	icall
    1a96:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1a9a:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1a9e:	85 e8       	ldi	r24, 0x85	; 133
    1aa0:	09 95       	icall
    1aa2:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1aa6:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1aaa:	8f 2d       	mov	r24, r15
    1aac:	09 95       	icall
    1aae:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1ab2:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1ab6:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <moduleAddress1>
    1aba:	09 95       	icall
    1abc:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1ac0:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1ac4:	88 81       	ld	r24, Y
    1ac6:	09 95       	icall
    1ac8:	88 81       	ld	r24, Y
    1aca:	99 81       	ldd	r25, Y+1	; 0x01
    1acc:	18 16       	cp	r1, r24
    1ace:	19 06       	cpc	r1, r25
    1ad0:	bc f4       	brge	.+46     	; 0x1b00 <sendData1+0x96>
    1ad2:	c0 e0       	ldi	r28, 0x00	; 0
    1ad4:	d0 e0       	ldi	r29, 0x00	; 0
    1ad6:	0e ed       	ldi	r16, 0xDE	; 222
    1ad8:	18 e0       	ldi	r17, 0x08	; 8
    1ada:	a0 91 81 0b 	lds	r26, 0x0B81	; 0x800b81 <sendStructAddress1>
    1ade:	b0 91 82 0b 	lds	r27, 0x0B82	; 0x800b82 <sendStructAddress1+0x1>
    1ae2:	ac 0f       	add	r26, r28
    1ae4:	bd 1f       	adc	r27, r29
    1ae6:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1aea:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1aee:	8c 91       	ld	r24, X
    1af0:	09 95       	icall
    1af2:	21 96       	adiw	r28, 0x01	; 1
    1af4:	f8 01       	movw	r30, r16
    1af6:	20 81       	ld	r18, Z
    1af8:	31 81       	ldd	r19, Z+1	; 0x01
    1afa:	c2 17       	cp	r28, r18
    1afc:	d3 07       	cpc	r29, r19
    1afe:	6c f3       	brlt	.-38     	; 0x1ada <sendData1+0x70>
    1b00:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1b04:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1b08:	8e 2d       	mov	r24, r14
    1b0a:	09 95       	icall
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	4e 2d       	mov	r20, r14
    1b10:	6f 2d       	mov	r22, r15
    1b12:	88 e4       	ldi	r24, 0x48	; 72
    1b14:	9b e0       	ldi	r25, 0x0B	; 11
    1b16:	8e df       	rcall	.-228    	; 0x1a34 <crcBufS_put>
    1b18:	10 92 df 08 	sts	0x08DF, r1	; 0x8008df <ring_buffer1+0xcd>
    1b1c:	10 92 de 08 	sts	0x08DE, r1	; 0x8008de <ring_buffer1+0xcc>
    1b20:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <ring_buffer1+0xc9>
    1b24:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <ring_buffer1+0xc8>
    1b28:	10 92 dd 08 	sts	0x08DD, r1	; 0x8008dd <ring_buffer1+0xcb>
    1b2c:	10 92 dc 08 	sts	0x08DC, r1	; 0x8008dc <ring_buffer1+0xca>
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	ff 90       	pop	r15
    1b3a:	ef 90       	pop	r14
    1b3c:	08 95       	ret

00001b3e <crcBufS_status_put>:
    1b3e:	65 30       	cpi	r22, 0x05	; 5
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <crcBufS_status_put+0x6>
    1b42:	64 e0       	ldi	r22, 0x04	; 4
    1b44:	6f 5f       	subi	r22, 0xFF	; 255
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	9b 01       	movw	r18, r22
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	62 0f       	add	r22, r18
    1b50:	73 1f       	adc	r23, r19
    1b52:	fc 01       	movw	r30, r24
    1b54:	27 85       	ldd	r18, Z+15	; 0x0f
    1b56:	30 89       	ldd	r19, Z+16	; 0x10
    1b58:	26 17       	cp	r18, r22
    1b5a:	37 07       	cpc	r19, r23
    1b5c:	34 f4       	brge	.+12     	; 0x1b6a <crcBufS_status_put+0x2c>
    1b5e:	26 1b       	sub	r18, r22
    1b60:	37 0b       	sbc	r19, r23
    1b62:	e2 0f       	add	r30, r18
    1b64:	f3 1f       	adc	r31, r19
    1b66:	41 8b       	std	Z+17, r20	; 0x11
    1b68:	08 95       	ret
    1b6a:	26 1b       	sub	r18, r22
    1b6c:	37 0b       	sbc	r19, r23
    1b6e:	fc 01       	movw	r30, r24
    1b70:	e2 0f       	add	r30, r18
    1b72:	f3 1f       	adc	r31, r19
    1b74:	42 83       	std	Z+2, r20	; 0x02
    1b76:	08 95       	ret

00001b78 <crcBufS_get>:
    1b78:	fc 01       	movw	r30, r24
    1b7a:	65 30       	cpi	r22, 0x05	; 5
    1b7c:	08 f0       	brcs	.+2      	; 0x1b80 <crcBufS_get+0x8>
    1b7e:	64 e0       	ldi	r22, 0x04	; 4
    1b80:	43 30       	cpi	r20, 0x03	; 3
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <crcBufS_get+0xe>
    1b84:	42 e0       	ldi	r20, 0x02	; 2
    1b86:	6f 5f       	subi	r22, 0xFF	; 255
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	68 0f       	add	r22, r24
    1b92:	79 1f       	adc	r23, r25
    1b94:	27 85       	ldd	r18, Z+15	; 0x0f
    1b96:	30 89       	ldd	r19, Z+16	; 0x10
    1b98:	26 17       	cp	r18, r22
    1b9a:	37 07       	cpc	r19, r23
    1b9c:	44 f4       	brge	.+16     	; 0x1bae <crcBufS_get+0x36>
    1b9e:	26 1b       	sub	r18, r22
    1ba0:	37 0b       	sbc	r19, r23
    1ba2:	e2 0f       	add	r30, r18
    1ba4:	f3 1f       	adc	r31, r19
    1ba6:	e4 0f       	add	r30, r20
    1ba8:	f1 1d       	adc	r31, r1
    1baa:	87 85       	ldd	r24, Z+15	; 0x0f
    1bac:	08 95       	ret
    1bae:	26 1b       	sub	r18, r22
    1bb0:	37 0b       	sbc	r19, r23
    1bb2:	e2 0f       	add	r30, r18
    1bb4:	f3 1f       	adc	r31, r19
    1bb6:	e4 0f       	add	r30, r20
    1bb8:	f1 1d       	adc	r31, r1
    1bba:	80 81       	ld	r24, Z
    1bbc:	08 95       	ret

00001bbe <CRCcheck>:
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <CRCcheck+0xe>
    1bcc:	1f 92       	push	r1
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	e0 91 22 0b 	lds	r30, 0x0B22	; 0x800b22 <serial_available1>
    1bd6:	f0 91 23 0b 	lds	r31, 0x0B23	; 0x800b23 <serial_available1+0x1>
    1bda:	09 95       	icall
    1bdc:	04 97       	sbiw	r24, 0x04	; 4
    1bde:	cc f3       	brlt	.-14     	; 0x1bd2 <CRCcheck+0x14>
    1be0:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <serial_read1>
    1be4:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1be8:	09 95       	icall
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <serial_read1>
    1bf0:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1bf4:	09 95       	icall
    1bf6:	f8 2e       	mov	r15, r24
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
    1bfa:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <serial_read1>
    1bfe:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1c02:	09 95       	icall
    1c04:	08 2f       	mov	r16, r24
    1c06:	8b 83       	std	Y+3, r24	; 0x03
    1c08:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <serial_read1>
    1c0c:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1c10:	09 95       	icall
    1c12:	18 2f       	mov	r17, r24
    1c14:	63 e0       	ldi	r22, 0x03	; 3
    1c16:	ce 01       	movw	r24, r28
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	95 de       	rcall	.-726    	; 0x1946 <CRC8>
    1c1c:	18 13       	cpse	r17, r24
    1c1e:	27 c0       	rjmp	.+78     	; 0x1c6e <CRCcheck+0xb0>
    1c20:	e0 90 27 0d 	lds	r14, 0x0D27	; 0x800d27 <returnAddress1>
    1c24:	10 e0       	ldi	r17, 0x00	; 0
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	61 2f       	mov	r22, r17
    1c2a:	88 e4       	ldi	r24, 0x48	; 72
    1c2c:	9b e0       	ldi	r25, 0x0B	; 11
    1c2e:	a4 df       	rcall	.-184    	; 0x1b78 <crcBufS_get>
    1c30:	8e 11       	cpse	r24, r14
    1c32:	19 c0       	rjmp	.+50     	; 0x1c66 <CRCcheck+0xa8>
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	61 2f       	mov	r22, r17
    1c38:	88 e4       	ldi	r24, 0x48	; 72
    1c3a:	9b e0       	ldi	r25, 0x0B	; 11
    1c3c:	9d df       	rcall	.-198    	; 0x1b78 <crcBufS_get>
    1c3e:	08 13       	cpse	r16, r24
    1c40:	12 c0       	rjmp	.+36     	; 0x1c66 <CRCcheck+0xa8>
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	f8 12       	cpse	r15, r24
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <CRCcheck+0x96>
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	61 2f       	mov	r22, r17
    1c4c:	88 e4       	ldi	r24, 0x48	; 72
    1c4e:	9b e0       	ldi	r25, 0x0B	; 11
    1c50:	76 df       	rcall	.-276    	; 0x1b3e <crcBufS_status_put>
    1c52:	16 c0       	rjmp	.+44     	; 0x1c80 <CRCcheck+0xc2>
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	f8 12       	cpse	r15, r24
    1c58:	06 c0       	rjmp	.+12     	; 0x1c66 <CRCcheck+0xa8>
    1c5a:	42 e0       	ldi	r20, 0x02	; 2
    1c5c:	61 2f       	mov	r22, r17
    1c5e:	88 e4       	ldi	r24, 0x48	; 72
    1c60:	9b e0       	ldi	r25, 0x0B	; 11
    1c62:	6d df       	rcall	.-294    	; 0x1b3e <crcBufS_status_put>
    1c64:	0d c0       	rjmp	.+26     	; 0x1c80 <CRCcheck+0xc2>
    1c66:	1f 5f       	subi	r17, 0xFF	; 255
    1c68:	15 30       	cpi	r17, 0x05	; 5
    1c6a:	e9 f6       	brne	.-70     	; 0x1c26 <CRCcheck+0x68>
    1c6c:	09 c0       	rjmp	.+18     	; 0x1c80 <CRCcheck+0xc2>
    1c6e:	80 91 7b 0d 	lds	r24, 0x0D7B	; 0x800d7b <crcErrorCounter1>
    1c72:	90 91 7c 0d 	lds	r25, 0x0D7C	; 0x800d7c <crcErrorCounter1+0x1>
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	90 93 7c 0d 	sts	0x0D7C, r25	; 0x800d7c <crcErrorCounter1+0x1>
    1c7c:	80 93 7b 0d 	sts	0x0D7B, r24	; 0x800d7b <crcErrorCounter1>
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	ff 90       	pop	r15
    1c90:	ef 90       	pop	r14
    1c92:	08 95       	ret

00001c94 <receiveData1>:
bool receiveData1(void) 
{
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <receiveData1+0xa>
    1c9e:	1f 92       	push	r1
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	//start off by looking for the header bytes. If they were already found in a previous call, skip it.
	if (rx_len1 == 0) 
    1ca4:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <rx_len1>
    1ca8:	81 11       	cpse	r24, r1
    1caa:	6c c0       	rjmp	.+216    	; 0x1d84 <receiveData1+0xf0>
	{
		//this size check may be redundant due to the size check below, but for now I'll leave it the way it is.
		if (serial_available1() > 4) 
    1cac:	e0 91 22 0b 	lds	r30, 0x0B22	; 0x800b22 <serial_available1>
    1cb0:	f0 91 23 0b 	lds	r31, 0x0B23	; 0x800b23 <serial_available1+0x1>
    1cb4:	09 95       	icall
    1cb6:	05 97       	sbiw	r24, 0x05	; 5
    1cb8:	bc f4       	brge	.+46     	; 0x1ce8 <receiveData1+0x54>
    1cba:	5f c0       	rjmp	.+190    	; 0x1d7a <receiveData1+0xe6>
		{
			//this will block until a 0x06 is found or buffer size becomes less then 3.
			while (serial_peek1() != 0x06) 
			{
				serial_read1();
    1cbc:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <serial_read1>
    1cc0:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1cc4:	09 95       	icall
				//This will trash any preamble junk in the serial buffer
				//but we need to make sure there is enough in the buffer to process while we trash the rest
				//if the buffer becomes too empty, we will escape and try again on the next call
				alignErrorCounter1++; //increments the counter whenever a byte is trashed
    1cc6:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <alignErrorCounter1>
    1cca:	90 91 27 0b 	lds	r25, 0x0B27	; 0x800b27 <alignErrorCounter1+0x1>
    1cce:	01 96       	adiw	r24, 0x01	; 1
    1cd0:	90 93 27 0b 	sts	0x0B27, r25	; 0x800b27 <alignErrorCounter1+0x1>
    1cd4:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <alignErrorCounter1>
				if (serial_available1() < 5)
    1cd8:	e0 91 22 0b 	lds	r30, 0x0B22	; 0x800b22 <serial_available1>
    1cdc:	f0 91 23 0b 	lds	r31, 0x0B23	; 0x800b23 <serial_available1+0x1>
    1ce0:	09 95       	icall
    1ce2:	05 97       	sbiw	r24, 0x05	; 5
    1ce4:	0c f4       	brge	.+2      	; 0x1ce8 <receiveData1+0x54>
    1ce6:	92 c1       	rjmp	.+804    	; 0x200c <receiveData1+0x378>
	{
		//this size check may be redundant due to the size check below, but for now I'll leave it the way it is.
		if (serial_available1() > 4) 
		{
			//this will block until a 0x06 is found or buffer size becomes less then 3.
			while (serial_peek1() != 0x06) 
    1ce8:	e0 91 26 0a 	lds	r30, 0x0A26	; 0x800a26 <serial_peek1>
    1cec:	f0 91 27 0a 	lds	r31, 0x0A27	; 0x800a27 <serial_peek1+0x1>
    1cf0:	09 95       	icall
    1cf2:	86 30       	cpi	r24, 0x06	; 6
    1cf4:	19 f7       	brne	.-58     	; 0x1cbc <receiveData1+0x28>
				//if the buffer becomes too empty, we will escape and try again on the next call
				alignErrorCounter1++; //increments the counter whenever a byte is trashed
				if (serial_available1() < 5)
				return false;
			}
			if(serial_peek1()==0x06)
    1cf6:	e0 91 26 0a 	lds	r30, 0x0A26	; 0x800a26 <serial_peek1>
    1cfa:	f0 91 27 0a 	lds	r31, 0x0A27	; 0x800a27 <serial_peek1+0x1>
    1cfe:	09 95       	icall
    1d00:	86 30       	cpi	r24, 0x06	; 6
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <receiveData1+0x72>
    1d04:	85 c1       	rjmp	.+778    	; 0x2010 <receiveData1+0x37c>
			{
				serial_read1();
    1d06:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <serial_read1>
    1d0a:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1d0e:	09 95       	icall
			}
			else
			{
				return false;
			}
			if (serial_read1() == 0x85) 
    1d10:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <serial_read1>
    1d14:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1d18:	09 95       	icall
    1d1a:	85 38       	cpi	r24, 0x85	; 133
    1d1c:	71 f5       	brne	.+92     	; 0x1d7a <receiveData1+0xe6>
			{
				rx_address1 = serial_read1(); // pulls the address
    1d1e:	80 91 24 0b 	lds	r24, 0x0B24	; 0x800b24 <serial_read1>
    1d22:	90 91 25 0b 	lds	r25, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1d26:	fc 01       	movw	r30, r24
    1d28:	09 95       	icall
    1d2a:	80 93 5d 0b 	sts	0x0B5D, r24	; 0x800b5d <rx_address1>
				returnAddress1 = serial_read1(); // pulls where the message came from
    1d2e:	80 91 24 0b 	lds	r24, 0x0B24	; 0x800b24 <serial_read1>
    1d32:	90 91 25 0b 	lds	r25, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1d36:	fc 01       	movw	r30, r24
    1d38:	09 95       	icall
    1d3a:	80 93 27 0d 	sts	0x0D27, r24	; 0x800d27 <returnAddress1>
				rx_len1 = serial_read1(); // pulls the length
    1d3e:	80 91 24 0b 	lds	r24, 0x0B24	; 0x800b24 <serial_read1>
    1d42:	90 91 25 0b 	lds	r25, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1d46:	fc 01       	movw	r30, r24
    1d48:	09 95       	icall
    1d4a:	80 93 24 0d 	sts	0x0D24, r24	; 0x800d24 <rx_len1>
				//make sure the address received is a match for this module if not throw the packet away
				//if (rx_address != moduleAddress) {
				if (rx_address1 != moduleAddress1 && (rx_address1<=RouterCardAddress || rx_address1>=BucketAddress)) {
    1d4e:	80 91 5d 0b 	lds	r24, 0x0B5D	; 0x800b5d <rx_address1>
    1d52:	90 91 43 0d 	lds	r25, 0x0D43	; 0x800d43 <moduleAddress1>
    1d56:	89 17       	cp	r24, r25
    1d58:	81 f0       	breq	.+32     	; 0x1d7a <receiveData1+0xe6>
    1d5a:	85 50       	subi	r24, 0x05	; 5
    1d5c:	83 30       	cpi	r24, 0x03	; 3
    1d5e:	68 f0       	brcs	.+26     	; 0x1d7a <receiveData1+0xe6>
					addressErrorCounter1++; // increments a counter whenever the wrong address is received
    1d60:	80 91 29 0b 	lds	r24, 0x0B29	; 0x800b29 <addressErrorCounter1>
    1d64:	90 91 2a 0b 	lds	r25, 0x0B2A	; 0x800b2a <addressErrorCounter1+0x1>
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	90 93 2a 0b 	sts	0x0B2A, r25	; 0x800b2a <addressErrorCounter1+0x1>
    1d6e:	80 93 29 0b 	sts	0x0B29, r24	; 0x800b29 <addressErrorCounter1>
					//int u;
					//for (u = 0; u <= (rx_len + 1); u++) {
						//serial_read();
					//}
					
					rx_len1 = 0; // reset length
    1d72:	10 92 24 0d 	sts	0x0D24, r1	; 0x800d24 <rx_len1>
					return false;
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	50 c1       	rjmp	.+672    	; 0x201a <receiveData1+0x386>
			}
		}
	}

	//we get here if we already found the header bytes, the address matched what we know, and now we are byte aligned.
	if (rx_len1 != 0) 
    1d7a:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <rx_len1>
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <receiveData1+0xf0>
    1d82:	48 c1       	rjmp	.+656    	; 0x2014 <receiveData1+0x380>
	{
		//this check is preformed to see if the first data address is a 255, if it is then this packet is an AKNAK
		if (rx_array_inx1 == 0) 
    1d84:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <rx_array_inx1>
    1d88:	81 11       	cpse	r24, r1
    1d8a:	25 c0       	rjmp	.+74     	; 0x1dd6 <receiveData1+0x142>
		{
			while (!(serial_available1() >= 1));
    1d8c:	e0 91 22 0b 	lds	r30, 0x0B22	; 0x800b22 <serial_available1>
    1d90:	f0 91 23 0b 	lds	r31, 0x0B23	; 0x800b23 <serial_available1+0x1>
    1d94:	09 95       	icall
    1d96:	18 16       	cp	r1, r24
    1d98:	19 06       	cpc	r1, r25
    1d9a:	c4 f7       	brge	.-16     	; 0x1d8c <receiveData1+0xf8>
			if (255 == serial_peek1()) 
    1d9c:	e0 91 26 0a 	lds	r30, 0x0A26	; 0x800a26 <serial_peek1>
    1da0:	f0 91 27 0a 	lds	r31, 0x0A27	; 0x800a27 <serial_peek1+0x1>
    1da4:	09 95       	icall
    1da6:	8f 3f       	cpi	r24, 0xFF	; 255
    1da8:	b1 f4       	brne	.+44     	; 0x1dd6 <receiveData1+0x142>
			{
				CRCcheck();
    1daa:	09 df       	rcall	.-494    	; 0x1bbe <CRCcheck>
				rx_len1 = 0;
    1dac:	10 92 24 0d 	sts	0x0D24, r1	; 0x800d24 <rx_len1>
				rx_array_inx1 = 0;
    1db0:	10 92 47 0b 	sts	0x0B47, r1	; 0x800b47 <rx_array_inx1>
				wipeRxBuffer1();
    1db4:	0c dd       	rcall	.-1512   	; 0x17ce <wipeRxBuffer1>
				return receiveData1();
    1db6:	6e df       	rcall	.-292    	; 0x1c94 <receiveData1>
    1db8:	30 c1       	rjmp	.+608    	; 0x201a <receiveData1+0x386>
		}


		while (serial_available1() && rx_array_inx1 <= rx_len1) 
		{
			rx_buffer1[rx_array_inx1++] = serial_read1();
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	81 0f       	add	r24, r17
    1dbe:	80 93 47 0b 	sts	0x0B47, r24	; 0x800b47 <rx_array_inx1>
    1dc2:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <serial_read1>
    1dc6:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <serial_read1+0x1>
    1dca:	09 95       	icall
    1dcc:	e1 2f       	mov	r30, r17
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	e8 5d       	subi	r30, 0xD8	; 216
    1dd2:	f5 4f       	sbci	r31, 0xF5	; 245
    1dd4:	80 83       	st	Z, r24
				return receiveData1();
			}
		}


		while (serial_available1() && rx_array_inx1 <= rx_len1) 
    1dd6:	e0 91 22 0b 	lds	r30, 0x0B22	; 0x800b22 <serial_available1>
    1dda:	f0 91 23 0b 	lds	r31, 0x0B23	; 0x800b23 <serial_available1+0x1>
    1dde:	09 95       	icall
    1de0:	89 2b       	or	r24, r25
    1de2:	31 f0       	breq	.+12     	; 0x1df0 <receiveData1+0x15c>
    1de4:	10 91 47 0b 	lds	r17, 0x0B47	; 0x800b47 <rx_array_inx1>
    1de8:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <rx_len1>
    1dec:	81 17       	cp	r24, r17
    1dee:	28 f7       	brcc	.-54     	; 0x1dba <receiveData1+0x126>
		{
			rx_buffer1[rx_array_inx1++] = serial_read1();
		}

		if (rx_len1 == (rx_array_inx1 - 1)) 
    1df0:	60 91 24 0d 	lds	r22, 0x0D24	; 0x800d24 <rx_len1>
    1df4:	06 2f       	mov	r16, r22
    1df6:	10 e0       	ldi	r17, 0x00	; 0
    1df8:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <rx_array_inx1>
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	08 17       	cp	r16, r24
    1e02:	19 07       	cpc	r17, r25
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <receiveData1+0x174>
    1e06:	08 c1       	rjmp	.+528    	; 0x2018 <receiveData1+0x384>
		{
			//seem to have got whole message
			//last uint8_t is CS
			calc_CS1 = CRC8(rx_buffer1, rx_len1);
    1e08:	88 e2       	ldi	r24, 0x28	; 40
    1e0a:	9a e0       	ldi	r25, 0x0A	; 10
    1e0c:	9c dd       	rcall	.-1224   	; 0x1946 <CRC8>
    1e0e:	80 93 3f 0b 	sts	0x0B3F, r24	; 0x800b3f <calc_CS1>

			if (calc_CS1 == rx_buffer1[rx_array_inx1 - 1]) //CS good
    1e12:	f8 01       	movw	r30, r16
    1e14:	e8 5d       	subi	r30, 0xD8	; 216
    1e16:	f5 4f       	sbci	r31, 0xF5	; 245
    1e18:	20 81       	ld	r18, Z
    1e1a:	82 13       	cpse	r24, r18
    1e1c:	9b c0       	rjmp	.+310    	; 0x1f54 <receiveData1+0x2c0>
			{

				// reassembles the data and places it into the receive array according to data address.
				int r;
				if( rx_address1 == moduleAddress1) 
    1e1e:	90 91 5d 0b 	lds	r25, 0x0B5D	; 0x800b5d <rx_address1>
    1e22:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <moduleAddress1>
    1e26:	98 13       	cpse	r25, r24
    1e28:	3c c0       	rjmp	.+120    	; 0x1ea2 <receiveData1+0x20e>
				{
					for (r = 0; r < rx_len1; r = r + 3) 
    1e2a:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <rx_len1>
    1e2e:	88 23       	and	r24, r24
    1e30:	c1 f1       	breq	.+112    	; 0x1ea2 <receiveData1+0x20e>
    1e32:	aa e2       	ldi	r26, 0x2A	; 42
    1e34:	ba e0       	ldi	r27, 0x0A	; 10
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
					{
						if (rx_buffer1[r] < maxDataAddress1) 
						{
							group.parts[0] = rx_buffer1[r + 1];
    1e3a:	4b e3       	ldi	r20, 0x3B	; 59
    1e3c:	5b e0       	ldi	r21, 0x0B	; 11
    1e3e:	fd 01       	movw	r30, r26
    1e40:	32 97       	sbiw	r30, 0x02	; 2
				int r;
				if( rx_address1 == moduleAddress1) 
				{
					for (r = 0; r < rx_len1; r = r + 3) 
					{
						if (rx_buffer1[r] < maxDataAddress1) 
    1e42:	60 81       	ld	r22, Z
    1e44:	80 91 2c 0d 	lds	r24, 0x0D2C	; 0x800d2c <maxDataAddress1>
    1e48:	68 17       	cp	r22, r24
    1e4a:	c8 f4       	brcc	.+50     	; 0x1e7e <receiveData1+0x1ea>
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
						{
							group.parts[0] = rx_buffer1[r + 1];
    1e50:	fc 01       	movw	r30, r24
    1e52:	80 81       	ld	r24, Z
    1e54:	fa 01       	movw	r30, r20
    1e56:	80 83       	st	Z, r24
							group.parts[1] = rx_buffer1[r + 2];
    1e58:	8c 91       	ld	r24, X
    1e5a:	81 83       	std	Z+1, r24	; 0x01
							receiveArrayAddress1[(rx_buffer1[r])] = group.integer;
    1e5c:	e6 2f       	mov	r30, r22
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	80 91 7d 0d 	lds	r24, 0x0D7D	; 0x800d7d <receiveArrayAddress1>
    1e68:	90 91 7e 0d 	lds	r25, 0x0D7E	; 0x800d7e <receiveArrayAddress1+0x1>
    1e6c:	e8 0f       	add	r30, r24
    1e6e:	f9 1f       	adc	r31, r25
    1e70:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <group>
    1e74:	90 91 3c 0b 	lds	r25, 0x0B3C	; 0x800b3c <group+0x1>
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	09 c0       	rjmp	.+18     	; 0x1e90 <receiveData1+0x1fc>
						}
						else
						{
							dataAdressErrorCounter1++;
    1e7e:	80 91 f9 0b 	lds	r24, 0x0BF9	; 0x800bf9 <dataAdressErrorCounter1>
    1e82:	90 91 fa 0b 	lds	r25, 0x0BFA	; 0x800bfa <dataAdressErrorCounter1+0x1>
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	90 93 fa 0b 	sts	0x0BFA, r25	; 0x800bfa <dataAdressErrorCounter1+0x1>
    1e8c:	80 93 f9 0b 	sts	0x0BF9, r24	; 0x800bf9 <dataAdressErrorCounter1>

				// reassembles the data and places it into the receive array according to data address.
				int r;
				if( rx_address1 == moduleAddress1) 
				{
					for (r = 0; r < rx_len1; r = r + 3) 
    1e90:	2d 5f       	subi	r18, 0xFD	; 253
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	13 96       	adiw	r26, 0x03	; 3
    1e96:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <rx_len1>
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	28 17       	cp	r18, r24
    1e9e:	39 07       	cpc	r19, r25
    1ea0:	74 f2       	brlt	.-100    	; 0x1e3e <receiveData1+0x1aa>
					sendDataCAN_Control(rx_address1); 
				}
				#endif


				if (AKNAKsend1) // if enabled sends an AK
    1ea2:	80 91 77 0d 	lds	r24, 0x0D77	; 0x800d77 <AKNAKsend1>
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <receiveData1+0x218>
    1eaa:	4d c0       	rjmp	.+154    	; 0x1f46 <receiveData1+0x2b2>
				{ 
					unsigned char holder[3];
					holder[0] = 255;
    1eac:	8f ef       	ldi	r24, 0xFF	; 255
    1eae:	89 83       	std	Y+1, r24	; 0x01
					holder[1] = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	8a 83       	std	Y+2, r24	; 0x02
					holder[2] = rx_buffer1[rx_array_inx1 - 1];
    1eb4:	e0 91 47 0b 	lds	r30, 0x0B47	; 0x800b47 <rx_array_inx1>
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	e9 5d       	subi	r30, 0xD9	; 217
    1ebc:	f5 4f       	sbci	r31, 0xF5	; 245
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
					unsigned char crcHolder = CRC8(holder, 3);
    1ec2:	63 e0       	ldi	r22, 0x03	; 3
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	3e dd       	rcall	.-1412   	; 0x1946 <CRC8>
    1eca:	18 2f       	mov	r17, r24
					serial_write1(0x06);
    1ecc:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1ed0:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1ed4:	86 e0       	ldi	r24, 0x06	; 6
    1ed6:	09 95       	icall
					serial_write1(0x85);
    1ed8:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1edc:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1ee0:	85 e8       	ldi	r24, 0x85	; 133
    1ee2:	09 95       	icall
					serial_write1(returnAddress1);
    1ee4:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1ee8:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1eec:	80 91 27 0d 	lds	r24, 0x0D27	; 0x800d27 <returnAddress1>
    1ef0:	09 95       	icall
					serial_write1(moduleAddress1);
    1ef2:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1ef6:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1efa:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <moduleAddress1>
    1efe:	09 95       	icall
					serial_write1(3);
    1f00:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1f04:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1f08:	83 e0       	ldi	r24, 0x03	; 3
    1f0a:	09 95       	icall
					serial_write1(255);
    1f0c:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1f10:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	09 95       	icall
					serial_write1(1);
    1f18:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1f1c:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	09 95       	icall
					serial_write1(rx_buffer1[rx_array_inx1 - 1]);
    1f24:	a0 91 47 0b 	lds	r26, 0x0B47	; 0x800b47 <rx_array_inx1>
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	a9 5d       	subi	r26, 0xD9	; 217
    1f2c:	b5 4f       	sbci	r27, 0xF5	; 245
    1f2e:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1f32:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1f36:	8c 91       	ld	r24, X
    1f38:	09 95       	icall
					serial_write1(crcHolder);
    1f3a:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1f3e:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1f42:	81 2f       	mov	r24, r17
    1f44:	09 95       	icall
				}
				rx_len1 = 0;
    1f46:	10 92 24 0d 	sts	0x0D24, r1	; 0x800d24 <rx_len1>
				rx_array_inx1 = 0;
    1f4a:	10 92 47 0b 	sts	0x0B47, r1	; 0x800b47 <rx_array_inx1>
				wipeRxBuffer1();
    1f4e:	3f dc       	rcall	.-1922   	; 0x17ce <wipeRxBuffer1>
				return true;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	63 c0       	rjmp	.+198    	; 0x201a <receiveData1+0x386>
			} 
			else 
			{
				crcErrorCounter1++; //increments the counter every time a crc fails
    1f54:	80 91 7b 0d 	lds	r24, 0x0D7B	; 0x800d7b <crcErrorCounter1>
    1f58:	90 91 7c 0d 	lds	r25, 0x0D7C	; 0x800d7c <crcErrorCounter1+0x1>
    1f5c:	01 96       	adiw	r24, 0x01	; 1
    1f5e:	90 93 7c 0d 	sts	0x0D7C, r25	; 0x800d7c <crcErrorCounter1+0x1>
    1f62:	80 93 7b 0d 	sts	0x0D7B, r24	; 0x800d7b <crcErrorCounter1>

				if (AKNAKsend1) // if enabled sends NAK
    1f66:	80 91 77 0d 	lds	r24, 0x0D77	; 0x800d77 <AKNAKsend1>
    1f6a:	88 23       	and	r24, r24
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <receiveData1+0x2dc>
    1f6e:	47 c0       	rjmp	.+142    	; 0x1ffe <receiveData1+0x36a>
				{ 
					unsigned char holder[3];
					holder[0] = 255;
    1f70:	8f ef       	ldi	r24, 0xFF	; 255
    1f72:	89 83       	std	Y+1, r24	; 0x01
					holder[1] = 2;
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	8a 83       	std	Y+2, r24	; 0x02
					holder[2] = rx_buffer1[rx_array_inx1 - 1];
    1f78:	2b 83       	std	Y+3, r18	; 0x03
					unsigned char crcHolder = CRC8(holder, 3);
    1f7a:	63 e0       	ldi	r22, 0x03	; 3
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	01 96       	adiw	r24, 0x01	; 1
    1f80:	e2 dc       	rcall	.-1596   	; 0x1946 <CRC8>
    1f82:	18 2f       	mov	r17, r24
					serial_write1(0x06);
    1f84:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1f88:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1f8c:	86 e0       	ldi	r24, 0x06	; 6
    1f8e:	09 95       	icall
					serial_write1(0x85);
    1f90:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1f94:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1f98:	85 e8       	ldi	r24, 0x85	; 133
    1f9a:	09 95       	icall
					serial_write1(returnAddress1);
    1f9c:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1fa0:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1fa4:	80 91 27 0d 	lds	r24, 0x0D27	; 0x800d27 <returnAddress1>
    1fa8:	09 95       	icall
					serial_write1(moduleAddress1);
    1faa:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1fae:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1fb2:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <moduleAddress1>
    1fb6:	09 95       	icall
					serial_write1(3);
    1fb8:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1fbc:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1fc0:	83 e0       	ldi	r24, 0x03	; 3
    1fc2:	09 95       	icall
					serial_write1(255);
    1fc4:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1fc8:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	09 95       	icall
					serial_write1(2);
    1fd0:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1fd4:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1fd8:	82 e0       	ldi	r24, 0x02	; 2
    1fda:	09 95       	icall
					serial_write1(rx_buffer1[rx_array_inx1 - 1]);
    1fdc:	a0 91 47 0b 	lds	r26, 0x0B47	; 0x800b47 <rx_array_inx1>
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	a9 5d       	subi	r26, 0xD9	; 217
    1fe4:	b5 4f       	sbci	r27, 0xF5	; 245
    1fe6:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1fea:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1fee:	8c 91       	ld	r24, X
    1ff0:	09 95       	icall
					serial_write1(crcHolder);
    1ff2:	e0 91 59 0b 	lds	r30, 0x0B59	; 0x800b59 <serial_write1>
    1ff6:	f0 91 5a 0b 	lds	r31, 0x0B5A	; 0x800b5a <serial_write1+0x1>
    1ffa:	81 2f       	mov	r24, r17
    1ffc:	09 95       	icall
				}

				//failed checksum, need to clear this out
				rx_len1 = 0;
    1ffe:	10 92 24 0d 	sts	0x0D24, r1	; 0x800d24 <rx_len1>
				rx_array_inx1 = 0;
    2002:	10 92 47 0b 	sts	0x0B47, r1	; 0x800b47 <rx_array_inx1>
				wipeRxBuffer1();
    2006:	e3 db       	rcall	.-2106   	; 0x17ce <wipeRxBuffer1>
				return false;
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	07 c0       	rjmp	.+14     	; 0x201a <receiveData1+0x386>
				//This will trash any preamble junk in the serial buffer
				//but we need to make sure there is enough in the buffer to process while we trash the rest
				//if the buffer becomes too empty, we will escape and try again on the next call
				alignErrorCounter1++; //increments the counter whenever a byte is trashed
				if (serial_available1() < 5)
				return false;
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	05 c0       	rjmp	.+10     	; 0x201a <receiveData1+0x386>
			{
				serial_read1();
			}
			else
			{
				return false;
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	03 c0       	rjmp	.+6      	; 0x201a <receiveData1+0x386>
				wipeRxBuffer1();
				return false;
			}
		}
	}
	return false;
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	01 c0       	rjmp	.+2      	; 0x201a <receiveData1+0x386>
    2018:	80 e0       	ldi	r24, 0x00	; 0
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	08 95       	ret

0000202a <initialize>:

//Time keeps for comms management
extern timer_t ledTimer,  checkCANTimer;

void initialize(void)
{
    202a:	0f 93       	push	r16
    202c:	1f 93       	push	r17
    202e:	cf 93       	push	r28
		sei();
    2030:	78 94       	sei
		stdout = &mystdout;
    2032:	86 e0       	ldi	r24, 0x06	; 6
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	90 93 a4 0e 	sts	0x0EA4, r25	; 0x800ea4 <__iob+0x3>
    203a:	80 93 a3 0e 	sts	0x0EA3, r24	; 0x800ea3 <__iob+0x2>
		//Startup the USARTs
		USART1_Init(115200); //control box
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	72 ec       	ldi	r23, 0xC2	; 194
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 71 01 	call	0x2e2	; 0x2e2 <USART1_Init>
		USART0_Init(115200); //beacon
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	72 ec       	ldi	r23, 0xC2	; 194
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	0e 94 1f 01 	call	0x23e	; 0x23e <USART0_Init>
		USART0_put_C(0x13);
    2056:	83 e1       	ldi	r24, 0x13	; 19
    2058:	0e 94 c3 01 	call	0x386	; 0x386 <USART0_put_C>
		printf("Startup \r\n");
    205c:	8f e7       	ldi	r24, 0x7F	; 127
    205e:	94 e0       	ldi	r25, 0x04	; 4
    2060:	0e 94 de 21 	call	0x43bc	; 0x43bc <puts>
		
		//Setup the I/O ports
		PORTA	= 0b01111111;
    2064:	8f e7       	ldi	r24, 0x7F	; 127
    2066:	82 b9       	out	0x02, r24	; 2
		PORTF	= 0b11111000;
    2068:	88 ef       	ldi	r24, 0xF8	; 248
    206a:	81 bb       	out	0x11, r24	; 17
		DDRA	= 0b11111111; //0-6 are outputs, 7 is an input (jumper for competition mode) //(Currently an output for debug)
    206c:	9f ef       	ldi	r25, 0xFF	; 255
    206e:	91 b9       	out	0x01, r25	; 1
		DDRF	= 0b11111000; //3-7 are outputs
    2070:	80 bb       	out	0x10, r24	; 16
    2072:	c1 e0       	ldi	r28, 0x01	; 1

		for(int i=1; i <= NUMBER_OF_LEDS; i++)
		{
			setLED(i,ON);
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	8c 2f       	mov	r24, r28
    2078:	ca d0       	rcall	.+404    	; 0x220e <setLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    207a:	2f ef       	ldi	r18, 0xFF	; 255
    207c:	80 e7       	ldi	r24, 0x70	; 112
    207e:	92 e0       	ldi	r25, 0x02	; 2
    2080:	21 50       	subi	r18, 0x01	; 1
    2082:	80 40       	sbci	r24, 0x00	; 0
    2084:	90 40       	sbci	r25, 0x00	; 0
    2086:	e1 f7       	brne	.-8      	; 0x2080 <initialize+0x56>
    2088:	00 c0       	rjmp	.+0      	; 0x208a <initialize+0x60>
    208a:	00 00       	nop
    208c:	cf 5f       	subi	r28, 0xFF	; 255
		PORTA	= 0b01111111;
		PORTF	= 0b11111000;
		DDRA	= 0b11111111; //0-6 are outputs, 7 is an input (jumper for competition mode) //(Currently an output for debug)
		DDRF	= 0b11111000; //3-7 are outputs

		for(int i=1; i <= NUMBER_OF_LEDS; i++)
    208e:	cd 30       	cpi	r28, 0x0D	; 13
    2090:	89 f7       	brne	.-30     	; 0x2074 <initialize+0x4a>
    2092:	2f ef       	ldi	r18, 0xFF	; 255
    2094:	8b e7       	ldi	r24, 0x7B	; 123
    2096:	92 e9       	ldi	r25, 0x92	; 146
    2098:	21 50       	subi	r18, 0x01	; 1
    209a:	80 40       	sbci	r24, 0x00	; 0
    209c:	90 40       	sbci	r25, 0x00	; 0
    209e:	e1 f7       	brne	.-8      	; 0x2098 <initialize+0x6e>
    20a0:	00 c0       	rjmp	.+0      	; 0x20a2 <initialize+0x78>
    20a2:	00 00       	nop
    20a4:	c1 e0       	ldi	r28, 0x01	; 1
		
		_delay_ms(3000);
		
		for(int i=1; i <= NUMBER_OF_LEDS; i++)
		{
			setLED(i,OFF);
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	8c 2f       	mov	r24, r28
    20aa:	b1 d0       	rcall	.+354    	; 0x220e <setLED>
    20ac:	2f ef       	ldi	r18, 0xFF	; 255
    20ae:	80 e7       	ldi	r24, 0x70	; 112
    20b0:	92 e0       	ldi	r25, 0x02	; 2
    20b2:	21 50       	subi	r18, 0x01	; 1
    20b4:	80 40       	sbci	r24, 0x00	; 0
    20b6:	90 40       	sbci	r25, 0x00	; 0
    20b8:	e1 f7       	brne	.-8      	; 0x20b2 <initialize+0x88>
    20ba:	00 c0       	rjmp	.+0      	; 0x20bc <initialize+0x92>
    20bc:	00 00       	nop
    20be:	cf 5f       	subi	r28, 0xFF	; 255
			_delay_ms(50);
		}
		
		_delay_ms(3000);
		
		for(int i=1; i <= NUMBER_OF_LEDS; i++)
    20c0:	cd 30       	cpi	r28, 0x0D	; 13
    20c2:	89 f7       	brne	.-30     	; 0x20a6 <initialize+0x7c>
			setLED(i,OFF);
			_delay_ms(50);
		}
		
		//Init the CAN here
		can_init();
    20c4:	0e 94 34 06 	call	0xc68	; 0xc68 <can_init>
		
		//Start communciations handlers
		initFastTransfer();
    20c8:	f9 db       	rcall	.-2062   	; 0x18bc <initFastTransfer>
		initCANFastTransfer();
    20ca:	85 d8       	rcall	.-3830   	; 0x11d6 <initCANFastTransfer>
    20cc:	c1 e0       	ldi	r28, 0x01	; 1
		
		for(int i=1; i <= NUMBER_OF_LEDS; i++)
		{
			setLED(i,ON);
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	8c 2f       	mov	r24, r28
    20d2:	9d d0       	rcall	.+314    	; 0x220e <setLED>
    20d4:	cf 5f       	subi	r28, 0xFF	; 255
		
		//Start communciations handlers
		initFastTransfer();
		initCANFastTransfer();
		
		for(int i=1; i <= NUMBER_OF_LEDS; i++)
    20d6:	cd 30       	cpi	r28, 0x0D	; 13
    20d8:	d1 f7       	brne	.-12     	; 0x20ce <initialize+0xa4>
		{
			setLED(i,ON);
		}
		#ifndef DISABLE_MOTOR_SYSTEMS
		//Init the motors
		initMotors();
    20da:	fb d3       	rcall	.+2038   	; 0x28d2 <initMotors>
		#endif
		
		//Initialize the timer0 and timer systems
		initTimer0();
    20dc:	0e 94 3c 20 	call	0x4078	; 0x4078 <initTimer0>
		setTimerInterval(&ledTimer,1000);
    20e0:	08 ee       	ldi	r16, 0xE8	; 232
    20e2:	13 e0       	ldi	r17, 0x03	; 3
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	8d e4       	ldi	r24, 0x4D	; 77
    20f2:	9e e0       	ldi	r25, 0x0E	; 14
    20f4:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
		setTimerInterval(&checkCANTimer,50);
    20f8:	02 e3       	ldi	r16, 0x32	; 50
    20fa:	10 e0       	ldi	r17, 0x00	; 0
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	8d e6       	ldi	r24, 0x6D	; 109
    210a:	9e e0       	ldi	r25, 0x0E	; 14
    210c:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
		setupCommsTimers();
    2110:	e8 da       	rcall	.-2608   	; 0x16e2 <setupCommsTimers>
		printf("Go \r\n");	
    2112:	89 e8       	ldi	r24, 0x89	; 137
    2114:	94 e0       	ldi	r25, 0x04	; 4
    2116:	0e 94 de 21 	call	0x43bc	; 0x43bc <puts>
    211a:	c1 e0       	ldi	r28, 0x01	; 1
		for(int i=1; i <= NUMBER_OF_LEDS; i++)
		{
			setLED(i,OFF);
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	8c 2f       	mov	r24, r28
    2120:	76 d0       	rcall	.+236    	; 0x220e <setLED>
    2122:	cf 5f       	subi	r28, 0xFF	; 255
		initTimer0();
		setTimerInterval(&ledTimer,1000);
		setTimerInterval(&checkCANTimer,50);
		setupCommsTimers();
		printf("Go \r\n");	
		for(int i=1; i <= NUMBER_OF_LEDS; i++)
    2124:	cd 30       	cpi	r28, 0x0D	; 13
    2126:	d1 f7       	brne	.-12     	; 0x211c <initialize+0xf2>
		{
			setLED(i,OFF);
		}
	
    2128:	cf 91       	pop	r28
    212a:	1f 91       	pop	r17
    212c:	0f 91       	pop	r16
    212e:	08 95       	ret

00002130 <buttonsInputTest>:
// #define BUCKET_TEST
// #define CONVEYOR_TEST

void buttonsInputTest(void)
{
	if(buttonPressed(DWN))
    2130:	31 99       	sbic	0x06, 1	; 6
    2132:	07 c0       	rjmp	.+14     	; 0x2142 <buttonsInputTest+0x12>
    2134:	8f e3       	ldi	r24, 0x3F	; 63
    2136:	9c e9       	ldi	r25, 0x9C	; 156
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <buttonsInputTest+0x8>
    213c:	00 c0       	rjmp	.+0      	; 0x213e <buttonsInputTest+0xe>
    213e:	00 00       	nop
    2140:	08 95       	ret
		//long counts = Resolution*Ratio;
		//BucketMotor_MoveCounts(counts); //4096 counts/rev * 50:1 gear box ratio.
		#endif
		_delay_ms(10);
	}
	else if(buttonPressed(UP))
    2142:	32 99       	sbic	0x06, 2	; 6
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <buttonsInputTest+0x24>
    2146:	8f e3       	ldi	r24, 0x3F	; 63
    2148:	9c e9       	ldi	r25, 0x9C	; 156
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <buttonsInputTest+0x1a>
    214e:	00 c0       	rjmp	.+0      	; 0x2150 <buttonsInputTest+0x20>
    2150:	00 00       	nop
    2152:	08 95       	ret
		#elif defined BUCKET_TEST
		BucketMotor_SetVelNoCommsSafety(200);
		#endif
		_delay_ms(10);
	}
	else if(buttonPressed(BCK))
    2154:	92 99       	sbic	0x12, 2	; 18
    2156:	07 c0       	rjmp	.+14     	; 0x2166 <buttonsInputTest+0x36>
    2158:	8f e3       	ldi	r24, 0x3F	; 63
    215a:	9c e9       	ldi	r25, 0x9C	; 156
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <buttonsInputTest+0x2c>
    2160:	00 c0       	rjmp	.+0      	; 0x2162 <buttonsInputTest+0x32>
    2162:	00 00       	nop
    2164:	08 95       	ret
		#elif defined BUCKET_TEST
		BucketMotor_SetVelNoCommsSafety(0);
		#endif
		_delay_ms(10);
	}
	else if(buttonPressed(SPECIAL))
    2166:	30 99       	sbic	0x06, 0	; 6
    2168:	51 c0       	rjmp	.+162    	; 0x220c <buttonsInputTest+0xdc>
	{
		static bool ON_OFF=false;
		if(!ON_OFF)
    216a:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <ON_OFF.2406>
    216e:	81 11       	cpse	r24, r1
    2170:	23 c0       	rjmp	.+70     	; 0x21b8 <buttonsInputTest+0x88>
		{
			setLED(4,ON);
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	84 e0       	ldi	r24, 0x04	; 4
    2176:	4b d0       	rcall	.+150    	; 0x220e <setLED>
			//Send to the sensor/navi an update of the macro state
			ToSendCAN(0, RouterCardAddress);	//From Router Card
    2178:	64 e0       	ldi	r22, 0x04	; 4
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 99 07 	call	0xf32	; 0xf32 <ToSendCAN>
			ToSendCAN(1, TURNING);				//Macro Command
    2184:	64 e0       	ldi	r22, 0x04	; 4
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0e 94 99 07 	call	0xf32	; 0xf32 <ToSendCAN>
			ToSendCAN(2, 45);					//Macro sub-command
    2190:	6d e2       	ldi	r22, 0x2D	; 45
    2192:	70 e0       	ldi	r23, 0x00	; 0
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	0e 94 99 07 	call	0xf32	; 0xf32 <ToSendCAN>
			sendDataCAN(SensorAddress);			//To sensor card
    219c:	86 e0       	ldi	r24, 0x06	; 6
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 29 08 	call	0x1052	; 0x1052 <sendDataCAN>
			ON_OFF=true;		
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <ON_OFF.2406>
			setMacroSubCommand(45);
    21aa:	8d e2       	ldi	r24, 0x2D	; 45
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	07 db       	rcall	.-2546   	; 0x17be <setMacroSubCommand>
			setMacroCommand(TURNING);
    21b0:	84 e0       	ldi	r24, 0x04	; 4
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	ff da       	rcall	.-2562   	; 0x17b4 <setMacroCommand>
    21b6:	21 c0       	rjmp	.+66     	; 0x21fa <buttonsInputTest+0xca>
		}
		else
		{
			setLED(4,OFF);
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	84 e0       	ldi	r24, 0x04	; 4
    21bc:	28 d0       	rcall	.+80     	; 0x220e <setLED>
			//Send to the sensor/navi an update of the macro state
			ToSendCAN(0, RouterCardAddress);	//From Router Card
    21be:	64 e0       	ldi	r22, 0x04	; 4
    21c0:	70 e0       	ldi	r23, 0x00	; 0
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	0e 94 99 07 	call	0xf32	; 0xf32 <ToSendCAN>
			ToSendCAN(1, 0);				//Macro Command
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 99 07 	call	0xf32	; 0xf32 <ToSendCAN>
			ToSendCAN(2, 0);					//Macro sub-command
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	82 e0       	ldi	r24, 0x02	; 2
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 99 07 	call	0xf32	; 0xf32 <ToSendCAN>
			sendDataCAN(SensorAddress);			//To sensor card
    21e2:	86 e0       	ldi	r24, 0x06	; 6
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	0e 94 29 08 	call	0x1052	; 0x1052 <sendDataCAN>
			ON_OFF=false;
    21ea:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <ON_OFF.2406>
			setMacroSubCommand(0);
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	e5 da       	rcall	.-2614   	; 0x17be <setMacroSubCommand>
			setMacroCommand(0);
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	dd da       	rcall	.-2630   	; 0x17b4 <setMacroCommand>
    21fa:	9f ef       	ldi	r25, 0xFF	; 255
    21fc:	24 e3       	ldi	r18, 0x34	; 52
    21fe:	8c e0       	ldi	r24, 0x0C	; 12
    2200:	91 50       	subi	r25, 0x01	; 1
    2202:	20 40       	sbci	r18, 0x00	; 0
    2204:	80 40       	sbci	r24, 0x00	; 0
    2206:	e1 f7       	brne	.-8      	; 0x2200 <buttonsInputTest+0xd0>
    2208:	00 c0       	rjmp	.+0      	; 0x220a <buttonsInputTest+0xda>
    220a:	00 00       	nop
    220c:	08 95       	ret

0000220e <setLED>:

#include "LEDs.h"
#include <avr/io.h>

void setLED(LEDs_ENUMED_t ledNumber, bool state)
{
    220e:	96 2f       	mov	r25, r22
	int ledToSwitch = 0;
	//HIGH SETS
	if(!state)
    2210:	61 11       	cpse	r22, r1
    2212:	1b c0       	rjmp	.+54     	; 0x224a <setLED+0x3c>
	{
		switch(ledNumber)
    2214:	48 2f       	mov	r20, r24
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	fa 01       	movw	r30, r20
    221a:	31 97       	sbiw	r30, 0x01	; 1
    221c:	ec 30       	cpi	r30, 0x0C	; 12
    221e:	f1 05       	cpc	r31, r1
    2220:	98 f5       	brcc	.+102    	; 0x2288 <setLED+0x7a>
    2222:	e6 5b       	subi	r30, 0xB6	; 182
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	0c 94 81 20 	jmp	0x4102	; 0x4102 <__tablejump2__>
					break;
				case LED7:
					ledToSwitch=LED7_P_HIGH;
					break;
				case LED8:
					ledToSwitch=LED8_P_HIGH;
    222a:	88 e0       	ldi	r24, 0x08	; 8
    222c:	41 c0       	rjmp	.+130    	; 0x22b0 <setLED+0xa2>
				//LEDs on PORTF
				case LED1:
					ledToSwitch=LED1_P_HIGH;
					break;
				case LED2:
					ledToSwitch=LED2_P_HIGH;
    222e:	80 e4       	ldi	r24, 0x40	; 64
    2230:	35 c0       	rjmp	.+106    	; 0x229c <setLED+0x8e>
					ledToSwitch=LED9_P_HIGH;			
					break;
			
				//LEDs on PORTA
				case LED3:
					ledToSwitch=LED3_P_HIGH;
    2232:	81 e0       	ldi	r24, 0x01	; 1
					break;
    2234:	3d c0       	rjmp	.+122    	; 0x22b0 <setLED+0xa2>
				case LED4:
					ledToSwitch=LED4_P_HIGH;
    2236:	84 e0       	ldi	r24, 0x04	; 4
					break;
    2238:	3b c0       	rjmp	.+118    	; 0x22b0 <setLED+0xa2>
				case LED5:
					ledToSwitch=LED5_P_HIGH;
    223a:	80 e1       	ldi	r24, 0x10	; 16
					break;
    223c:	39 c0       	rjmp	.+114    	; 0x22b0 <setLED+0xa2>
				case LED6:
					ledToSwitch=LED6_P_HIGH;
    223e:	80 e4       	ldi	r24, 0x40	; 64
					break;
    2240:	37 c0       	rjmp	.+110    	; 0x22b0 <setLED+0xa2>
				case LED10:
					ledToSwitch=LED10_P_HIGH;
					break;
				case LED11:
					ledToSwitch=LED11_P_HIGH;
    2242:	80 e2       	ldi	r24, 0x20	; 32
					break;
    2244:	2b c0       	rjmp	.+86     	; 0x229c <setLED+0x8e>
				case LED12:
					ledToSwitch=LED12_P_HIGH;			
    2246:	88 e0       	ldi	r24, 0x08	; 8
					break;
    2248:	29 c0       	rjmp	.+82     	; 0x229c <setLED+0x8e>
			#endif
		}
	}
	else
	{
			switch(ledNumber)
    224a:	48 2f       	mov	r20, r24
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	fa 01       	movw	r30, r20
    2250:	31 97       	sbiw	r30, 0x01	; 1
    2252:	ec 30       	cpi	r30, 0x0C	; 12
    2254:	f1 05       	cpc	r31, r1
    2256:	c0 f4       	brcc	.+48     	; 0x2288 <setLED+0x7a>
    2258:	ea 5a       	subi	r30, 0xAA	; 170
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	0c 94 81 20 	jmp	0x4102	; 0x4102 <__tablejump2__>
						break;
					case LED7:
						ledToSwitch=LED7_P_LOW;
						break;
					case LED8:
						ledToSwitch=LED8_P_LOW;
    2260:	87 ef       	ldi	r24, 0xF7	; 247
    2262:	26 c0       	rjmp	.+76     	; 0x22b0 <setLED+0xa2>
					//LEDs on PORTF
					case LED1:
						ledToSwitch=LED1_P_LOW;
						break;
					case LED2:
						ledToSwitch=LED2_P_LOW;
    2264:	8f eb       	ldi	r24, 0xBF	; 191
    2266:	1a c0       	rjmp	.+52     	; 0x229c <setLED+0x8e>
						break;
					case LED8:
						ledToSwitch=LED8_P_LOW;
						break;
					case LED9:
						ledToSwitch=LED9_P_LOW;
    2268:	8d ef       	ldi	r24, 0xFD	; 253
						break;
    226a:	22 c0       	rjmp	.+68     	; 0x22b0 <setLED+0xa2>
				
					//LEDs on PORTA
					case LED3:
						ledToSwitch=LED3_P_LOW;
    226c:	8e ef       	ldi	r24, 0xFE	; 254
						break;
    226e:	20 c0       	rjmp	.+64     	; 0x22b0 <setLED+0xa2>
					case LED4:
						ledToSwitch=LED4_P_LOW;
    2270:	8b ef       	ldi	r24, 0xFB	; 251
						break;
    2272:	1e c0       	rjmp	.+60     	; 0x22b0 <setLED+0xa2>
					case LED5:
						ledToSwitch=LED5_P_LOW;
    2274:	8f ee       	ldi	r24, 0xEF	; 239
						break;
    2276:	1c c0       	rjmp	.+56     	; 0x22b0 <setLED+0xa2>
					case LED6:
						ledToSwitch=LED6_P_LOW;
    2278:	8f eb       	ldi	r24, 0xBF	; 191
						break;
    227a:	1a c0       	rjmp	.+52     	; 0x22b0 <setLED+0xa2>
					case LED10:
						ledToSwitch=LED10_P_LOW;
    227c:	8f e7       	ldi	r24, 0x7F	; 127
						break;
    227e:	0e c0       	rjmp	.+28     	; 0x229c <setLED+0x8e>
					case LED11:
						ledToSwitch=LED11_P_LOW;
    2280:	8f ed       	ldi	r24, 0xDF	; 223
						break;
    2282:	0c c0       	rjmp	.+24     	; 0x229c <setLED+0x8e>
					case LED12:
						ledToSwitch=LED12_P_LOW;
    2284:	87 ef       	ldi	r24, 0xF7	; 247
						break;
    2286:	0a c0       	rjmp	.+20     	; 0x229c <setLED+0x8e>
		
		
	}
	#ifdef NEW_MAIN
		unsigned int portRead;
		switch(ledNumber)
    2288:	8a 30       	cpi	r24, 0x0A	; 10
    228a:	28 f4       	brcc	.+10     	; 0x2296 <setLED+0x88>
    228c:	83 30       	cpi	r24, 0x03	; 3
    228e:	78 f4       	brcc	.+30     	; 0x22ae <setLED+0xa0>
    2290:	81 30       	cpi	r24, 0x01	; 1
    2292:	18 f1       	brcs	.+70     	; 0x22da <setLED+0xcc>
    2294:	02 c0       	rjmp	.+4      	; 0x229a <setLED+0x8c>
    2296:	8d 30       	cpi	r24, 0x0D	; 13
    2298:	00 f5       	brcc	.+64     	; 0x22da <setLED+0xcc>
    229a:	80 e0       	ldi	r24, 0x00	; 0
			case LED2:
			case LED10:
			case LED11:
			case LED12:
		
				portRead= PINF;
    229c:	2f b1       	in	r18, 0x0f	; 15
				//if you want the LED off
				if(!state)
    229e:	91 11       	cpse	r25, r1
    22a0:	03 c0       	rjmp	.+6      	; 0x22a8 <setLED+0x9a>
				{
					//Turn it high (OFF)
					PORTF = portRead | (ledToSwitch);
    22a2:	82 2b       	or	r24, r18
    22a4:	81 bb       	out	0x11, r24	; 17
    22a6:	08 95       	ret
				}
				else
				{
					//Turn it low (ON)
					PORTF = portRead & (ledToSwitch);
    22a8:	82 23       	and	r24, r18
    22aa:	81 bb       	out	0x11, r24	; 17
    22ac:	08 95       	ret
		
		
	}
	#ifdef NEW_MAIN
		unsigned int portRead;
		switch(ledNumber)
    22ae:	80 e0       	ldi	r24, 0x00	; 0
			case LED5:
			case LED6:
			case LED7:
			case LED8:
			case LED9:
				portRead= PINA;
    22b0:	20 b1       	in	r18, 0x00	; 0
				//If you want the LED off
				if(!state)
    22b2:	91 11       	cpse	r25, r1
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <setLED+0xae>
				{
					//Turn the port high (OFF)
					PORTA = portRead | (ledToSwitch);
    22b6:	82 2b       	or	r24, r18
    22b8:	82 b9       	out	0x02, r24	; 2
    22ba:	08 95       	ret
				}
				else
				{
					//Turn the port low (ON)
					PORTA = portRead & (ledToSwitch);
    22bc:	82 23       	and	r24, r18
    22be:	82 b9       	out	0x02, r24	; 2
    22c0:	08 95       	ret
		switch(ledNumber)
		{
			#ifdef NEW_MAIN
				//LEDs on PORTF
				case LED1:
					ledToSwitch=LED1_P_HIGH;
    22c2:	80 e1       	ldi	r24, 0x10	; 16
    22c4:	eb cf       	rjmp	.-42     	; 0x229c <setLED+0x8e>
					break;
				case LED6:
					ledToSwitch=LED6_P_HIGH;
					break;
				case LED10:
					ledToSwitch=LED10_P_HIGH;
    22c6:	80 e8       	ldi	r24, 0x80	; 128
    22c8:	e9 cf       	rjmp	.-46     	; 0x229c <setLED+0x8e>
			switch(ledNumber)
			{
				#ifdef NEW_MAIN
					//LEDs on PORTF
					case LED1:
						ledToSwitch=LED1_P_LOW;
    22ca:	8f ee       	ldi	r24, 0xEF	; 239
    22cc:	e7 cf       	rjmp	.-50     	; 0x229c <setLED+0x8e>
					break;
				case LED2:
					ledToSwitch=LED2_P_HIGH;
					break;
				case LED7:
					ledToSwitch=LED7_P_HIGH;
    22ce:	80 e2       	ldi	r24, 0x20	; 32
    22d0:	ef cf       	rjmp	.-34     	; 0x22b0 <setLED+0xa2>
					break;
				case LED8:
					ledToSwitch=LED8_P_HIGH;
					break;
				case LED9:
					ledToSwitch=LED9_P_HIGH;			
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	ed cf       	rjmp	.-38     	; 0x22b0 <setLED+0xa2>
						break;
					case LED2:
						ledToSwitch=LED2_P_LOW;
						break;
					case LED7:
						ledToSwitch=LED7_P_LOW;
    22d6:	8f ed       	ldi	r24, 0xDF	; 223
    22d8:	eb cf       	rjmp	.-42     	; 0x22b0 <setLED+0xa2>
    22da:	08 95       	ret

000022dc <toggleLED>:
}

void toggleLED(LEDs_ENUMED_t ledNumber)
{
	int ledToSwitch=0;
	switch(ledNumber)
    22dc:	48 2f       	mov	r20, r24
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	fa 01       	movw	r30, r20
    22e2:	31 97       	sbiw	r30, 0x01	; 1
    22e4:	ec 30       	cpi	r30, 0x0C	; 12
    22e6:	f1 05       	cpc	r31, r1
    22e8:	a0 f4       	brcc	.+40     	; 0x2312 <toggleLED+0x36>
    22ea:	ee 59       	subi	r30, 0x9E	; 158
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	0c 94 81 20 	jmp	0x4102	; 0x4102 <__tablejump2__>
				break;
			case LED7:
				ledToSwitch=LED7_P_HIGH;
				break;
			case LED8:
				ledToSwitch=LED8_P_HIGH;
    22f2:	88 e0       	ldi	r24, 0x08	; 8
    22f4:	1b c0       	rjmp	.+54     	; 0x232c <toggleLED+0x50>
			//LEDs on PORTF
			case LED1:
				ledToSwitch=LED1_P_HIGH;
				break;
			case LED2:
				ledToSwitch=LED2_P_HIGH;
    22f6:	80 e4       	ldi	r24, 0x40	; 64
    22f8:	16 c0       	rjmp	.+44     	; 0x2326 <toggleLED+0x4a>
				ledToSwitch=LED9_P_HIGH;
				break;
		
			//LEDs on PORTA
			case LED3:
				ledToSwitch=LED3_P_HIGH;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
				break;
    22fc:	17 c0       	rjmp	.+46     	; 0x232c <toggleLED+0x50>
			case LED4:
				ledToSwitch=LED4_P_HIGH;
    22fe:	84 e0       	ldi	r24, 0x04	; 4
				break;
    2300:	15 c0       	rjmp	.+42     	; 0x232c <toggleLED+0x50>
			case LED5:
				ledToSwitch=LED5_P_HIGH;
    2302:	80 e1       	ldi	r24, 0x10	; 16
				break;
    2304:	13 c0       	rjmp	.+38     	; 0x232c <toggleLED+0x50>
			case LED6:
				ledToSwitch=LED6_P_HIGH;
    2306:	80 e4       	ldi	r24, 0x40	; 64
				break;
    2308:	11 c0       	rjmp	.+34     	; 0x232c <toggleLED+0x50>
			case LED10:
				ledToSwitch=LED10_P_HIGH;
				break;
			case LED11:
				ledToSwitch=LED11_P_HIGH;
    230a:	80 e2       	ldi	r24, 0x20	; 32
				break;
    230c:	0c c0       	rjmp	.+24     	; 0x2326 <toggleLED+0x4a>
			case LED12:
				ledToSwitch=LED12_P_HIGH;
    230e:	88 e0       	ldi	r24, 0x08	; 8
				break;
    2310:	0a c0       	rjmp	.+20     	; 0x2326 <toggleLED+0x4a>
				ledToSwitch=ERROR2_P_HIGH;
				break;			
		#endif
	}
	#ifdef NEW_MAIN
		switch(ledNumber)
    2312:	8a 30       	cpi	r24, 0x0A	; 10
    2314:	28 f4       	brcc	.+10     	; 0x2320 <toggleLED+0x44>
    2316:	83 30       	cpi	r24, 0x03	; 3
    2318:	40 f4       	brcc	.+16     	; 0x232a <toggleLED+0x4e>
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	88 f0       	brcs	.+34     	; 0x2340 <toggleLED+0x64>
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <toggleLED+0x48>
    2320:	8d 30       	cpi	r24, 0x0D	; 13
    2322:	70 f4       	brcc	.+28     	; 0x2340 <toggleLED+0x64>
	
}

void toggleLED(LEDs_ENUMED_t ledNumber)
{
	int ledToSwitch=0;
    2324:	80 e0       	ldi	r24, 0x00	; 0
			case LED2:
			case LED10:
			case LED11:
			case LED12:
				//Toggle pin State
				PINF = (ledToSwitch);
    2326:	8f b9       	out	0x0f, r24	; 15
				break;
    2328:	08 95       	ret
	
}

void toggleLED(LEDs_ENUMED_t ledNumber)
{
	int ledToSwitch=0;
    232a:	80 e0       	ldi	r24, 0x00	; 0
			case LED6:
			case LED7:
			case LED8:
			case LED9:
				//Toggle pin State
				PINA= (ledToSwitch);
    232c:	80 b9       	out	0x00, r24	; 0
				break;
    232e:	08 95       	ret
	switch(ledNumber)
	{
		#ifdef NEW_MAIN
			//LEDs on PORTF
			case LED1:
				ledToSwitch=LED1_P_HIGH;
    2330:	80 e1       	ldi	r24, 0x10	; 16
    2332:	f9 cf       	rjmp	.-14     	; 0x2326 <toggleLED+0x4a>
				break;
			case LED6:
				ledToSwitch=LED6_P_HIGH;
				break;
			case LED10:
				ledToSwitch=LED10_P_HIGH;
    2334:	80 e8       	ldi	r24, 0x80	; 128
    2336:	f7 cf       	rjmp	.-18     	; 0x2326 <toggleLED+0x4a>
				break;
			case LED2:
				ledToSwitch=LED2_P_HIGH;
				break;
			case LED7:
				ledToSwitch=LED7_P_HIGH;
    2338:	80 e2       	ldi	r24, 0x20	; 32
    233a:	f8 cf       	rjmp	.-16     	; 0x232c <toggleLED+0x50>
				break;
			case LED8:
				ledToSwitch=LED8_P_HIGH;
				break;
			case LED9:
				ledToSwitch=LED9_P_HIGH;
    233c:	82 e0       	ldi	r24, 0x02	; 2
    233e:	f6 cf       	rjmp	.-20     	; 0x232c <toggleLED+0x50>
    2340:	08 95       	ret

00002342 <main>:
timer_t ledTimer,  checkCANTimer, motorRampTimer;
	 
	 
int main(void) 
{
	initialize();
    2342:	73 de       	rcall	.-794    	; 0x202a <initialize>
	setTimerInterval(&motorRampTimer,100);
    2344:	04 e6       	ldi	r16, 0x64	; 100
    2346:	10 e0       	ldi	r17, 0x00	; 0
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	70 e0       	ldi	r23, 0x00	; 0
    2354:	8d e5       	ldi	r24, 0x5D	; 93
    2356:	9e e0       	ldi	r25, 0x0E	; 14
    2358:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
	
	while(1) 
	{
		
		//BLINK A LIGHT
		if(timerDone(&ledTimer))	
    235c:	8d e4       	ldi	r24, 0x4D	; 77
    235e:	9e e0       	ldi	r25, 0x0E	; 14
    2360:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <timerDone>
    2364:	88 23       	and	r24, r24
    2366:	11 f0       	breq	.+4      	; 0x236c <main+0x2a>
		{
			#ifdef NEW_MAIN
				toggleLED(6);	
    2368:	86 e0       	ldi	r24, 0x06	; 6
    236a:	b8 df       	rcall	.-144    	; 0x22dc <toggleLED>
				//
			//}
		//}
		
		//UPDATE THE COMMUNICATIONS		
		updateComms();
    236c:	5d d8       	rcall	.-3910   	; 0x1428 <updateComms>
		
		 
	#ifdef USE_BUTTONS_TEST
		buttonsInputTest();
    236e:	e0 de       	rcall	.-576    	; 0x2130 <buttonsInputTest>
	#endif
	
	}
    2370:	f5 cf       	rjmp	.-22     	; 0x235c <main+0x1a>

00002372 <ReceiveMotor1>:
	}
	else
	{
		return 0;
	}
}
    2372:	bc 01       	movw	r22, r24
    2374:	6d 5f       	subi	r22, 0xFD	; 253
    2376:	7f 4f       	sbci	r23, 0xFF	; 255
    2378:	89 e6       	ldi	r24, 0x69	; 105
    237a:	9d e0       	ldi	r25, 0x0D	; 13
    237c:	0c 94 be 00 	jmp	0x17c	; 0x17c <cb_push_back>
    2380:	08 95       	ret

00002382 <LeftMotor_Init>:
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	c8 56       	subi	r28, 0x68	; 104
    2394:	d1 09       	sbc	r29, r1
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	88 e0       	ldi	r24, 0x08	; 8
    23a2:	e6 e1       	ldi	r30, 0x16	; 22
    23a4:	f1 e0       	ldi	r31, 0x01	; 1
    23a6:	de 01       	movw	r26, r28
    23a8:	11 96       	adiw	r26, 0x01	; 1
    23aa:	01 90       	ld	r0, Z+
    23ac:	0d 92       	st	X+, r0
    23ae:	8a 95       	dec	r24
    23b0:	e1 f7       	brne	.-8      	; 0x23aa <LeftMotor_Init+0x28>
    23b2:	88 e0       	ldi	r24, 0x08	; 8
    23b4:	ee e1       	ldi	r30, 0x1E	; 30
    23b6:	f1 e0       	ldi	r31, 0x01	; 1
    23b8:	de 01       	movw	r26, r28
    23ba:	19 96       	adiw	r26, 0x09	; 9
    23bc:	01 90       	ld	r0, Z+
    23be:	0d 92       	st	X+, r0
    23c0:	8a 95       	dec	r24
    23c2:	e1 f7       	brne	.-8      	; 0x23bc <LeftMotor_Init+0x3a>
    23c4:	88 e0       	ldi	r24, 0x08	; 8
    23c6:	e6 e2       	ldi	r30, 0x26	; 38
    23c8:	f1 e0       	ldi	r31, 0x01	; 1
    23ca:	de 01       	movw	r26, r28
    23cc:	51 96       	adiw	r26, 0x11	; 17
    23ce:	01 90       	ld	r0, Z+
    23d0:	0d 92       	st	X+, r0
    23d2:	8a 95       	dec	r24
    23d4:	e1 f7       	brne	.-8      	; 0x23ce <LeftMotor_Init+0x4c>
    23d6:	88 e0       	ldi	r24, 0x08	; 8
    23d8:	ee e2       	ldi	r30, 0x2E	; 46
    23da:	f1 e0       	ldi	r31, 0x01	; 1
    23dc:	de 01       	movw	r26, r28
    23de:	59 96       	adiw	r26, 0x19	; 25
    23e0:	01 90       	ld	r0, Z+
    23e2:	0d 92       	st	X+, r0
    23e4:	8a 95       	dec	r24
    23e6:	e1 f7       	brne	.-8      	; 0x23e0 <LeftMotor_Init+0x5e>
    23e8:	88 e0       	ldi	r24, 0x08	; 8
    23ea:	e6 e3       	ldi	r30, 0x36	; 54
    23ec:	f1 e0       	ldi	r31, 0x01	; 1
    23ee:	de 01       	movw	r26, r28
    23f0:	91 96       	adiw	r26, 0x21	; 33
    23f2:	01 90       	ld	r0, Z+
    23f4:	0d 92       	st	X+, r0
    23f6:	8a 95       	dec	r24
    23f8:	e1 f7       	brne	.-8      	; 0x23f2 <LeftMotor_Init+0x70>
    23fa:	88 e0       	ldi	r24, 0x08	; 8
    23fc:	ee e3       	ldi	r30, 0x3E	; 62
    23fe:	f1 e0       	ldi	r31, 0x01	; 1
    2400:	de 01       	movw	r26, r28
    2402:	99 96       	adiw	r26, 0x29	; 41
    2404:	01 90       	ld	r0, Z+
    2406:	0d 92       	st	X+, r0
    2408:	8a 95       	dec	r24
    240a:	e1 f7       	brne	.-8      	; 0x2404 <LeftMotor_Init+0x82>
    240c:	88 e0       	ldi	r24, 0x08	; 8
    240e:	e6 e4       	ldi	r30, 0x46	; 70
    2410:	f1 e0       	ldi	r31, 0x01	; 1
    2412:	de 01       	movw	r26, r28
    2414:	d1 96       	adiw	r26, 0x31	; 49
    2416:	01 90       	ld	r0, Z+
    2418:	0d 92       	st	X+, r0
    241a:	8a 95       	dec	r24
    241c:	e1 f7       	brne	.-8      	; 0x2416 <LeftMotor_Init+0x94>
    241e:	88 e0       	ldi	r24, 0x08	; 8
    2420:	ee e4       	ldi	r30, 0x4E	; 78
    2422:	f1 e0       	ldi	r31, 0x01	; 1
    2424:	de 01       	movw	r26, r28
    2426:	d9 96       	adiw	r26, 0x39	; 57
    2428:	01 90       	ld	r0, Z+
    242a:	0d 92       	st	X+, r0
    242c:	8a 95       	dec	r24
    242e:	e1 f7       	brne	.-8      	; 0x2428 <LeftMotor_Init+0xa6>
    2430:	88 e0       	ldi	r24, 0x08	; 8
    2432:	e6 e5       	ldi	r30, 0x56	; 86
    2434:	f1 e0       	ldi	r31, 0x01	; 1
    2436:	de 01       	movw	r26, r28
    2438:	af 5b       	subi	r26, 0xBF	; 191
    243a:	bf 4f       	sbci	r27, 0xFF	; 255
    243c:	01 90       	ld	r0, Z+
    243e:	0d 92       	st	X+, r0
    2440:	8a 95       	dec	r24
    2442:	e1 f7       	brne	.-8      	; 0x243c <LeftMotor_Init+0xba>
    2444:	88 e0       	ldi	r24, 0x08	; 8
    2446:	ee e5       	ldi	r30, 0x5E	; 94
    2448:	f1 e0       	ldi	r31, 0x01	; 1
    244a:	de 01       	movw	r26, r28
    244c:	a7 5b       	subi	r26, 0xB7	; 183
    244e:	bf 4f       	sbci	r27, 0xFF	; 255
    2450:	01 90       	ld	r0, Z+
    2452:	0d 92       	st	X+, r0
    2454:	8a 95       	dec	r24
    2456:	e1 f7       	brne	.-8      	; 0x2450 <LeftMotor_Init+0xce>
    2458:	88 e0       	ldi	r24, 0x08	; 8
    245a:	e6 e6       	ldi	r30, 0x66	; 102
    245c:	f1 e0       	ldi	r31, 0x01	; 1
    245e:	de 01       	movw	r26, r28
    2460:	af 5a       	subi	r26, 0xAF	; 175
    2462:	bf 4f       	sbci	r27, 0xFF	; 255
    2464:	01 90       	ld	r0, Z+
    2466:	0d 92       	st	X+, r0
    2468:	8a 95       	dec	r24
    246a:	e1 f7       	brne	.-8      	; 0x2464 <LeftMotor_Init+0xe2>
    246c:	88 e0       	ldi	r24, 0x08	; 8
    246e:	ee e6       	ldi	r30, 0x6E	; 110
    2470:	f1 e0       	ldi	r31, 0x01	; 1
    2472:	de 01       	movw	r26, r28
    2474:	a7 5a       	subi	r26, 0xA7	; 167
    2476:	bf 4f       	sbci	r27, 0xFF	; 255
    2478:	01 90       	ld	r0, Z+
    247a:	0d 92       	st	X+, r0
    247c:	8a 95       	dec	r24
    247e:	e1 f7       	brne	.-8      	; 0x2478 <LeftMotor_Init+0xf6>
    2480:	88 e0       	ldi	r24, 0x08	; 8
    2482:	e6 e7       	ldi	r30, 0x76	; 118
    2484:	f1 e0       	ldi	r31, 0x01	; 1
    2486:	de 01       	movw	r26, r28
    2488:	af 59       	subi	r26, 0x9F	; 159
    248a:	bf 4f       	sbci	r27, 0xFF	; 255
    248c:	01 90       	ld	r0, Z+
    248e:	0d 92       	st	X+, r0
    2490:	8a 95       	dec	r24
    2492:	e1 f7       	brne	.-8      	; 0x248c <LeftMotor_Init+0x10a>
    2494:	48 e0       	ldi	r20, 0x08	; 8
    2496:	50 e0       	ldi	r21, 0x00	; 0
    2498:	64 e0       	ldi	r22, 0x04	; 4
    249a:	70 e0       	ldi	r23, 0x00	; 0
    249c:	89 e6       	ldi	r24, 0x69	; 105
    249e:	9d e0       	ldi	r25, 0x0D	; 13
    24a0:	0e 94 8e 00 	call	0x11c	; 0x11c <cb_init>
    24a4:	29 eb       	ldi	r18, 0xB9	; 185
    24a6:	31 e1       	ldi	r19, 0x11	; 17
    24a8:	4f ef       	ldi	r20, 0xFF	; 255
    24aa:	57 e0       	ldi	r21, 0x07	; 7
    24ac:	6d ef       	ldi	r22, 0xFD	; 253
    24ae:	75 e0       	ldi	r23, 0x05	; 5
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	0e 94 70 05 	call	0xae0	; 0xae0 <prepare_rx>
    24b6:	88 23       	and	r24, r24
    24b8:	09 f0       	breq	.+2      	; 0x24bc <LeftMotor_Init+0x13a>
    24ba:	98 95       	break
    24bc:	0f 2e       	mov	r0, r31
    24be:	f7 e0       	ldi	r31, 0x07	; 7
    24c0:	ef 2e       	mov	r14, r31
    24c2:	f1 2c       	mov	r15, r1
    24c4:	f0 2d       	mov	r31, r0
    24c6:	09 e6       	ldi	r16, 0x69	; 105
    24c8:	1d e0       	ldi	r17, 0x0D	; 13
    24ca:	29 81       	ldd	r18, Y+1	; 0x01
    24cc:	3a 81       	ldd	r19, Y+2	; 0x02
    24ce:	4b 81       	ldd	r20, Y+3	; 0x03
    24d0:	5c 81       	ldd	r21, Y+4	; 0x04
    24d2:	6d 81       	ldd	r22, Y+5	; 0x05
    24d4:	7e 81       	ldd	r23, Y+6	; 0x06
    24d6:	8f 81       	ldd	r24, Y+7	; 0x07
    24d8:	98 85       	ldd	r25, Y+8	; 0x08
    24da:	6e d4       	rcall	.+2268   	; 0x2db8 <SendandVerify>
    24dc:	a2 96       	adiw	r28, 0x22	; 34
    24de:	2f ad       	ldd	r18, Y+63	; 0x3f
    24e0:	a2 97       	sbiw	r28, 0x22	; 34
    24e2:	a3 96       	adiw	r28, 0x23	; 35
    24e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    24e6:	a3 97       	sbiw	r28, 0x23	; 35
    24e8:	a4 96       	adiw	r28, 0x24	; 36
    24ea:	4f ad       	ldd	r20, Y+63	; 0x3f
    24ec:	a4 97       	sbiw	r28, 0x24	; 36
    24ee:	a5 96       	adiw	r28, 0x25	; 37
    24f0:	5f ad       	ldd	r21, Y+63	; 0x3f
    24f2:	a5 97       	sbiw	r28, 0x25	; 37
    24f4:	a6 96       	adiw	r28, 0x26	; 38
    24f6:	6f ad       	ldd	r22, Y+63	; 0x3f
    24f8:	a6 97       	sbiw	r28, 0x26	; 38
    24fa:	a7 96       	adiw	r28, 0x27	; 39
    24fc:	7f ad       	ldd	r23, Y+63	; 0x3f
    24fe:	a7 97       	sbiw	r28, 0x27	; 39
    2500:	a8 96       	adiw	r28, 0x28	; 40
    2502:	8f ad       	ldd	r24, Y+63	; 0x3f
    2504:	a8 97       	sbiw	r28, 0x28	; 40
    2506:	a9 96       	adiw	r28, 0x29	; 41
    2508:	9f ad       	ldd	r25, Y+63	; 0x3f
    250a:	a9 97       	sbiw	r28, 0x29	; 41
    250c:	55 d4       	rcall	.+2218   	; 0x2db8 <SendandVerify>
    250e:	29 a1       	ldd	r18, Y+33	; 0x21
    2510:	3a a1       	ldd	r19, Y+34	; 0x22
    2512:	4b a1       	ldd	r20, Y+35	; 0x23
    2514:	5c a1       	ldd	r21, Y+36	; 0x24
    2516:	6d a1       	ldd	r22, Y+37	; 0x25
    2518:	7e a1       	ldd	r23, Y+38	; 0x26
    251a:	8f a1       	ldd	r24, Y+39	; 0x27
    251c:	98 a5       	ldd	r25, Y+40	; 0x28
    251e:	4c d4       	rcall	.+2200   	; 0x2db8 <SendandVerify>
    2520:	29 a5       	ldd	r18, Y+41	; 0x29
    2522:	3a a5       	ldd	r19, Y+42	; 0x2a
    2524:	4b a5       	ldd	r20, Y+43	; 0x2b
    2526:	5c a5       	ldd	r21, Y+44	; 0x2c
    2528:	6d a5       	ldd	r22, Y+45	; 0x2d
    252a:	7e a5       	ldd	r23, Y+46	; 0x2e
    252c:	8f a5       	ldd	r24, Y+47	; 0x2f
    252e:	98 a9       	ldd	r25, Y+48	; 0x30
    2530:	43 d4       	rcall	.+2182   	; 0x2db8 <SendandVerify>
    2532:	29 a9       	ldd	r18, Y+49	; 0x31
    2534:	3a a9       	ldd	r19, Y+50	; 0x32
    2536:	4b a9       	ldd	r20, Y+51	; 0x33
    2538:	5c a9       	ldd	r21, Y+52	; 0x34
    253a:	6d a9       	ldd	r22, Y+53	; 0x35
    253c:	7e a9       	ldd	r23, Y+54	; 0x36
    253e:	8f a9       	ldd	r24, Y+55	; 0x37
    2540:	98 ad       	ldd	r25, Y+56	; 0x38
    2542:	3a d4       	rcall	.+2164   	; 0x2db8 <SendandVerify>
    2544:	29 85       	ldd	r18, Y+9	; 0x09
    2546:	3a 85       	ldd	r19, Y+10	; 0x0a
    2548:	4b 85       	ldd	r20, Y+11	; 0x0b
    254a:	5c 85       	ldd	r21, Y+12	; 0x0c
    254c:	6d 85       	ldd	r22, Y+13	; 0x0d
    254e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2550:	8f 85       	ldd	r24, Y+15	; 0x0f
    2552:	98 89       	ldd	r25, Y+16	; 0x10
    2554:	31 d4       	rcall	.+2146   	; 0x2db8 <SendandVerify>
    2556:	29 89       	ldd	r18, Y+17	; 0x11
    2558:	3a 89       	ldd	r19, Y+18	; 0x12
    255a:	4b 89       	ldd	r20, Y+19	; 0x13
    255c:	5c 89       	ldd	r21, Y+20	; 0x14
    255e:	6d 89       	ldd	r22, Y+21	; 0x15
    2560:	7e 89       	ldd	r23, Y+22	; 0x16
    2562:	8f 89       	ldd	r24, Y+23	; 0x17
    2564:	98 8d       	ldd	r25, Y+24	; 0x18
    2566:	28 d4       	rcall	.+2128   	; 0x2db8 <SendandVerify>
    2568:	8f e3       	ldi	r24, 0x3F	; 63
    256a:	9f e1       	ldi	r25, 0x1F	; 31
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LeftMotor_Init+0x1ea>
    2570:	00 c0       	rjmp	.+0      	; 0x2572 <LeftMotor_Init+0x1f0>
    2572:	00 00       	nop
    2574:	29 ad       	ldd	r18, Y+57	; 0x39
    2576:	3a ad       	ldd	r19, Y+58	; 0x3a
    2578:	4b ad       	ldd	r20, Y+59	; 0x3b
    257a:	5c ad       	ldd	r21, Y+60	; 0x3c
    257c:	6d ad       	ldd	r22, Y+61	; 0x3d
    257e:	7e ad       	ldd	r23, Y+62	; 0x3e
    2580:	8f ad       	ldd	r24, Y+63	; 0x3f
    2582:	21 96       	adiw	r28, 0x01	; 1
    2584:	9f ad       	ldd	r25, Y+63	; 0x3f
    2586:	21 97       	sbiw	r28, 0x01	; 1
    2588:	17 d4       	rcall	.+2094   	; 0x2db8 <SendandVerify>
    258a:	22 96       	adiw	r28, 0x02	; 2
    258c:	2f ad       	ldd	r18, Y+63	; 0x3f
    258e:	22 97       	sbiw	r28, 0x02	; 2
    2590:	23 96       	adiw	r28, 0x03	; 3
    2592:	3f ad       	ldd	r19, Y+63	; 0x3f
    2594:	23 97       	sbiw	r28, 0x03	; 3
    2596:	24 96       	adiw	r28, 0x04	; 4
    2598:	4f ad       	ldd	r20, Y+63	; 0x3f
    259a:	24 97       	sbiw	r28, 0x04	; 4
    259c:	25 96       	adiw	r28, 0x05	; 5
    259e:	5f ad       	ldd	r21, Y+63	; 0x3f
    25a0:	25 97       	sbiw	r28, 0x05	; 5
    25a2:	26 96       	adiw	r28, 0x06	; 6
    25a4:	6f ad       	ldd	r22, Y+63	; 0x3f
    25a6:	26 97       	sbiw	r28, 0x06	; 6
    25a8:	27 96       	adiw	r28, 0x07	; 7
    25aa:	7f ad       	ldd	r23, Y+63	; 0x3f
    25ac:	27 97       	sbiw	r28, 0x07	; 7
    25ae:	28 96       	adiw	r28, 0x08	; 8
    25b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    25b2:	28 97       	sbiw	r28, 0x08	; 8
    25b4:	29 96       	adiw	r28, 0x09	; 9
    25b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    25b8:	29 97       	sbiw	r28, 0x09	; 9
    25ba:	fe d3       	rcall	.+2044   	; 0x2db8 <SendandVerify>
    25bc:	2a 96       	adiw	r28, 0x0a	; 10
    25be:	2f ad       	ldd	r18, Y+63	; 0x3f
    25c0:	2a 97       	sbiw	r28, 0x0a	; 10
    25c2:	2b 96       	adiw	r28, 0x0b	; 11
    25c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    25c6:	2b 97       	sbiw	r28, 0x0b	; 11
    25c8:	2c 96       	adiw	r28, 0x0c	; 12
    25ca:	4f ad       	ldd	r20, Y+63	; 0x3f
    25cc:	2c 97       	sbiw	r28, 0x0c	; 12
    25ce:	2d 96       	adiw	r28, 0x0d	; 13
    25d0:	5f ad       	ldd	r21, Y+63	; 0x3f
    25d2:	2d 97       	sbiw	r28, 0x0d	; 13
    25d4:	2e 96       	adiw	r28, 0x0e	; 14
    25d6:	6f ad       	ldd	r22, Y+63	; 0x3f
    25d8:	2e 97       	sbiw	r28, 0x0e	; 14
    25da:	2f 96       	adiw	r28, 0x0f	; 15
    25dc:	7f ad       	ldd	r23, Y+63	; 0x3f
    25de:	2f 97       	sbiw	r28, 0x0f	; 15
    25e0:	60 96       	adiw	r28, 0x10	; 16
    25e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    25e4:	60 97       	sbiw	r28, 0x10	; 16
    25e6:	61 96       	adiw	r28, 0x11	; 17
    25e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    25ea:	61 97       	sbiw	r28, 0x11	; 17
    25ec:	e5 d3       	rcall	.+1994   	; 0x2db8 <SendandVerify>
    25ee:	62 96       	adiw	r28, 0x12	; 18
    25f0:	2f ad       	ldd	r18, Y+63	; 0x3f
    25f2:	62 97       	sbiw	r28, 0x12	; 18
    25f4:	63 96       	adiw	r28, 0x13	; 19
    25f6:	3f ad       	ldd	r19, Y+63	; 0x3f
    25f8:	63 97       	sbiw	r28, 0x13	; 19
    25fa:	64 96       	adiw	r28, 0x14	; 20
    25fc:	4f ad       	ldd	r20, Y+63	; 0x3f
    25fe:	64 97       	sbiw	r28, 0x14	; 20
    2600:	65 96       	adiw	r28, 0x15	; 21
    2602:	5f ad       	ldd	r21, Y+63	; 0x3f
    2604:	65 97       	sbiw	r28, 0x15	; 21
    2606:	66 96       	adiw	r28, 0x16	; 22
    2608:	6f ad       	ldd	r22, Y+63	; 0x3f
    260a:	66 97       	sbiw	r28, 0x16	; 22
    260c:	67 96       	adiw	r28, 0x17	; 23
    260e:	7f ad       	ldd	r23, Y+63	; 0x3f
    2610:	67 97       	sbiw	r28, 0x17	; 23
    2612:	68 96       	adiw	r28, 0x18	; 24
    2614:	8f ad       	ldd	r24, Y+63	; 0x3f
    2616:	68 97       	sbiw	r28, 0x18	; 24
    2618:	69 96       	adiw	r28, 0x19	; 25
    261a:	9f ad       	ldd	r25, Y+63	; 0x3f
    261c:	69 97       	sbiw	r28, 0x19	; 25
    261e:	cc d3       	rcall	.+1944   	; 0x2db8 <SendandVerify>
    2620:	29 8d       	ldd	r18, Y+25	; 0x19
    2622:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2624:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2626:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2628:	6d 8d       	ldd	r22, Y+29	; 0x1d
    262a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    262c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    262e:	98 a1       	ldd	r25, Y+32	; 0x20
    2630:	c3 d3       	rcall	.+1926   	; 0x2db8 <SendandVerify>
    2632:	6a 96       	adiw	r28, 0x1a	; 26
    2634:	2f ad       	ldd	r18, Y+63	; 0x3f
    2636:	6a 97       	sbiw	r28, 0x1a	; 26
    2638:	6b 96       	adiw	r28, 0x1b	; 27
    263a:	3f ad       	ldd	r19, Y+63	; 0x3f
    263c:	6b 97       	sbiw	r28, 0x1b	; 27
    263e:	6c 96       	adiw	r28, 0x1c	; 28
    2640:	4f ad       	ldd	r20, Y+63	; 0x3f
    2642:	6c 97       	sbiw	r28, 0x1c	; 28
    2644:	6d 96       	adiw	r28, 0x1d	; 29
    2646:	5f ad       	ldd	r21, Y+63	; 0x3f
    2648:	6d 97       	sbiw	r28, 0x1d	; 29
    264a:	6e 96       	adiw	r28, 0x1e	; 30
    264c:	6f ad       	ldd	r22, Y+63	; 0x3f
    264e:	6e 97       	sbiw	r28, 0x1e	; 30
    2650:	6f 96       	adiw	r28, 0x1f	; 31
    2652:	7f ad       	ldd	r23, Y+63	; 0x3f
    2654:	6f 97       	sbiw	r28, 0x1f	; 31
    2656:	a0 96       	adiw	r28, 0x20	; 32
    2658:	8f ad       	ldd	r24, Y+63	; 0x3f
    265a:	a0 97       	sbiw	r28, 0x20	; 32
    265c:	a1 96       	adiw	r28, 0x21	; 33
    265e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2660:	a1 97       	sbiw	r28, 0x21	; 33
    2662:	aa d3       	rcall	.+1876   	; 0x2db8 <SendandVerify>
    2664:	c8 59       	subi	r28, 0x98	; 152
    2666:	df 4f       	sbci	r29, 0xFF	; 255
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	ff 90       	pop	r15
    267c:	ef 90       	pop	r14
    267e:	08 95       	ret

00002680 <LeftMotor_VelMode>:
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	68 97       	sbiw	r28, 0x18	; 24
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	88 e0       	ldi	r24, 0x08	; 8
    269e:	ee e7       	ldi	r30, 0x7E	; 126
    26a0:	f1 e0       	ldi	r31, 0x01	; 1
    26a2:	de 01       	movw	r26, r28
    26a4:	11 96       	adiw	r26, 0x01	; 1
    26a6:	01 90       	ld	r0, Z+
    26a8:	0d 92       	st	X+, r0
    26aa:	8a 95       	dec	r24
    26ac:	e1 f7       	brne	.-8      	; 0x26a6 <LeftMotor_VelMode+0x26>
    26ae:	88 e0       	ldi	r24, 0x08	; 8
    26b0:	e6 e8       	ldi	r30, 0x86	; 134
    26b2:	f1 e0       	ldi	r31, 0x01	; 1
    26b4:	de 01       	movw	r26, r28
    26b6:	19 96       	adiw	r26, 0x09	; 9
    26b8:	01 90       	ld	r0, Z+
    26ba:	0d 92       	st	X+, r0
    26bc:	8a 95       	dec	r24
    26be:	e1 f7       	brne	.-8      	; 0x26b8 <LeftMotor_VelMode+0x38>
    26c0:	88 e0       	ldi	r24, 0x08	; 8
    26c2:	ee e8       	ldi	r30, 0x8E	; 142
    26c4:	f1 e0       	ldi	r31, 0x01	; 1
    26c6:	de 01       	movw	r26, r28
    26c8:	51 96       	adiw	r26, 0x11	; 17
    26ca:	01 90       	ld	r0, Z+
    26cc:	0d 92       	st	X+, r0
    26ce:	8a 95       	dec	r24
    26d0:	e1 f7       	brne	.-8      	; 0x26ca <LeftMotor_VelMode+0x4a>
    26d2:	0f 2e       	mov	r0, r31
    26d4:	f7 e0       	ldi	r31, 0x07	; 7
    26d6:	ef 2e       	mov	r14, r31
    26d8:	f1 2c       	mov	r15, r1
    26da:	f0 2d       	mov	r31, r0
    26dc:	09 e6       	ldi	r16, 0x69	; 105
    26de:	1d e0       	ldi	r17, 0x0D	; 13
    26e0:	29 81       	ldd	r18, Y+1	; 0x01
    26e2:	3a 81       	ldd	r19, Y+2	; 0x02
    26e4:	4b 81       	ldd	r20, Y+3	; 0x03
    26e6:	5c 81       	ldd	r21, Y+4	; 0x04
    26e8:	6d 81       	ldd	r22, Y+5	; 0x05
    26ea:	7e 81       	ldd	r23, Y+6	; 0x06
    26ec:	8f 81       	ldd	r24, Y+7	; 0x07
    26ee:	98 85       	ldd	r25, Y+8	; 0x08
    26f0:	63 d3       	rcall	.+1734   	; 0x2db8 <SendandVerify>
    26f2:	29 85       	ldd	r18, Y+9	; 0x09
    26f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    26f6:	4b 85       	ldd	r20, Y+11	; 0x0b
    26f8:	5c 85       	ldd	r21, Y+12	; 0x0c
    26fa:	6d 85       	ldd	r22, Y+13	; 0x0d
    26fc:	7e 85       	ldd	r23, Y+14	; 0x0e
    26fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2700:	98 89       	ldd	r25, Y+16	; 0x10
    2702:	5a d3       	rcall	.+1716   	; 0x2db8 <SendandVerify>
    2704:	29 89       	ldd	r18, Y+17	; 0x11
    2706:	3a 89       	ldd	r19, Y+18	; 0x12
    2708:	4b 89       	ldd	r20, Y+19	; 0x13
    270a:	5c 89       	ldd	r21, Y+20	; 0x14
    270c:	6d 89       	ldd	r22, Y+21	; 0x15
    270e:	7e 89       	ldd	r23, Y+22	; 0x16
    2710:	8f 89       	ldd	r24, Y+23	; 0x17
    2712:	98 8d       	ldd	r25, Y+24	; 0x18
    2714:	51 d3       	rcall	.+1698   	; 0x2db8 <SendandVerify>
    2716:	68 96       	adiw	r28, 0x18	; 24
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	1f 91       	pop	r17
    2728:	0f 91       	pop	r16
    272a:	ff 90       	pop	r15
    272c:	ef 90       	pop	r14
    272e:	08 95       	ret

00002730 <LeftMotor_SetVel>:
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	28 97       	sbiw	r28, 0x08	; 8
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	81 37       	cpi	r24, 0x71	; 113
    274e:	27 e1       	ldi	r18, 0x17	; 23
    2750:	92 07       	cpc	r25, r18
    2752:	14 f0       	brlt	.+4      	; 0x2758 <LeftMotor_SetVel+0x28>
    2754:	80 e7       	ldi	r24, 0x70	; 112
    2756:	97 e1       	ldi	r25, 0x17	; 23
    2758:	2d e7       	ldi	r18, 0x7D	; 125
    275a:	29 83       	std	Y+1, r18	; 0x01
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	33 e3       	ldi	r19, 0x33	; 51
    2760:	3b 83       	std	Y+3, r19	; 0x03
    2762:	2a 83       	std	Y+2, r18	; 0x02
    2764:	1c 82       	std	Y+4, r1	; 0x04
    2766:	80 39       	cpi	r24, 0x90	; 144
    2768:	28 ee       	ldi	r18, 0xE8	; 232
    276a:	92 07       	cpc	r25, r18
    276c:	14 f4       	brge	.+4      	; 0x2772 <LeftMotor_SetVel+0x42>
    276e:	80 e9       	ldi	r24, 0x90	; 144
    2770:	98 ee       	ldi	r25, 0xE8	; 232
    2772:	09 2e       	mov	r0, r25
    2774:	00 0c       	add	r0, r0
    2776:	aa 0b       	sbc	r26, r26
    2778:	bb 0b       	sbc	r27, r27
    277a:	68 2f       	mov	r22, r24
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	af 83       	std	Y+7, r26	; 0x07
    2782:	b8 87       	std	Y+8, r27	; 0x08
    2784:	0f 2e       	mov	r0, r31
    2786:	f7 e0       	ldi	r31, 0x07	; 7
    2788:	ef 2e       	mov	r14, r31
    278a:	f1 2c       	mov	r15, r1
    278c:	f0 2d       	mov	r31, r0
    278e:	09 e6       	ldi	r16, 0x69	; 105
    2790:	1d e0       	ldi	r17, 0x0D	; 13
    2792:	29 81       	ldd	r18, Y+1	; 0x01
    2794:	3a 81       	ldd	r19, Y+2	; 0x02
    2796:	4b 81       	ldd	r20, Y+3	; 0x03
    2798:	5c 81       	ldd	r21, Y+4	; 0x04
    279a:	7e 81       	ldd	r23, Y+6	; 0x06
    279c:	8f 81       	ldd	r24, Y+7	; 0x07
    279e:	98 85       	ldd	r25, Y+8	; 0x08
    27a0:	0b d3       	rcall	.+1558   	; 0x2db8 <SendandVerify>
    27a2:	28 96       	adiw	r28, 0x08	; 8
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	1f 91       	pop	r17
    27b4:	0f 91       	pop	r16
    27b6:	ff 90       	pop	r15
    27b8:	ef 90       	pop	r14
    27ba:	08 95       	ret

000027bc <LeftMotor_SetVelNoCommsSafety>:
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	60 97       	sbiw	r28, 0x10	; 16
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	81 37       	cpi	r24, 0x71	; 113
    27d2:	27 e1       	ldi	r18, 0x17	; 23
    27d4:	92 07       	cpc	r25, r18
    27d6:	14 f0       	brlt	.+4      	; 0x27dc <LeftMotor_SetVelNoCommsSafety+0x20>
    27d8:	80 e7       	ldi	r24, 0x70	; 112
    27da:	97 e1       	ldi	r25, 0x17	; 23
    27dc:	2d e7       	ldi	r18, 0x7D	; 125
    27de:	29 87       	std	Y+9, r18	; 0x09
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	33 e3       	ldi	r19, 0x33	; 51
    27e4:	3b 87       	std	Y+11, r19	; 0x0b
    27e6:	2a 87       	std	Y+10, r18	; 0x0a
    27e8:	1c 86       	std	Y+12, r1	; 0x0c
    27ea:	80 39       	cpi	r24, 0x90	; 144
    27ec:	28 ee       	ldi	r18, 0xE8	; 232
    27ee:	92 07       	cpc	r25, r18
    27f0:	14 f4       	brge	.+4      	; 0x27f6 <LeftMotor_SetVelNoCommsSafety+0x3a>
    27f2:	80 e9       	ldi	r24, 0x90	; 144
    27f4:	98 ee       	ldi	r25, 0xE8	; 232
    27f6:	09 2e       	mov	r0, r25
    27f8:	00 0c       	add	r0, r0
    27fa:	aa 0b       	sbc	r26, r26
    27fc:	bb 0b       	sbc	r27, r27
    27fe:	8d 87       	std	Y+13, r24	; 0x0d
    2800:	9e 87       	std	Y+14, r25	; 0x0e
    2802:	af 87       	std	Y+15, r26	; 0x0f
    2804:	b8 8b       	std	Y+16, r27	; 0x10
    2806:	07 c0       	rjmp	.+14     	; 0x2816 <LeftMotor_SetVelNoCommsSafety+0x5a>
    2808:	be 01       	movw	r22, r28
    280a:	6f 5f       	subi	r22, 0xFF	; 255
    280c:	7f 4f       	sbci	r23, 0xFF	; 255
    280e:	89 e6       	ldi	r24, 0x69	; 105
    2810:	9d e0       	ldi	r25, 0x0D	; 13
    2812:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <cb_pop_front>
    2816:	89 e6       	ldi	r24, 0x69	; 105
    2818:	9d e0       	ldi	r25, 0x0D	; 13
    281a:	0e 94 1b 01 	call	0x236	; 0x236 <cb_size>
    281e:	18 16       	cp	r1, r24
    2820:	19 06       	cpc	r1, r25
    2822:	94 f3       	brlt	.-28     	; 0x2808 <LeftMotor_SetVelNoCommsSafety+0x4c>
    2824:	29 85       	ldd	r18, Y+9	; 0x09
    2826:	3a 85       	ldd	r19, Y+10	; 0x0a
    2828:	4b 85       	ldd	r20, Y+11	; 0x0b
    282a:	5c 85       	ldd	r21, Y+12	; 0x0c
    282c:	6d 85       	ldd	r22, Y+13	; 0x0d
    282e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2830:	8f 85       	ldd	r24, Y+15	; 0x0f
    2832:	98 89       	ldd	r25, Y+16	; 0x10
    2834:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <SDOWritePacket>
    2838:	88 23       	and	r24, r24
    283a:	a1 f3       	breq	.-24     	; 0x2824 <LeftMotor_SetVelNoCommsSafety+0x68>
    283c:	60 96       	adiw	r28, 0x10	; 16
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	08 95       	ret

0000284e <LeftMotor_GetPosReached>:

bool LeftMotor_GetPosReached()
{
    284e:	cf 92       	push	r12
    2850:	df 92       	push	r13
    2852:	ef 92       	push	r14
    2854:	ff 92       	push	r15
    2856:	0f 93       	push	r16
    2858:	1f 93       	push	r17
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	60 97       	sbiw	r28, 0x10	; 16
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	f8 94       	cli
    2868:	de bf       	out	0x3e, r29	; 62
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	cd bf       	out	0x3d, r28	; 61
	char temp[8];
	SDO_packet ReadPositionReached ={LEFTMOTORID, 0x3002, 0x00, 0x00};// {RIGHTMOTORID, 0x396A, 0x00, 0x00};
    286e:	88 e0       	ldi	r24, 0x08	; 8
    2870:	ee ea       	ldi	r30, 0xAE	; 174
    2872:	f1 e0       	ldi	r31, 0x01	; 1
    2874:	de 01       	movw	r26, r28
    2876:	19 96       	adiw	r26, 0x09	; 9
    2878:	01 90       	ld	r0, Z+
    287a:	0d 92       	st	X+, r0
    287c:	8a 95       	dec	r24
    287e:	e1 f7       	brne	.-8      	; 0x2878 <LeftMotor_GetPosReached+0x2a>

	if(ReadandVerify(ReadPositionReached, &LeftMotor_Buffer, LEFTMOTOR_STATUS, temp))
    2880:	ce 01       	movw	r24, r28
    2882:	01 96       	adiw	r24, 0x01	; 1
    2884:	6c 01       	movw	r12, r24
    2886:	0f 2e       	mov	r0, r31
    2888:	f7 e0       	ldi	r31, 0x07	; 7
    288a:	ef 2e       	mov	r14, r31
    288c:	f1 2c       	mov	r15, r1
    288e:	f0 2d       	mov	r31, r0
    2890:	09 e6       	ldi	r16, 0x69	; 105
    2892:	1d e0       	ldi	r17, 0x0D	; 13
    2894:	29 85       	ldd	r18, Y+9	; 0x09
    2896:	3a 85       	ldd	r19, Y+10	; 0x0a
    2898:	4b 85       	ldd	r20, Y+11	; 0x0b
    289a:	5c 85       	ldd	r21, Y+12	; 0x0c
    289c:	6d 85       	ldd	r22, Y+13	; 0x0d
    289e:	7e 85       	ldd	r23, Y+14	; 0x0e
    28a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a2:	98 89       	ldd	r25, Y+16	; 0x10
    28a4:	18 d3       	rcall	.+1584   	; 0x2ed6 <ReadandVerify>
    28a6:	88 23       	and	r24, r24
    28a8:	21 f0       	breq	.+8      	; 0x28b2 <LeftMotor_GetPosReached+0x64>
	{
		//long result = ArrayToLong(temp);
		return (temp[4]&0x10); //returns position Reached
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	82 95       	swap	r24
    28ae:	81 70       	andi	r24, 0x01	; 1
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <LeftMotor_GetPosReached+0x66>
	}
	else
	{
		return 0;
    28b2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    28b4:	60 96       	adiw	r28, 0x10	; 16
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	ff 90       	pop	r15
    28ca:	ef 90       	pop	r14
    28cc:	df 90       	pop	r13
    28ce:	cf 90       	pop	r12
    28d0:	08 95       	ret

000028d2 <initMotors>:
}

void initMotors(void)
{
	#ifdef RIGHT_MOTOR_USING_CAN
	 	RightMotor_Init();
    28d2:	be d7       	rcall	.+3964   	; 0x3850 <RightMotor_Init>
	 	RightMotor_VelMode();
    28d4:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <RightMotor_VelMode>
		RightMotor_SetVel(0);
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <RightMotor_SetVel>
		ToSendCAN(MOTOR_VELOCITY_DATA_ADDRESS, 0);												//Works
		sendDataCAN(RightBumperAddress);
	#endif
	
	#ifdef LEFT_MOTOR_USING_CAN
		LeftMotor_Init();
    28e0:	50 dd       	rcall	.-1376   	; 0x2382 <LeftMotor_Init>
		LeftMotor_VelMode();
    28e2:	ce de       	rcall	.-612    	; 0x2680 <LeftMotor_VelMode>
		LeftMotor_SetVel(0);
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	23 df       	rcall	.-442    	; 0x2730 <LeftMotor_SetVel>
		sendDataCAN(LeftBumperAddress);
	#endif

	
	#ifndef DISABLE_CONVEYOR_MOTOR
		ConveyorMotor_Init();
    28ea:	8f d3       	rcall	.+1822   	; 0x300a <ConveyorMotor_Init>
		ConveyorMotor_VelMode();
    28ec:	b9 d5       	rcall	.+2930   	; 0x3460 <ConveyorMotor_VelMode>
	#endif
	
	#ifndef DISABLE_BUCKET_MOTOR
		BucketMotor_Init();
    28ee:	a3 d4       	rcall	.+2374   	; 0x3236 <BucketMotor_Init>
		BucketMotor_VelMode();
    28f0:	0f d6       	rcall	.+3102   	; 0x3510 <BucketMotor_VelMode>
		BucketMotor_SetLimit();
    28f2:	4f c7       	rjmp	.+3742   	; 0x3792 <BucketMotor_SetLimit>
    28f4:	08 95       	ret

000028f6 <sendMotorMoveCommandLeft>:
}



void sendMotorMoveCommandLeft(long distance)
{
    28f6:	af 92       	push	r10
    28f8:	bf 92       	push	r11
    28fa:	cf 92       	push	r12
    28fc:	df 92       	push	r13
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	e0 97       	sbiw	r28, 0x30	; 48
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	d6 2e       	mov	r13, r22
    291c:	a7 2e       	mov	r10, r23
    291e:	b8 2e       	mov	r11, r24
    2920:	c9 2e       	mov	r12, r25
	SDO_packet ClearErrorsL			= {LEFTMOTORID, 0x3000, 0x00, 0x01};
    2922:	28 e0       	ldi	r18, 0x08	; 8
    2924:	ee ed       	ldi	r30, 0xDE	; 222
    2926:	f1 e0       	ldi	r31, 0x01	; 1
    2928:	de 01       	movw	r26, r28
    292a:	11 96       	adiw	r26, 0x01	; 1
    292c:	01 90       	ld	r0, Z+
    292e:	0d 92       	st	X+, r0
    2930:	2a 95       	dec	r18
    2932:	e1 f7       	brne	.-8      	; 0x292c <sendMotorMoveCommandLeft+0x36>
	SDO_packet ModePosL				= {LEFTMOTORID,	0x3003, 0x00, 0x7};
    2934:	28 e0       	ldi	r18, 0x08	; 8
    2936:	e6 ee       	ldi	r30, 0xE6	; 230
    2938:	f1 e0       	ldi	r31, 0x01	; 1
    293a:	de 01       	movw	r26, r28
    293c:	19 96       	adiw	r26, 0x09	; 9
    293e:	01 90       	ld	r0, Z+
    2940:	0d 92       	st	X+, r0
    2942:	2a 95       	dec	r18
    2944:	e1 f7       	brne	.-8      	; 0x293e <sendMotorMoveCommandLeft+0x48>
	SDO_packet SetPositionWindowL	= {LEFTMOTORID,	0x373A, 0x00, 1000};
    2946:	28 e0       	ldi	r18, 0x08	; 8
    2948:	ee ee       	ldi	r30, 0xEE	; 238
    294a:	f1 e0       	ldi	r31, 0x01	; 1
    294c:	de 01       	movw	r26, r28
    294e:	51 96       	adiw	r26, 0x11	; 17
    2950:	01 90       	ld	r0, Z+
    2952:	0d 92       	st	X+, r0
    2954:	2a 95       	dec	r18
    2956:	e1 f7       	brne	.-8      	; 0x2950 <sendMotorMoveCommandLeft+0x5a>
	SDO_packet DesiredVelocityL		= {LEFTMOTORID,	0x3300, 0x0,  4000};
    2958:	28 e0       	ldi	r18, 0x08	; 8
    295a:	e6 ef       	ldi	r30, 0xF6	; 246
    295c:	f1 e0       	ldi	r31, 0x01	; 1
    295e:	de 01       	movw	r26, r28
    2960:	59 96       	adiw	r26, 0x19	; 25
    2962:	01 90       	ld	r0, Z+
    2964:	0d 92       	st	X+, r0
    2966:	2a 95       	dec	r18
    2968:	e1 f7       	brne	.-8      	; 0x2962 <sendMotorMoveCommandLeft+0x6c>
	SDO_packet ResetPositionL		= {LEFTMOTORID,	0x3762, 0x00, 0x00};
    296a:	28 e0       	ldi	r18, 0x08	; 8
    296c:	ee ef       	ldi	r30, 0xFE	; 254
    296e:	f1 e0       	ldi	r31, 0x01	; 1
    2970:	de 01       	movw	r26, r28
    2972:	91 96       	adiw	r26, 0x21	; 33
    2974:	01 90       	ld	r0, Z+
    2976:	0d 92       	st	X+, r0
    2978:	2a 95       	dec	r18
    297a:	e1 f7       	brne	.-8      	; 0x2974 <sendMotorMoveCommandLeft+0x7e>
	
	SendandVerify(ClearErrorsL,			&LeftMotor_Buffer, LEFTMOTOR_STATUS);
    297c:	0f 2e       	mov	r0, r31
    297e:	f7 e0       	ldi	r31, 0x07	; 7
    2980:	ef 2e       	mov	r14, r31
    2982:	f1 2c       	mov	r15, r1
    2984:	f0 2d       	mov	r31, r0
    2986:	09 e6       	ldi	r16, 0x69	; 105
    2988:	1d e0       	ldi	r17, 0x0D	; 13
    298a:	29 81       	ldd	r18, Y+1	; 0x01
    298c:	3a 81       	ldd	r19, Y+2	; 0x02
    298e:	4b 81       	ldd	r20, Y+3	; 0x03
    2990:	5c 81       	ldd	r21, Y+4	; 0x04
    2992:	6d 81       	ldd	r22, Y+5	; 0x05
    2994:	7e 81       	ldd	r23, Y+6	; 0x06
    2996:	8f 81       	ldd	r24, Y+7	; 0x07
    2998:	98 85       	ldd	r25, Y+8	; 0x08
    299a:	0e d2       	rcall	.+1052   	; 0x2db8 <SendandVerify>
	SendandVerify(SetPositionWindowL,	&LeftMotor_Buffer, LEFTMOTOR_STATUS);
    299c:	29 89       	ldd	r18, Y+17	; 0x11
    299e:	3a 89       	ldd	r19, Y+18	; 0x12
    29a0:	4b 89       	ldd	r20, Y+19	; 0x13
    29a2:	5c 89       	ldd	r21, Y+20	; 0x14
    29a4:	6d 89       	ldd	r22, Y+21	; 0x15
    29a6:	7e 89       	ldd	r23, Y+22	; 0x16
    29a8:	8f 89       	ldd	r24, Y+23	; 0x17
    29aa:	98 8d       	ldd	r25, Y+24	; 0x18
    29ac:	05 d2       	rcall	.+1034   	; 0x2db8 <SendandVerify>
	SendandVerify(ResetPositionL,		&LeftMotor_Buffer, LEFTMOTOR_STATUS);
    29ae:	29 a1       	ldd	r18, Y+33	; 0x21
    29b0:	3a a1       	ldd	r19, Y+34	; 0x22
    29b2:	4b a1       	ldd	r20, Y+35	; 0x23
    29b4:	5c a1       	ldd	r21, Y+36	; 0x24
    29b6:	6d a1       	ldd	r22, Y+37	; 0x25
    29b8:	7e a1       	ldd	r23, Y+38	; 0x26
    29ba:	8f a1       	ldd	r24, Y+39	; 0x27
    29bc:	98 a5       	ldd	r25, Y+40	; 0x28
    29be:	fc d1       	rcall	.+1016   	; 0x2db8 <SendandVerify>
	SendandVerify(ModePosL,				&LeftMotor_Buffer, LEFTMOTOR_STATUS);
    29c0:	29 85       	ldd	r18, Y+9	; 0x09
    29c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    29c4:	4b 85       	ldd	r20, Y+11	; 0x0b
    29c6:	5c 85       	ldd	r21, Y+12	; 0x0c
    29c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    29ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    29cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ce:	98 89       	ldd	r25, Y+16	; 0x10
    29d0:	f3 d1       	rcall	.+998    	; 0x2db8 <SendandVerify>
	SendandVerify(DesiredVelocityL,		&LeftMotor_Buffer, LEFTMOTOR_STATUS);
    29d2:	29 8d       	ldd	r18, Y+25	; 0x19
    29d4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    29d6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    29d8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    29da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    29dc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    29de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29e0:	98 a1       	ldd	r25, Y+32	; 0x20
    29e2:	ea d1       	rcall	.+980    	; 0x2db8 <SendandVerify>
	
	//-------Send the motor a position step instruction-----------------------
	SDO_packet MoveL = {LEFTMOTORID, 0x3790, 0x00, distance};
    29e4:	20 e9       	ldi	r18, 0x90	; 144
    29e6:	32 2f       	mov	r19, r18
    29e8:	6d 2d       	mov	r22, r13
	SendandVerify(MoveL,  &LeftMotor_Buffer, LEFTMOTOR_STATUS);
    29ea:	2d e7       	ldi	r18, 0x7D	; 125
    29ec:	47 e3       	ldi	r20, 0x37	; 55
    29ee:	50 e0       	ldi	r21, 0x00	; 0
    29f0:	7a 2d       	mov	r23, r10
    29f2:	8b 2d       	mov	r24, r11
    29f4:	9c 2d       	mov	r25, r12
    29f6:	e0 d1       	rcall	.+960    	; 0x2db8 <SendandVerify>
}
    29f8:	e0 96       	adiw	r28, 0x30	; 48
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	df 90       	pop	r13
    2a12:	cf 90       	pop	r12
    2a14:	bf 90       	pop	r11
    2a16:	af 90       	pop	r10
    2a18:	08 95       	ret

00002a1a <sendMotorMoveCommandRight>:

void sendMotorMoveCommandRight(long distance)
{
    2a1a:	8f 92       	push	r8
    2a1c:	9f 92       	push	r9
    2a1e:	af 92       	push	r10
    2a20:	bf 92       	push	r11
    2a22:	ef 92       	push	r14
    2a24:	ff 92       	push	r15
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	e0 97       	sbiw	r28, 0x30	; 48
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	4b 01       	movw	r8, r22
    2a40:	5c 01       	movw	r10, r24
	// --------------set motor configurations to be in position mode -----------
	SDO_packet ClearErrorsR			= {RIGHTMOTORID,	0x3000, 0x00, 0x01};
    2a42:	88 e0       	ldi	r24, 0x08	; 8
    2a44:	e6 e0       	ldi	r30, 0x06	; 6
    2a46:	f2 e0       	ldi	r31, 0x02	; 2
    2a48:	de 01       	movw	r26, r28
    2a4a:	11 96       	adiw	r26, 0x01	; 1
    2a4c:	01 90       	ld	r0, Z+
    2a4e:	0d 92       	st	X+, r0
    2a50:	8a 95       	dec	r24
    2a52:	e1 f7       	brne	.-8      	; 0x2a4c <sendMotorMoveCommandRight+0x32>
	SDO_packet ModePosR				= {RIGHTMOTORID,	0x3003, 0x00, 0x7};
    2a54:	88 e0       	ldi	r24, 0x08	; 8
    2a56:	ee e0       	ldi	r30, 0x0E	; 14
    2a58:	f2 e0       	ldi	r31, 0x02	; 2
    2a5a:	de 01       	movw	r26, r28
    2a5c:	19 96       	adiw	r26, 0x09	; 9
    2a5e:	01 90       	ld	r0, Z+
    2a60:	0d 92       	st	X+, r0
    2a62:	8a 95       	dec	r24
    2a64:	e1 f7       	brne	.-8      	; 0x2a5e <sendMotorMoveCommandRight+0x44>
	SDO_packet SetPositionWindowR	= {RIGHTMOTORID,	0x373A, 0x00, 1000};
    2a66:	88 e0       	ldi	r24, 0x08	; 8
    2a68:	e6 e1       	ldi	r30, 0x16	; 22
    2a6a:	f2 e0       	ldi	r31, 0x02	; 2
    2a6c:	de 01       	movw	r26, r28
    2a6e:	51 96       	adiw	r26, 0x11	; 17
    2a70:	01 90       	ld	r0, Z+
    2a72:	0d 92       	st	X+, r0
    2a74:	8a 95       	dec	r24
    2a76:	e1 f7       	brne	.-8      	; 0x2a70 <sendMotorMoveCommandRight+0x56>
	SDO_packet DesiredVelocityR		= {RIGHTMOTORID,	0x3300, 0x0,  4000};
    2a78:	88 e0       	ldi	r24, 0x08	; 8
    2a7a:	ee e1       	ldi	r30, 0x1E	; 30
    2a7c:	f2 e0       	ldi	r31, 0x02	; 2
    2a7e:	de 01       	movw	r26, r28
    2a80:	59 96       	adiw	r26, 0x19	; 25
    2a82:	01 90       	ld	r0, Z+
    2a84:	0d 92       	st	X+, r0
    2a86:	8a 95       	dec	r24
    2a88:	e1 f7       	brne	.-8      	; 0x2a82 <sendMotorMoveCommandRight+0x68>
	SDO_packet ResetPositionR		= {RIGHTMOTORID,	0x3762, 0x00, 0x00};
    2a8a:	88 e0       	ldi	r24, 0x08	; 8
    2a8c:	e6 e2       	ldi	r30, 0x26	; 38
    2a8e:	f2 e0       	ldi	r31, 0x02	; 2
    2a90:	de 01       	movw	r26, r28
    2a92:	91 96       	adiw	r26, 0x21	; 33
    2a94:	01 90       	ld	r0, Z+
    2a96:	0d 92       	st	X+, r0
    2a98:	8a 95       	dec	r24
    2a9a:	e1 f7       	brne	.-8      	; 0x2a94 <sendMotorMoveCommandRight+0x7a>
	
	SendandVerify(ClearErrorsR,			&RightMotor_Buffer, RIGHTMOTOR_STATUS);
    2a9c:	0f 2e       	mov	r0, r31
    2a9e:	f6 e0       	ldi	r31, 0x06	; 6
    2aa0:	ef 2e       	mov	r14, r31
    2aa2:	f1 2c       	mov	r15, r1
    2aa4:	f0 2d       	mov	r31, r0
    2aa6:	0b e0       	ldi	r16, 0x0B	; 11
    2aa8:	1c e0       	ldi	r17, 0x0C	; 12
    2aaa:	29 81       	ldd	r18, Y+1	; 0x01
    2aac:	3a 81       	ldd	r19, Y+2	; 0x02
    2aae:	4b 81       	ldd	r20, Y+3	; 0x03
    2ab0:	5c 81       	ldd	r21, Y+4	; 0x04
    2ab2:	6d 81       	ldd	r22, Y+5	; 0x05
    2ab4:	7e 81       	ldd	r23, Y+6	; 0x06
    2ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab8:	98 85       	ldd	r25, Y+8	; 0x08
    2aba:	7e d1       	rcall	.+764    	; 0x2db8 <SendandVerify>
	SendandVerify(SetPositionWindowR,	&RightMotor_Buffer, RIGHTMOTOR_STATUS);
    2abc:	29 89       	ldd	r18, Y+17	; 0x11
    2abe:	3a 89       	ldd	r19, Y+18	; 0x12
    2ac0:	4b 89       	ldd	r20, Y+19	; 0x13
    2ac2:	5c 89       	ldd	r21, Y+20	; 0x14
    2ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aca:	98 8d       	ldd	r25, Y+24	; 0x18
    2acc:	75 d1       	rcall	.+746    	; 0x2db8 <SendandVerify>
	SendandVerify(ResetPositionR,		&RightMotor_Buffer, RIGHTMOTOR_STATUS);
    2ace:	29 a1       	ldd	r18, Y+33	; 0x21
    2ad0:	3a a1       	ldd	r19, Y+34	; 0x22
    2ad2:	4b a1       	ldd	r20, Y+35	; 0x23
    2ad4:	5c a1       	ldd	r21, Y+36	; 0x24
    2ad6:	6d a1       	ldd	r22, Y+37	; 0x25
    2ad8:	7e a1       	ldd	r23, Y+38	; 0x26
    2ada:	8f a1       	ldd	r24, Y+39	; 0x27
    2adc:	98 a5       	ldd	r25, Y+40	; 0x28
    2ade:	6c d1       	rcall	.+728    	; 0x2db8 <SendandVerify>
	SendandVerify(ModePosR,				&RightMotor_Buffer, RIGHTMOTOR_STATUS);
    2ae0:	29 85       	ldd	r18, Y+9	; 0x09
    2ae2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ae4:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ae6:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ae8:	6d 85       	ldd	r22, Y+13	; 0x0d
    2aea:	7e 85       	ldd	r23, Y+14	; 0x0e
    2aec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aee:	98 89       	ldd	r25, Y+16	; 0x10
    2af0:	63 d1       	rcall	.+710    	; 0x2db8 <SendandVerify>
	SendandVerify(DesiredVelocityR,		&RightMotor_Buffer, RIGHTMOTOR_STATUS);
    2af2:	29 8d       	ldd	r18, Y+25	; 0x19
    2af4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2af6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2af8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2afa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2afc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2afe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b00:	98 a1       	ldd	r25, Y+32	; 0x20
    2b02:	5a d1       	rcall	.+692    	; 0x2db8 <SendandVerify>
	
	
	SDO_packet MoveR = {RIGHTMOTORID, 0x3790, 0x00, -distance};
    2b04:	80 e9       	ldi	r24, 0x90	; 144
    2b06:	38 2f       	mov	r19, r24
    2b08:	88 27       	eor	r24, r24
    2b0a:	99 27       	eor	r25, r25
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	88 19       	sub	r24, r8
    2b10:	99 09       	sbc	r25, r9
    2b12:	aa 09       	sbc	r26, r10
    2b14:	bb 09       	sbc	r27, r11
    2b16:	68 2f       	mov	r22, r24
    2b18:	8d a7       	std	Y+45, r24	; 0x2d
    2b1a:	9e a7       	std	Y+46, r25	; 0x2e
    2b1c:	af a7       	std	Y+47, r26	; 0x2f
    2b1e:	b8 ab       	std	Y+48, r27	; 0x30
	SendandVerify(MoveR,  &RightMotor_Buffer, RIGHTMOTOR_STATUS);
    2b20:	2e e7       	ldi	r18, 0x7E	; 126
    2b22:	47 e3       	ldi	r20, 0x37	; 55
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b28:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b2a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b2c:	45 d1       	rcall	.+650    	; 0x2db8 <SendandVerify>
}
    2b2e:	e0 96       	adiw	r28, 0x30	; 48
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	df 91       	pop	r29
    2b3c:	cf 91       	pop	r28
    2b3e:	1f 91       	pop	r17
    2b40:	0f 91       	pop	r16
    2b42:	ff 90       	pop	r15
    2b44:	ef 90       	pop	r14
    2b46:	bf 90       	pop	r11
    2b48:	af 90       	pop	r10
    2b4a:	9f 90       	pop	r9
    2b4c:	8f 90       	pop	r8
    2b4e:	08 95       	ret

00002b50 <returnLeftMotorToVelocity>:

void returnLeftMotorToVelocity(void)
{
    2b50:	ef 92       	push	r14
    2b52:	ff 92       	push	r15
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	a0 97       	sbiw	r28, 0x20	; 32
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	cd bf       	out	0x3d, r28	; 61
	//When finished, set the left motor back to a velocity mode
	SDO_packet ModeVelL				= {LEFTMOTORID, 0x3003, 0x00, 0x3};
    2b6c:	88 e0       	ldi	r24, 0x08	; 8
    2b6e:	ee e2       	ldi	r30, 0x2E	; 46
    2b70:	f2 e0       	ldi	r31, 0x02	; 2
    2b72:	de 01       	movw	r26, r28
    2b74:	11 96       	adiw	r26, 0x01	; 1
    2b76:	01 90       	ld	r0, Z+
    2b78:	0d 92       	st	X+, r0
    2b7a:	8a 95       	dec	r24
    2b7c:	e1 f7       	brne	.-8      	; 0x2b76 <returnLeftMotorToVelocity+0x26>
	SDO_packet VEL_AccL				= {LEFTMOTORID, 0x3380, 0x00, ACCEL_CONST};
    2b7e:	88 e0       	ldi	r24, 0x08	; 8
    2b80:	e6 e3       	ldi	r30, 0x36	; 54
    2b82:	f2 e0       	ldi	r31, 0x02	; 2
    2b84:	de 01       	movw	r26, r28
    2b86:	19 96       	adiw	r26, 0x09	; 9
    2b88:	01 90       	ld	r0, Z+
    2b8a:	0d 92       	st	X+, r0
    2b8c:	8a 95       	dec	r24
    2b8e:	e1 f7       	brne	.-8      	; 0x2b88 <returnLeftMotorToVelocity+0x38>
	SDO_packet VEL_DecL				= {LEFTMOTORID, 0x3381, 0x00, ACCEL_CONST};
    2b90:	88 e0       	ldi	r24, 0x08	; 8
    2b92:	ee e3       	ldi	r30, 0x3E	; 62
    2b94:	f2 e0       	ldi	r31, 0x02	; 2
    2b96:	de 01       	movw	r26, r28
    2b98:	51 96       	adiw	r26, 0x11	; 17
    2b9a:	01 90       	ld	r0, Z+
    2b9c:	0d 92       	st	X+, r0
    2b9e:	8a 95       	dec	r24
    2ba0:	e1 f7       	brne	.-8      	; 0x2b9a <returnLeftMotorToVelocity+0x4a>
	SDO_packet DesiredVelocityLVel	= {LEFTMOTORID,	0x3300, 0x0,  0};
    2ba2:	88 e0       	ldi	r24, 0x08	; 8
    2ba4:	e6 e4       	ldi	r30, 0x46	; 70
    2ba6:	f2 e0       	ldi	r31, 0x02	; 2
    2ba8:	de 01       	movw	r26, r28
    2baa:	59 96       	adiw	r26, 0x19	; 25
    2bac:	01 90       	ld	r0, Z+
    2bae:	0d 92       	st	X+, r0
    2bb0:	8a 95       	dec	r24
    2bb2:	e1 f7       	brne	.-8      	; 0x2bac <returnLeftMotorToVelocity+0x5c>
	
	SendandVerify(ModeVelL,					&LeftMotor_Buffer, LEFTMOTOR_STATUS);
    2bb4:	0f 2e       	mov	r0, r31
    2bb6:	f7 e0       	ldi	r31, 0x07	; 7
    2bb8:	ef 2e       	mov	r14, r31
    2bba:	f1 2c       	mov	r15, r1
    2bbc:	f0 2d       	mov	r31, r0
    2bbe:	09 e6       	ldi	r16, 0x69	; 105
    2bc0:	1d e0       	ldi	r17, 0x0D	; 13
    2bc2:	29 81       	ldd	r18, Y+1	; 0x01
    2bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    2bc6:	4b 81       	ldd	r20, Y+3	; 0x03
    2bc8:	5c 81       	ldd	r21, Y+4	; 0x04
    2bca:	6d 81       	ldd	r22, Y+5	; 0x05
    2bcc:	7e 81       	ldd	r23, Y+6	; 0x06
    2bce:	8f 81       	ldd	r24, Y+7	; 0x07
    2bd0:	98 85       	ldd	r25, Y+8	; 0x08
    2bd2:	f2 d0       	rcall	.+484    	; 0x2db8 <SendandVerify>
	SendandVerify(VEL_AccL,					&LeftMotor_Buffer, LEFTMOTOR_STATUS);
    2bd4:	29 85       	ldd	r18, Y+9	; 0x09
    2bd6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bd8:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bda:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bdc:	6d 85       	ldd	r22, Y+13	; 0x0d
    2bde:	7e 85       	ldd	r23, Y+14	; 0x0e
    2be0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be2:	98 89       	ldd	r25, Y+16	; 0x10
    2be4:	e9 d0       	rcall	.+466    	; 0x2db8 <SendandVerify>
	SendandVerify(VEL_DecL,					&LeftMotor_Buffer, LEFTMOTOR_STATUS);
    2be6:	29 89       	ldd	r18, Y+17	; 0x11
    2be8:	3a 89       	ldd	r19, Y+18	; 0x12
    2bea:	4b 89       	ldd	r20, Y+19	; 0x13
    2bec:	5c 89       	ldd	r21, Y+20	; 0x14
    2bee:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf6:	e0 d0       	rcall	.+448    	; 0x2db8 <SendandVerify>
	SendandVerify(DesiredVelocityLVel,		&LeftMotor_Buffer, LEFTMOTOR_STATUS);
    2bf8:	29 8d       	ldd	r18, Y+25	; 0x19
    2bfa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2bfc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2bfe:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2c00:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2c02:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2c04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c06:	98 a1       	ldd	r25, Y+32	; 0x20
    2c08:	d7 d0       	rcall	.+430    	; 0x2db8 <SendandVerify>
}
    2c0a:	a0 96       	adiw	r28, 0x20	; 32
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	08 95       	ret

00002c24 <returnRightMotorToVelocity>:

void returnRightMotorToVelocity(void)
{
    2c24:	ef 92       	push	r14
    2c26:	ff 92       	push	r15
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	a0 97       	sbiw	r28, 0x20	; 32
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
	//--------When finished, set the right motor back to a velocity mode-------
	SDO_packet ModeVelR				= {RIGHTMOTORID, 0x3003, 0x00, 0x3};
    2c40:	88 e0       	ldi	r24, 0x08	; 8
    2c42:	ee e4       	ldi	r30, 0x4E	; 78
    2c44:	f2 e0       	ldi	r31, 0x02	; 2
    2c46:	de 01       	movw	r26, r28
    2c48:	11 96       	adiw	r26, 0x01	; 1
    2c4a:	01 90       	ld	r0, Z+
    2c4c:	0d 92       	st	X+, r0
    2c4e:	8a 95       	dec	r24
    2c50:	e1 f7       	brne	.-8      	; 0x2c4a <returnRightMotorToVelocity+0x26>
	SDO_packet VEL_AccR				= {RIGHTMOTORID, 0x3380, 0x00, ACCEL_CONST}; //value should be between 100k and 10k
    2c52:	88 e0       	ldi	r24, 0x08	; 8
    2c54:	e6 e5       	ldi	r30, 0x56	; 86
    2c56:	f2 e0       	ldi	r31, 0x02	; 2
    2c58:	de 01       	movw	r26, r28
    2c5a:	19 96       	adiw	r26, 0x09	; 9
    2c5c:	01 90       	ld	r0, Z+
    2c5e:	0d 92       	st	X+, r0
    2c60:	8a 95       	dec	r24
    2c62:	e1 f7       	brne	.-8      	; 0x2c5c <returnRightMotorToVelocity+0x38>
	SDO_packet VEL_DecR				= {RIGHTMOTORID, 0x3381, 0x00, ACCEL_CONST};
    2c64:	88 e0       	ldi	r24, 0x08	; 8
    2c66:	ee e5       	ldi	r30, 0x5E	; 94
    2c68:	f2 e0       	ldi	r31, 0x02	; 2
    2c6a:	de 01       	movw	r26, r28
    2c6c:	51 96       	adiw	r26, 0x11	; 17
    2c6e:	01 90       	ld	r0, Z+
    2c70:	0d 92       	st	X+, r0
    2c72:	8a 95       	dec	r24
    2c74:	e1 f7       	brne	.-8      	; 0x2c6e <returnRightMotorToVelocity+0x4a>
	SDO_packet DesiredVelocityRVel	= {RIGHTMOTORID, 0x3300, 0x0,  0};
    2c76:	88 e0       	ldi	r24, 0x08	; 8
    2c78:	e6 e6       	ldi	r30, 0x66	; 102
    2c7a:	f2 e0       	ldi	r31, 0x02	; 2
    2c7c:	de 01       	movw	r26, r28
    2c7e:	59 96       	adiw	r26, 0x19	; 25
    2c80:	01 90       	ld	r0, Z+
    2c82:	0d 92       	st	X+, r0
    2c84:	8a 95       	dec	r24
    2c86:	e1 f7       	brne	.-8      	; 0x2c80 <returnRightMotorToVelocity+0x5c>

	SendandVerify(ModeVelR,					&RightMotor_Buffer, RIGHTMOTOR_STATUS);
    2c88:	0f 2e       	mov	r0, r31
    2c8a:	f6 e0       	ldi	r31, 0x06	; 6
    2c8c:	ef 2e       	mov	r14, r31
    2c8e:	f1 2c       	mov	r15, r1
    2c90:	f0 2d       	mov	r31, r0
    2c92:	0b e0       	ldi	r16, 0x0B	; 11
    2c94:	1c e0       	ldi	r17, 0x0C	; 12
    2c96:	29 81       	ldd	r18, Y+1	; 0x01
    2c98:	3a 81       	ldd	r19, Y+2	; 0x02
    2c9a:	4b 81       	ldd	r20, Y+3	; 0x03
    2c9c:	5c 81       	ldd	r21, Y+4	; 0x04
    2c9e:	6d 81       	ldd	r22, Y+5	; 0x05
    2ca0:	7e 81       	ldd	r23, Y+6	; 0x06
    2ca2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca4:	98 85       	ldd	r25, Y+8	; 0x08
    2ca6:	88 d0       	rcall	.+272    	; 0x2db8 <SendandVerify>
	SendandVerify(VEL_AccR,					&RightMotor_Buffer, RIGHTMOTOR_STATUS);
    2ca8:	29 85       	ldd	r18, Y+9	; 0x09
    2caa:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cac:	4b 85       	ldd	r20, Y+11	; 0x0b
    2cae:	5c 85       	ldd	r21, Y+12	; 0x0c
    2cb0:	6d 85       	ldd	r22, Y+13	; 0x0d
    2cb2:	7e 85       	ldd	r23, Y+14	; 0x0e
    2cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cb6:	98 89       	ldd	r25, Y+16	; 0x10
    2cb8:	7f d0       	rcall	.+254    	; 0x2db8 <SendandVerify>
	SendandVerify(VEL_DecR,					&RightMotor_Buffer, RIGHTMOTOR_STATUS);
    2cba:	29 89       	ldd	r18, Y+17	; 0x11
    2cbc:	3a 89       	ldd	r19, Y+18	; 0x12
    2cbe:	4b 89       	ldd	r20, Y+19	; 0x13
    2cc0:	5c 89       	ldd	r21, Y+20	; 0x14
    2cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cca:	76 d0       	rcall	.+236    	; 0x2db8 <SendandVerify>
	SendandVerify(DesiredVelocityRVel,		&RightMotor_Buffer, RIGHTMOTOR_STATUS);
    2ccc:	29 8d       	ldd	r18, Y+25	; 0x19
    2cce:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2cd0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2cd2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2cd4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2cd6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2cd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cda:	98 a1       	ldd	r25, Y+32	; 0x20
    2cdc:	6d d0       	rcall	.+218    	; 0x2db8 <SendandVerify>
}
    2cde:	a0 96       	adiw	r28, 0x20	; 32
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	df 91       	pop	r29
    2cec:	cf 91       	pop	r28
    2cee:	1f 91       	pop	r17
    2cf0:	0f 91       	pop	r16
    2cf2:	ff 90       	pop	r15
    2cf4:	ef 90       	pop	r14
    2cf6:	08 95       	ret

00002cf8 <testOpenLoopCommandsLeftAndRight>:
void returnRightMotorToVelocity(void);

timer_t delayTimer,smallDelayTimer;

void testOpenLoopCommandsLeftAndRight(long distance)
{	
    2cf8:	cf 92       	push	r12
    2cfa:	df 92       	push	r13
    2cfc:	ef 92       	push	r14
    2cfe:	ff 92       	push	r15
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	6b 01       	movw	r12, r22
    2d06:	7c 01       	movw	r14, r24
	setLED(6,OFF);			//INDICATE!!!
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	86 e0       	ldi	r24, 0x06	; 6
    2d0c:	80 da       	rcall	.-2816   	; 0x220e <setLED>
	
	//Set a timer interval for use here
	setTimerInterval(&delayTimer,5000);
    2d0e:	08 e8       	ldi	r16, 0x88	; 136
    2d10:	13 e1       	ldi	r17, 0x13	; 19
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	50 e0       	ldi	r21, 0x00	; 0
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	8d e8       	ldi	r24, 0x8D	; 141
    2d20:	9e e0       	ldi	r25, 0x0E	; 14
    2d22:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
	setTimerInterval(&smallDelayTimer,10);	
    2d26:	0a e0       	ldi	r16, 0x0A	; 10
    2d28:	10 e0       	ldi	r17, 0x00	; 0
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e0       	ldi	r20, 0x00	; 0
    2d30:	50 e0       	ldi	r21, 0x00	; 0
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	8d e7       	ldi	r24, 0x7D	; 125
    2d38:	9e e0       	ldi	r25, 0x0E	; 14
    2d3a:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <setTimerInterval>
	
	while(!timerDone(&smallDelayTimer));
    2d3e:	8d e7       	ldi	r24, 0x7D	; 125
    2d40:	9e e0       	ldi	r25, 0x0E	; 14
    2d42:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <timerDone>
    2d46:	88 23       	and	r24, r24
    2d48:	d1 f3       	breq	.-12     	; 0x2d3e <testOpenLoopCommandsLeftAndRight+0x46>
	//Put the motors in position mode and move them a distance
	sendMotorMoveCommandLeft(distance);
    2d4a:	c7 01       	movw	r24, r14
    2d4c:	b6 01       	movw	r22, r12
    2d4e:	d3 dd       	rcall	.-1114   	; 0x28f6 <sendMotorMoveCommandLeft>
	sendMotorMoveCommandRight(-distance);
    2d50:	66 27       	eor	r22, r22
    2d52:	77 27       	eor	r23, r23
    2d54:	cb 01       	movw	r24, r22
    2d56:	6c 19       	sub	r22, r12
    2d58:	7d 09       	sbc	r23, r13
    2d5a:	8e 09       	sbc	r24, r14
    2d5c:	9f 09       	sbc	r25, r15
    2d5e:	5d de       	rcall	.-838    	; 0x2a1a <sendMotorMoveCommandRight>
	
	setLED(6,ON);			//INDICATE!!!
    2d60:	61 e0       	ldi	r22, 0x01	; 1
    2d62:	86 e0       	ldi	r24, 0x06	; 6
    2d64:	54 da       	rcall	.-2904   	; 0x220e <setLED>
	while(!(RightMotor_GetPosReached() && LeftMotor_GetPosReached()))
    2d66:	06 c0       	rjmp	.+12     	; 0x2d74 <testOpenLoopCommandsLeftAndRight+0x7c>
	{
		
		while(!timerDone(&smallDelayTimer));
    2d68:	8d e7       	ldi	r24, 0x7D	; 125
    2d6a:	9e e0       	ldi	r25, 0x0E	; 14
    2d6c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <timerDone>
    2d70:	88 23       	and	r24, r24
    2d72:	d1 f3       	breq	.-12     	; 0x2d68 <testOpenLoopCommandsLeftAndRight+0x70>
	//Put the motors in position mode and move them a distance
	sendMotorMoveCommandLeft(distance);
	sendMotorMoveCommandRight(-distance);
	
	setLED(6,ON);			//INDICATE!!!
	while(!(RightMotor_GetPosReached() && LeftMotor_GetPosReached()))
    2d74:	d2 d7       	rcall	.+4004   	; 0x3d1a <RightMotor_GetPosReached>
    2d76:	88 23       	and	r24, r24
    2d78:	b9 f3       	breq	.-18     	; 0x2d68 <testOpenLoopCommandsLeftAndRight+0x70>
    2d7a:	69 dd       	rcall	.-1326   	; 0x284e <LeftMotor_GetPosReached>
    2d7c:	88 23       	and	r24, r24
    2d7e:	a1 f3       	breq	.-24     	; 0x2d68 <testOpenLoopCommandsLeftAndRight+0x70>
	}
	
	//while(!timerDone(&delayTimer));
	
	//Return the motors to velocity mode for further use
	returnLeftMotorToVelocity();
    2d80:	e7 de       	rcall	.-562    	; 0x2b50 <returnLeftMotorToVelocity>
	returnRightMotorToVelocity();
    2d82:	50 df       	rcall	.-352    	; 0x2c24 <returnRightMotorToVelocity>
	
	setLED(6,OFF);			//INDICATE!!!
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	86 e0       	ldi	r24, 0x06	; 6
    2d88:	42 da       	rcall	.-2940   	; 0x220e <setLED>
}
    2d8a:	1f 91       	pop	r17
    2d8c:	0f 91       	pop	r16
    2d8e:	ff 90       	pop	r15
    2d90:	ef 90       	pop	r14
    2d92:	df 90       	pop	r13
    2d94:	cf 90       	pop	r12
    2d96:	08 95       	ret

00002d98 <ReceiveMotor3>:
	{
		cb_pop_front(&BucketMotor_Buffer, temp);
	}
	//write data to motor
	while(!SDOWritePacket(Move));
}
    2d98:	bc 01       	movw	r22, r24
    2d9a:	6d 5f       	subi	r22, 0xFD	; 253
    2d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9e:	8d ef       	ldi	r24, 0xFD	; 253
    2da0:	9b e0       	ldi	r25, 0x0B	; 11
    2da2:	0c 94 be 00 	jmp	0x17c	; 0x17c <cb_push_back>
    2da6:	08 95       	ret

00002da8 <ReceiveMotor4>:
    2da8:	bc 01       	movw	r22, r24
    2daa:	6d 5f       	subi	r22, 0xFD	; 253
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255
    2dae:	84 e5       	ldi	r24, 0x54	; 84
    2db0:	9d e0       	ldi	r25, 0x0D	; 13
    2db2:	0c 94 be 00 	jmp	0x17c	; 0x17c <cb_push_back>
    2db6:	08 95       	ret

00002db8 <SendandVerify>:
    2db8:	af 92       	push	r10
    2dba:	bf 92       	push	r11
    2dbc:	cf 92       	push	r12
    2dbe:	df 92       	push	r13
    2dc0:	ef 92       	push	r14
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	60 97       	sbiw	r28, 0x10	; 16
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	29 87       	std	Y+9, r18	; 0x09
    2ddc:	3a 87       	std	Y+10, r19	; 0x0a
    2dde:	4b 87       	std	Y+11, r20	; 0x0b
    2de0:	5c 87       	std	Y+12, r21	; 0x0c
    2de2:	6d 87       	std	Y+13, r22	; 0x0d
    2de4:	7e 87       	std	Y+14, r23	; 0x0e
    2de6:	8f 87       	std	Y+15, r24	; 0x0f
    2de8:	98 8b       	std	Y+16, r25	; 0x10
    2dea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MOTORSTATUS>
    2dee:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MOTORSTATUS+0x1>
    2df2:	0e 2c       	mov	r0, r14
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <SendandVerify+0x42>
    2df6:	95 95       	asr	r25
    2df8:	87 95       	ror	r24
    2dfa:	0a 94       	dec	r0
    2dfc:	e2 f7       	brpl	.-8      	; 0x2df6 <SendandVerify+0x3e>
    2dfe:	80 ff       	sbrs	r24, 0
    2e00:	42 c0       	rjmp	.+132    	; 0x2e86 <SendandVerify+0xce>
    2e02:	58 01       	movw	r10, r16
    2e04:	06 c0       	rjmp	.+12     	; 0x2e12 <SendandVerify+0x5a>
    2e06:	be 01       	movw	r22, r28
    2e08:	6f 5f       	subi	r22, 0xFF	; 255
    2e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0c:	c5 01       	movw	r24, r10
    2e0e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <cb_pop_front>
    2e12:	c5 01       	movw	r24, r10
    2e14:	0e 94 1b 01 	call	0x236	; 0x236 <cb_size>
    2e18:	18 16       	cp	r1, r24
    2e1a:	19 06       	cpc	r1, r25
    2e1c:	a4 f3       	brlt	.-24     	; 0x2e06 <SendandVerify+0x4e>
    2e1e:	29 85       	ldd	r18, Y+9	; 0x09
    2e20:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e22:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e24:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e26:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e28:	7e 85       	ldd	r23, Y+14	; 0x0e
    2e2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e2c:	98 89       	ldd	r25, Y+16	; 0x10
    2e2e:	ee d7       	rcall	.+4060   	; 0x3e0c <SDOWritePacket>
    2e30:	88 23       	and	r24, r24
    2e32:	a9 f3       	breq	.-22     	; 0x2e1e <SendandVerify+0x66>
    2e34:	0f 2e       	mov	r0, r31
    2e36:	f4 e6       	ldi	r31, 0x64	; 100
    2e38:	cf 2e       	mov	r12, r31
    2e3a:	d1 2c       	mov	r13, r1
    2e3c:	f0 2d       	mov	r31, r0
    2e3e:	c5 01       	movw	r24, r10
    2e40:	0e 94 1b 01 	call	0x236	; 0x236 <cb_size>
    2e44:	89 2b       	or	r24, r25
    2e46:	a1 f0       	breq	.+40     	; 0x2e70 <SendandVerify+0xb8>
    2e48:	be 01       	movw	r22, r28
    2e4a:	6f 5f       	subi	r22, 0xFF	; 255
    2e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4e:	c5 01       	movw	r24, r10
    2e50:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <cb_pop_front>
    2e54:	09 85       	ldd	r16, Y+9	; 0x09
    2e56:	1a 85       	ldd	r17, Y+10	; 0x0a
    2e58:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e5a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e5c:	4d 85       	ldd	r20, Y+13	; 0x0d
    2e5e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2e60:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e62:	78 89       	ldd	r23, Y+16	; 0x10
    2e64:	ce 01       	movw	r24, r28
    2e66:	01 96       	adiw	r24, 0x01	; 1
    2e68:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <SDOVerifyReply>
    2e6c:	81 11       	cpse	r24, r1
    2e6e:	0d c0       	rjmp	.+26     	; 0x2e8a <SendandVerify+0xd2>
    2e70:	8f e9       	ldi	r24, 0x9F	; 159
    2e72:	9f e0       	ldi	r25, 0x0F	; 15
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <SendandVerify+0xbc>
    2e78:	00 c0       	rjmp	.+0      	; 0x2e7a <SendandVerify+0xc2>
    2e7a:	00 00       	nop
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	c9 1a       	sub	r12, r25
    2e80:	d1 08       	sbc	r13, r1
    2e82:	e9 f6       	brne	.-70     	; 0x2e3e <SendandVerify+0x86>
    2e84:	04 c0       	rjmp	.+8      	; 0x2e8e <SendandVerify+0xd6>
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	16 c0       	rjmp	.+44     	; 0x2eb6 <SendandVerify+0xfe>
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	14 c0       	rjmp	.+40     	; 0x2eb6 <SendandVerify+0xfe>
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <SendandVerify+0xe0>
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	ea 94       	dec	r14
    2e9a:	e2 f7       	brpl	.-8      	; 0x2e94 <SendandVerify+0xdc>
    2e9c:	80 95       	com	r24
    2e9e:	90 95       	com	r25
    2ea0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <MOTORSTATUS>
    2ea4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <MOTORSTATUS+0x1>
    2ea8:	82 23       	and	r24, r18
    2eaa:	93 23       	and	r25, r19
    2eac:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MOTORSTATUS+0x1>
    2eb0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MOTORSTATUS>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	60 96       	adiw	r28, 0x10	; 16
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	ef 90       	pop	r14
    2ecc:	df 90       	pop	r13
    2ece:	cf 90       	pop	r12
    2ed0:	bf 90       	pop	r11
    2ed2:	af 90       	pop	r10
    2ed4:	08 95       	ret

00002ed6 <ReadandVerify>:
    2ed6:	8f 92       	push	r8
    2ed8:	9f 92       	push	r9
    2eda:	af 92       	push	r10
    2edc:	bf 92       	push	r11
    2ede:	cf 92       	push	r12
    2ee0:	df 92       	push	r13
    2ee2:	ef 92       	push	r14
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	60 97       	sbiw	r28, 0x10	; 16
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	29 87       	std	Y+9, r18	; 0x09
    2efe:	3a 87       	std	Y+10, r19	; 0x0a
    2f00:	4b 87       	std	Y+11, r20	; 0x0b
    2f02:	5c 87       	std	Y+12, r21	; 0x0c
    2f04:	6d 87       	std	Y+13, r22	; 0x0d
    2f06:	7e 87       	std	Y+14, r23	; 0x0e
    2f08:	8f 87       	std	Y+15, r24	; 0x0f
    2f0a:	98 8b       	std	Y+16, r25	; 0x10
    2f0c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MOTORSTATUS>
    2f10:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MOTORSTATUS+0x1>
    2f14:	0e 2c       	mov	r0, r14
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <ReadandVerify+0x46>
    2f18:	95 95       	asr	r25
    2f1a:	87 95       	ror	r24
    2f1c:	0a 94       	dec	r0
    2f1e:	e2 f7       	brpl	.-8      	; 0x2f18 <ReadandVerify+0x42>
    2f20:	80 ff       	sbrs	r24, 0
    2f22:	4b c0       	rjmp	.+150    	; 0x2fba <ReadandVerify+0xe4>
    2f24:	48 01       	movw	r8, r16
    2f26:	06 c0       	rjmp	.+12     	; 0x2f34 <ReadandVerify+0x5e>
    2f28:	be 01       	movw	r22, r28
    2f2a:	6f 5f       	subi	r22, 0xFF	; 255
    2f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2e:	c4 01       	movw	r24, r8
    2f30:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <cb_pop_front>
    2f34:	c4 01       	movw	r24, r8
    2f36:	0e 94 1b 01 	call	0x236	; 0x236 <cb_size>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	19 06       	cpc	r1, r25
    2f3e:	a4 f3       	brlt	.-24     	; 0x2f28 <ReadandVerify+0x52>
    2f40:	29 85       	ldd	r18, Y+9	; 0x09
    2f42:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f44:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f46:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f48:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f4a:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f4e:	98 89       	ldd	r25, Y+16	; 0x10
    2f50:	2a d7       	rcall	.+3668   	; 0x3da6 <SDOReadRequest>
    2f52:	88 23       	and	r24, r24
    2f54:	a9 f3       	breq	.-22     	; 0x2f40 <ReadandVerify+0x6a>
    2f56:	0f 2e       	mov	r0, r31
    2f58:	f4 e6       	ldi	r31, 0x64	; 100
    2f5a:	af 2e       	mov	r10, r31
    2f5c:	b1 2c       	mov	r11, r1
    2f5e:	f0 2d       	mov	r31, r0
    2f60:	c4 01       	movw	r24, r8
    2f62:	0e 94 1b 01 	call	0x236	; 0x236 <cb_size>
    2f66:	89 2b       	or	r24, r25
    2f68:	e9 f0       	breq	.+58     	; 0x2fa4 <ReadandVerify+0xce>
    2f6a:	be 01       	movw	r22, r28
    2f6c:	6f 5f       	subi	r22, 0xFF	; 255
    2f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f70:	c4 01       	movw	r24, r8
    2f72:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <cb_pop_front>
    2f76:	09 85       	ldd	r16, Y+9	; 0x09
    2f78:	1a 85       	ldd	r17, Y+10	; 0x0a
    2f7a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f7c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f7e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2f80:	5e 85       	ldd	r21, Y+14	; 0x0e
    2f82:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f84:	78 89       	ldd	r23, Y+16	; 0x10
    2f86:	ce 01       	movw	r24, r28
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	b3 d7       	rcall	.+3942   	; 0x3ef2 <SDOVerifyRead>
    2f8c:	88 23       	and	r24, r24
    2f8e:	51 f0       	breq	.+20     	; 0x2fa4 <ReadandVerify+0xce>
    2f90:	88 e0       	ldi	r24, 0x08	; 8
    2f92:	fe 01       	movw	r30, r28
    2f94:	31 96       	adiw	r30, 0x01	; 1
    2f96:	d6 01       	movw	r26, r12
    2f98:	01 90       	ld	r0, Z+
    2f9a:	0d 92       	st	X+, r0
    2f9c:	8a 95       	dec	r24
    2f9e:	e1 f7       	brne	.-8      	; 0x2f98 <ReadandVerify+0xc2>
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	21 c0       	rjmp	.+66     	; 0x2fe6 <ReadandVerify+0x110>
    2fa4:	8f e9       	ldi	r24, 0x9F	; 159
    2fa6:	9f e0       	ldi	r25, 0x0F	; 15
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <ReadandVerify+0xd2>
    2fac:	00 c0       	rjmp	.+0      	; 0x2fae <ReadandVerify+0xd8>
    2fae:	00 00       	nop
    2fb0:	91 e0       	ldi	r25, 0x01	; 1
    2fb2:	a9 1a       	sub	r10, r25
    2fb4:	b1 08       	sbc	r11, r1
    2fb6:	a1 f6       	brne	.-88     	; 0x2f60 <ReadandVerify+0x8a>
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <ReadandVerify+0xe8>
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	14 c0       	rjmp	.+40     	; 0x2fe6 <ReadandVerify+0x110>
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <ReadandVerify+0xf2>
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	ea 94       	dec	r14
    2fca:	e2 f7       	brpl	.-8      	; 0x2fc4 <ReadandVerify+0xee>
    2fcc:	80 95       	com	r24
    2fce:	90 95       	com	r25
    2fd0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <MOTORSTATUS>
    2fd4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <MOTORSTATUS+0x1>
    2fd8:	82 23       	and	r24, r18
    2fda:	93 23       	and	r25, r19
    2fdc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MOTORSTATUS+0x1>
    2fe0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MOTORSTATUS>
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	60 96       	adiw	r28, 0x10	; 16
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	ef 90       	pop	r14
    2ffc:	df 90       	pop	r13
    2ffe:	cf 90       	pop	r12
    3000:	bf 90       	pop	r11
    3002:	af 90       	pop	r10
    3004:	9f 90       	pop	r9
    3006:	8f 90       	pop	r8
    3008:	08 95       	ret

0000300a <ConveyorMotor_Init>:
    300a:	ef 92       	push	r14
    300c:	ff 92       	push	r15
    300e:	0f 93       	push	r16
    3010:	1f 93       	push	r17
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	c0 55       	subi	r28, 0x50	; 80
    301c:	d1 09       	sbc	r29, r1
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	88 e0       	ldi	r24, 0x08	; 8
    302a:	ee e6       	ldi	r30, 0x6E	; 110
    302c:	f2 e0       	ldi	r31, 0x02	; 2
    302e:	de 01       	movw	r26, r28
    3030:	11 96       	adiw	r26, 0x01	; 1
    3032:	01 90       	ld	r0, Z+
    3034:	0d 92       	st	X+, r0
    3036:	8a 95       	dec	r24
    3038:	e1 f7       	brne	.-8      	; 0x3032 <ConveyorMotor_Init+0x28>
    303a:	88 e0       	ldi	r24, 0x08	; 8
    303c:	e6 e7       	ldi	r30, 0x76	; 118
    303e:	f2 e0       	ldi	r31, 0x02	; 2
    3040:	de 01       	movw	r26, r28
    3042:	19 96       	adiw	r26, 0x09	; 9
    3044:	01 90       	ld	r0, Z+
    3046:	0d 92       	st	X+, r0
    3048:	8a 95       	dec	r24
    304a:	e1 f7       	brne	.-8      	; 0x3044 <ConveyorMotor_Init+0x3a>
    304c:	88 e0       	ldi	r24, 0x08	; 8
    304e:	ee e7       	ldi	r30, 0x7E	; 126
    3050:	f2 e0       	ldi	r31, 0x02	; 2
    3052:	de 01       	movw	r26, r28
    3054:	51 96       	adiw	r26, 0x11	; 17
    3056:	01 90       	ld	r0, Z+
    3058:	0d 92       	st	X+, r0
    305a:	8a 95       	dec	r24
    305c:	e1 f7       	brne	.-8      	; 0x3056 <ConveyorMotor_Init+0x4c>
    305e:	88 e0       	ldi	r24, 0x08	; 8
    3060:	e6 e8       	ldi	r30, 0x86	; 134
    3062:	f2 e0       	ldi	r31, 0x02	; 2
    3064:	de 01       	movw	r26, r28
    3066:	59 96       	adiw	r26, 0x19	; 25
    3068:	01 90       	ld	r0, Z+
    306a:	0d 92       	st	X+, r0
    306c:	8a 95       	dec	r24
    306e:	e1 f7       	brne	.-8      	; 0x3068 <ConveyorMotor_Init+0x5e>
    3070:	88 e0       	ldi	r24, 0x08	; 8
    3072:	ee e8       	ldi	r30, 0x8E	; 142
    3074:	f2 e0       	ldi	r31, 0x02	; 2
    3076:	de 01       	movw	r26, r28
    3078:	91 96       	adiw	r26, 0x21	; 33
    307a:	01 90       	ld	r0, Z+
    307c:	0d 92       	st	X+, r0
    307e:	8a 95       	dec	r24
    3080:	e1 f7       	brne	.-8      	; 0x307a <ConveyorMotor_Init+0x70>
    3082:	88 e0       	ldi	r24, 0x08	; 8
    3084:	e6 e9       	ldi	r30, 0x96	; 150
    3086:	f2 e0       	ldi	r31, 0x02	; 2
    3088:	de 01       	movw	r26, r28
    308a:	99 96       	adiw	r26, 0x29	; 41
    308c:	01 90       	ld	r0, Z+
    308e:	0d 92       	st	X+, r0
    3090:	8a 95       	dec	r24
    3092:	e1 f7       	brne	.-8      	; 0x308c <ConveyorMotor_Init+0x82>
    3094:	88 e0       	ldi	r24, 0x08	; 8
    3096:	ee e9       	ldi	r30, 0x9E	; 158
    3098:	f2 e0       	ldi	r31, 0x02	; 2
    309a:	de 01       	movw	r26, r28
    309c:	d1 96       	adiw	r26, 0x31	; 49
    309e:	01 90       	ld	r0, Z+
    30a0:	0d 92       	st	X+, r0
    30a2:	8a 95       	dec	r24
    30a4:	e1 f7       	brne	.-8      	; 0x309e <ConveyorMotor_Init+0x94>
    30a6:	88 e0       	ldi	r24, 0x08	; 8
    30a8:	e6 ea       	ldi	r30, 0xA6	; 166
    30aa:	f2 e0       	ldi	r31, 0x02	; 2
    30ac:	de 01       	movw	r26, r28
    30ae:	d9 96       	adiw	r26, 0x39	; 57
    30b0:	01 90       	ld	r0, Z+
    30b2:	0d 92       	st	X+, r0
    30b4:	8a 95       	dec	r24
    30b6:	e1 f7       	brne	.-8      	; 0x30b0 <ConveyorMotor_Init+0xa6>
    30b8:	48 e0       	ldi	r20, 0x08	; 8
    30ba:	50 e0       	ldi	r21, 0x00	; 0
    30bc:	64 e0       	ldi	r22, 0x04	; 4
    30be:	70 e0       	ldi	r23, 0x00	; 0
    30c0:	8d ef       	ldi	r24, 0xFD	; 253
    30c2:	9b e0       	ldi	r25, 0x0B	; 11
    30c4:	0e 94 8e 00 	call	0x11c	; 0x11c <cb_init>
    30c8:	2c ec       	ldi	r18, 0xCC	; 204
    30ca:	36 e1       	ldi	r19, 0x16	; 22
    30cc:	4f ef       	ldi	r20, 0xFF	; 255
    30ce:	57 e0       	ldi	r21, 0x07	; 7
    30d0:	6c ef       	ldi	r22, 0xFC	; 252
    30d2:	75 e0       	ldi	r23, 0x05	; 5
    30d4:	82 e0       	ldi	r24, 0x02	; 2
    30d6:	0e 94 70 05 	call	0xae0	; 0xae0 <prepare_rx>
    30da:	88 23       	and	r24, r24
    30dc:	09 f0       	breq	.+2      	; 0x30e0 <ConveyorMotor_Init+0xd6>
    30de:	98 95       	break
    30e0:	0f 2e       	mov	r0, r31
    30e2:	f5 e0       	ldi	r31, 0x05	; 5
    30e4:	ef 2e       	mov	r14, r31
    30e6:	f1 2c       	mov	r15, r1
    30e8:	f0 2d       	mov	r31, r0
    30ea:	0d ef       	ldi	r16, 0xFD	; 253
    30ec:	1b e0       	ldi	r17, 0x0B	; 11
    30ee:	29 81       	ldd	r18, Y+1	; 0x01
    30f0:	3a 81       	ldd	r19, Y+2	; 0x02
    30f2:	4b 81       	ldd	r20, Y+3	; 0x03
    30f4:	5c 81       	ldd	r21, Y+4	; 0x04
    30f6:	6d 81       	ldd	r22, Y+5	; 0x05
    30f8:	7e 81       	ldd	r23, Y+6	; 0x06
    30fa:	8f 81       	ldd	r24, Y+7	; 0x07
    30fc:	98 85       	ldd	r25, Y+8	; 0x08
    30fe:	5c de       	rcall	.-840    	; 0x2db8 <SendandVerify>
    3100:	29 85       	ldd	r18, Y+9	; 0x09
    3102:	3a 85       	ldd	r19, Y+10	; 0x0a
    3104:	4b 85       	ldd	r20, Y+11	; 0x0b
    3106:	5c 85       	ldd	r21, Y+12	; 0x0c
    3108:	6d 85       	ldd	r22, Y+13	; 0x0d
    310a:	7e 85       	ldd	r23, Y+14	; 0x0e
    310c:	8f 85       	ldd	r24, Y+15	; 0x0f
    310e:	98 89       	ldd	r25, Y+16	; 0x10
    3110:	53 de       	rcall	.-858    	; 0x2db8 <SendandVerify>
    3112:	29 89       	ldd	r18, Y+17	; 0x11
    3114:	3a 89       	ldd	r19, Y+18	; 0x12
    3116:	4b 89       	ldd	r20, Y+19	; 0x13
    3118:	5c 89       	ldd	r21, Y+20	; 0x14
    311a:	6d 89       	ldd	r22, Y+21	; 0x15
    311c:	7e 89       	ldd	r23, Y+22	; 0x16
    311e:	8f 89       	ldd	r24, Y+23	; 0x17
    3120:	98 8d       	ldd	r25, Y+24	; 0x18
    3122:	4a de       	rcall	.-876    	; 0x2db8 <SendandVerify>
    3124:	29 8d       	ldd	r18, Y+25	; 0x19
    3126:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3128:	4b 8d       	ldd	r20, Y+27	; 0x1b
    312a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    312c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    312e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3130:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3132:	98 a1       	ldd	r25, Y+32	; 0x20
    3134:	41 de       	rcall	.-894    	; 0x2db8 <SendandVerify>
    3136:	8f e3       	ldi	r24, 0x3F	; 63
    3138:	9f e1       	ldi	r25, 0x1F	; 31
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <ConveyorMotor_Init+0x130>
    313e:	00 c0       	rjmp	.+0      	; 0x3140 <ConveyorMotor_Init+0x136>
    3140:	00 00       	nop
    3142:	29 a1       	ldd	r18, Y+33	; 0x21
    3144:	3a a1       	ldd	r19, Y+34	; 0x22
    3146:	4b a1       	ldd	r20, Y+35	; 0x23
    3148:	5c a1       	ldd	r21, Y+36	; 0x24
    314a:	6d a1       	ldd	r22, Y+37	; 0x25
    314c:	7e a1       	ldd	r23, Y+38	; 0x26
    314e:	8f a1       	ldd	r24, Y+39	; 0x27
    3150:	98 a5       	ldd	r25, Y+40	; 0x28
    3152:	32 de       	rcall	.-924    	; 0x2db8 <SendandVerify>
    3154:	29 a5       	ldd	r18, Y+41	; 0x29
    3156:	3a a5       	ldd	r19, Y+42	; 0x2a
    3158:	4b a5       	ldd	r20, Y+43	; 0x2b
    315a:	5c a5       	ldd	r21, Y+44	; 0x2c
    315c:	6d a5       	ldd	r22, Y+45	; 0x2d
    315e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3160:	8f a5       	ldd	r24, Y+47	; 0x2f
    3162:	98 a9       	ldd	r25, Y+48	; 0x30
    3164:	29 de       	rcall	.-942    	; 0x2db8 <SendandVerify>
    3166:	29 a9       	ldd	r18, Y+49	; 0x31
    3168:	3a a9       	ldd	r19, Y+50	; 0x32
    316a:	4b a9       	ldd	r20, Y+51	; 0x33
    316c:	5c a9       	ldd	r21, Y+52	; 0x34
    316e:	6d a9       	ldd	r22, Y+53	; 0x35
    3170:	7e a9       	ldd	r23, Y+54	; 0x36
    3172:	8f a9       	ldd	r24, Y+55	; 0x37
    3174:	98 ad       	ldd	r25, Y+56	; 0x38
    3176:	20 de       	rcall	.-960    	; 0x2db8 <SendandVerify>
    3178:	88 e0       	ldi	r24, 0x08	; 8
    317a:	ee ea       	ldi	r30, 0xAE	; 174
    317c:	f2 e0       	ldi	r31, 0x02	; 2
    317e:	de 01       	movw	r26, r28
    3180:	af 5b       	subi	r26, 0xBF	; 191
    3182:	bf 4f       	sbci	r27, 0xFF	; 255
    3184:	01 90       	ld	r0, Z+
    3186:	0d 92       	st	X+, r0
    3188:	8a 95       	dec	r24
    318a:	e1 f7       	brne	.-8      	; 0x3184 <ConveyorMotor_Init+0x17a>
    318c:	88 e0       	ldi	r24, 0x08	; 8
    318e:	e6 eb       	ldi	r30, 0xB6	; 182
    3190:	f2 e0       	ldi	r31, 0x02	; 2
    3192:	de 01       	movw	r26, r28
    3194:	a7 5b       	subi	r26, 0xB7	; 183
    3196:	bf 4f       	sbci	r27, 0xFF	; 255
    3198:	01 90       	ld	r0, Z+
    319a:	0d 92       	st	X+, r0
    319c:	8a 95       	dec	r24
    319e:	e1 f7       	brne	.-8      	; 0x3198 <ConveyorMotor_Init+0x18e>
    31a0:	2a 96       	adiw	r28, 0x0a	; 10
    31a2:	2f ad       	ldd	r18, Y+63	; 0x3f
    31a4:	2a 97       	sbiw	r28, 0x0a	; 10
    31a6:	2b 96       	adiw	r28, 0x0b	; 11
    31a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    31aa:	2b 97       	sbiw	r28, 0x0b	; 11
    31ac:	2c 96       	adiw	r28, 0x0c	; 12
    31ae:	4f ad       	ldd	r20, Y+63	; 0x3f
    31b0:	2c 97       	sbiw	r28, 0x0c	; 12
    31b2:	2d 96       	adiw	r28, 0x0d	; 13
    31b4:	5f ad       	ldd	r21, Y+63	; 0x3f
    31b6:	2d 97       	sbiw	r28, 0x0d	; 13
    31b8:	2e 96       	adiw	r28, 0x0e	; 14
    31ba:	6f ad       	ldd	r22, Y+63	; 0x3f
    31bc:	2e 97       	sbiw	r28, 0x0e	; 14
    31be:	2f 96       	adiw	r28, 0x0f	; 15
    31c0:	7f ad       	ldd	r23, Y+63	; 0x3f
    31c2:	2f 97       	sbiw	r28, 0x0f	; 15
    31c4:	60 96       	adiw	r28, 0x10	; 16
    31c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    31c8:	60 97       	sbiw	r28, 0x10	; 16
    31ca:	61 96       	adiw	r28, 0x11	; 17
    31cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    31ce:	61 97       	sbiw	r28, 0x11	; 17
    31d0:	f3 dd       	rcall	.-1050   	; 0x2db8 <SendandVerify>
    31d2:	22 96       	adiw	r28, 0x02	; 2
    31d4:	2f ad       	ldd	r18, Y+63	; 0x3f
    31d6:	22 97       	sbiw	r28, 0x02	; 2
    31d8:	23 96       	adiw	r28, 0x03	; 3
    31da:	3f ad       	ldd	r19, Y+63	; 0x3f
    31dc:	23 97       	sbiw	r28, 0x03	; 3
    31de:	24 96       	adiw	r28, 0x04	; 4
    31e0:	4f ad       	ldd	r20, Y+63	; 0x3f
    31e2:	24 97       	sbiw	r28, 0x04	; 4
    31e4:	25 96       	adiw	r28, 0x05	; 5
    31e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    31e8:	25 97       	sbiw	r28, 0x05	; 5
    31ea:	26 96       	adiw	r28, 0x06	; 6
    31ec:	6f ad       	ldd	r22, Y+63	; 0x3f
    31ee:	26 97       	sbiw	r28, 0x06	; 6
    31f0:	27 96       	adiw	r28, 0x07	; 7
    31f2:	7f ad       	ldd	r23, Y+63	; 0x3f
    31f4:	27 97       	sbiw	r28, 0x07	; 7
    31f6:	28 96       	adiw	r28, 0x08	; 8
    31f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    31fa:	28 97       	sbiw	r28, 0x08	; 8
    31fc:	29 96       	adiw	r28, 0x09	; 9
    31fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    3200:	29 97       	sbiw	r28, 0x09	; 9
    3202:	da dd       	rcall	.-1100   	; 0x2db8 <SendandVerify>
    3204:	29 ad       	ldd	r18, Y+57	; 0x39
    3206:	3a ad       	ldd	r19, Y+58	; 0x3a
    3208:	4b ad       	ldd	r20, Y+59	; 0x3b
    320a:	5c ad       	ldd	r21, Y+60	; 0x3c
    320c:	6d ad       	ldd	r22, Y+61	; 0x3d
    320e:	7e ad       	ldd	r23, Y+62	; 0x3e
    3210:	8f ad       	ldd	r24, Y+63	; 0x3f
    3212:	21 96       	adiw	r28, 0x01	; 1
    3214:	9f ad       	ldd	r25, Y+63	; 0x3f
    3216:	21 97       	sbiw	r28, 0x01	; 1
    3218:	cf dd       	rcall	.-1122   	; 0x2db8 <SendandVerify>
    321a:	c0 5b       	subi	r28, 0xB0	; 176
    321c:	df 4f       	sbci	r29, 0xFF	; 255
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	df 91       	pop	r29
    322a:	cf 91       	pop	r28
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	ff 90       	pop	r15
    3232:	ef 90       	pop	r14
    3234:	08 95       	ret

00003236 <BucketMotor_Init>:
    3236:	ef 92       	push	r14
    3238:	ff 92       	push	r15
    323a:	0f 93       	push	r16
    323c:	1f 93       	push	r17
    323e:	cf 93       	push	r28
    3240:	df 93       	push	r29
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	c0 55       	subi	r28, 0x50	; 80
    3248:	d1 09       	sbc	r29, r1
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	88 e0       	ldi	r24, 0x08	; 8
    3256:	ee eb       	ldi	r30, 0xBE	; 190
    3258:	f2 e0       	ldi	r31, 0x02	; 2
    325a:	de 01       	movw	r26, r28
    325c:	11 96       	adiw	r26, 0x01	; 1
    325e:	01 90       	ld	r0, Z+
    3260:	0d 92       	st	X+, r0
    3262:	8a 95       	dec	r24
    3264:	e1 f7       	brne	.-8      	; 0x325e <BucketMotor_Init+0x28>
    3266:	88 e0       	ldi	r24, 0x08	; 8
    3268:	e6 ec       	ldi	r30, 0xC6	; 198
    326a:	f2 e0       	ldi	r31, 0x02	; 2
    326c:	de 01       	movw	r26, r28
    326e:	19 96       	adiw	r26, 0x09	; 9
    3270:	01 90       	ld	r0, Z+
    3272:	0d 92       	st	X+, r0
    3274:	8a 95       	dec	r24
    3276:	e1 f7       	brne	.-8      	; 0x3270 <BucketMotor_Init+0x3a>
    3278:	88 e0       	ldi	r24, 0x08	; 8
    327a:	ee ec       	ldi	r30, 0xCE	; 206
    327c:	f2 e0       	ldi	r31, 0x02	; 2
    327e:	de 01       	movw	r26, r28
    3280:	51 96       	adiw	r26, 0x11	; 17
    3282:	01 90       	ld	r0, Z+
    3284:	0d 92       	st	X+, r0
    3286:	8a 95       	dec	r24
    3288:	e1 f7       	brne	.-8      	; 0x3282 <BucketMotor_Init+0x4c>
    328a:	88 e0       	ldi	r24, 0x08	; 8
    328c:	e6 ed       	ldi	r30, 0xD6	; 214
    328e:	f2 e0       	ldi	r31, 0x02	; 2
    3290:	de 01       	movw	r26, r28
    3292:	59 96       	adiw	r26, 0x19	; 25
    3294:	01 90       	ld	r0, Z+
    3296:	0d 92       	st	X+, r0
    3298:	8a 95       	dec	r24
    329a:	e1 f7       	brne	.-8      	; 0x3294 <BucketMotor_Init+0x5e>
    329c:	88 e0       	ldi	r24, 0x08	; 8
    329e:	ee ed       	ldi	r30, 0xDE	; 222
    32a0:	f2 e0       	ldi	r31, 0x02	; 2
    32a2:	de 01       	movw	r26, r28
    32a4:	91 96       	adiw	r26, 0x21	; 33
    32a6:	01 90       	ld	r0, Z+
    32a8:	0d 92       	st	X+, r0
    32aa:	8a 95       	dec	r24
    32ac:	e1 f7       	brne	.-8      	; 0x32a6 <BucketMotor_Init+0x70>
    32ae:	88 e0       	ldi	r24, 0x08	; 8
    32b0:	e6 ee       	ldi	r30, 0xE6	; 230
    32b2:	f2 e0       	ldi	r31, 0x02	; 2
    32b4:	de 01       	movw	r26, r28
    32b6:	99 96       	adiw	r26, 0x29	; 41
    32b8:	01 90       	ld	r0, Z+
    32ba:	0d 92       	st	X+, r0
    32bc:	8a 95       	dec	r24
    32be:	e1 f7       	brne	.-8      	; 0x32b8 <BucketMotor_Init+0x82>
    32c0:	88 e0       	ldi	r24, 0x08	; 8
    32c2:	ee ee       	ldi	r30, 0xEE	; 238
    32c4:	f2 e0       	ldi	r31, 0x02	; 2
    32c6:	de 01       	movw	r26, r28
    32c8:	d1 96       	adiw	r26, 0x31	; 49
    32ca:	01 90       	ld	r0, Z+
    32cc:	0d 92       	st	X+, r0
    32ce:	8a 95       	dec	r24
    32d0:	e1 f7       	brne	.-8      	; 0x32ca <BucketMotor_Init+0x94>
    32d2:	88 e0       	ldi	r24, 0x08	; 8
    32d4:	e6 ef       	ldi	r30, 0xF6	; 246
    32d6:	f2 e0       	ldi	r31, 0x02	; 2
    32d8:	de 01       	movw	r26, r28
    32da:	d9 96       	adiw	r26, 0x39	; 57
    32dc:	01 90       	ld	r0, Z+
    32de:	0d 92       	st	X+, r0
    32e0:	8a 95       	dec	r24
    32e2:	e1 f7       	brne	.-8      	; 0x32dc <BucketMotor_Init+0xa6>
    32e4:	88 e0       	ldi	r24, 0x08	; 8
    32e6:	ee ef       	ldi	r30, 0xFE	; 254
    32e8:	f2 e0       	ldi	r31, 0x02	; 2
    32ea:	de 01       	movw	r26, r28
    32ec:	af 5b       	subi	r26, 0xBF	; 191
    32ee:	bf 4f       	sbci	r27, 0xFF	; 255
    32f0:	01 90       	ld	r0, Z+
    32f2:	0d 92       	st	X+, r0
    32f4:	8a 95       	dec	r24
    32f6:	e1 f7       	brne	.-8      	; 0x32f0 <BucketMotor_Init+0xba>
    32f8:	88 e0       	ldi	r24, 0x08	; 8
    32fa:	e6 e0       	ldi	r30, 0x06	; 6
    32fc:	f3 e0       	ldi	r31, 0x03	; 3
    32fe:	de 01       	movw	r26, r28
    3300:	a7 5b       	subi	r26, 0xB7	; 183
    3302:	bf 4f       	sbci	r27, 0xFF	; 255
    3304:	01 90       	ld	r0, Z+
    3306:	0d 92       	st	X+, r0
    3308:	8a 95       	dec	r24
    330a:	e1 f7       	brne	.-8      	; 0x3304 <BucketMotor_Init+0xce>
    330c:	48 e0       	ldi	r20, 0x08	; 8
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	64 e0       	ldi	r22, 0x04	; 4
    3312:	70 e0       	ldi	r23, 0x00	; 0
    3314:	84 e5       	ldi	r24, 0x54	; 84
    3316:	9d e0       	ldi	r25, 0x0D	; 13
    3318:	0e 94 8e 00 	call	0x11c	; 0x11c <cb_init>
    331c:	24 ed       	ldi	r18, 0xD4	; 212
    331e:	36 e1       	ldi	r19, 0x16	; 22
    3320:	4f ef       	ldi	r20, 0xFF	; 255
    3322:	57 e0       	ldi	r21, 0x07	; 7
    3324:	6f ef       	ldi	r22, 0xFF	; 255
    3326:	75 e0       	ldi	r23, 0x05	; 5
    3328:	83 e0       	ldi	r24, 0x03	; 3
    332a:	0e 94 70 05 	call	0xae0	; 0xae0 <prepare_rx>
    332e:	88 23       	and	r24, r24
    3330:	09 f0       	breq	.+2      	; 0x3334 <BucketMotor_Init+0xfe>
    3332:	98 95       	break
    3334:	68 94       	set
    3336:	ee 24       	eor	r14, r14
    3338:	e2 f8       	bld	r14, 2
    333a:	f1 2c       	mov	r15, r1
    333c:	04 e5       	ldi	r16, 0x54	; 84
    333e:	1d e0       	ldi	r17, 0x0D	; 13
    3340:	29 81       	ldd	r18, Y+1	; 0x01
    3342:	3a 81       	ldd	r19, Y+2	; 0x02
    3344:	4b 81       	ldd	r20, Y+3	; 0x03
    3346:	5c 81       	ldd	r21, Y+4	; 0x04
    3348:	6d 81       	ldd	r22, Y+5	; 0x05
    334a:	7e 81       	ldd	r23, Y+6	; 0x06
    334c:	8f 81       	ldd	r24, Y+7	; 0x07
    334e:	98 85       	ldd	r25, Y+8	; 0x08
    3350:	33 dd       	rcall	.-1434   	; 0x2db8 <SendandVerify>
    3352:	29 85       	ldd	r18, Y+9	; 0x09
    3354:	3a 85       	ldd	r19, Y+10	; 0x0a
    3356:	4b 85       	ldd	r20, Y+11	; 0x0b
    3358:	5c 85       	ldd	r21, Y+12	; 0x0c
    335a:	6d 85       	ldd	r22, Y+13	; 0x0d
    335c:	7e 85       	ldd	r23, Y+14	; 0x0e
    335e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3360:	98 89       	ldd	r25, Y+16	; 0x10
    3362:	2a dd       	rcall	.-1452   	; 0x2db8 <SendandVerify>
    3364:	29 89       	ldd	r18, Y+17	; 0x11
    3366:	3a 89       	ldd	r19, Y+18	; 0x12
    3368:	4b 89       	ldd	r20, Y+19	; 0x13
    336a:	5c 89       	ldd	r21, Y+20	; 0x14
    336c:	6d 89       	ldd	r22, Y+21	; 0x15
    336e:	7e 89       	ldd	r23, Y+22	; 0x16
    3370:	8f 89       	ldd	r24, Y+23	; 0x17
    3372:	98 8d       	ldd	r25, Y+24	; 0x18
    3374:	21 dd       	rcall	.-1470   	; 0x2db8 <SendandVerify>
    3376:	8f e3       	ldi	r24, 0x3F	; 63
    3378:	9f e1       	ldi	r25, 0x1F	; 31
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <BucketMotor_Init+0x144>
    337e:	00 c0       	rjmp	.+0      	; 0x3380 <BucketMotor_Init+0x14a>
    3380:	00 00       	nop
    3382:	29 a1       	ldd	r18, Y+33	; 0x21
    3384:	3a a1       	ldd	r19, Y+34	; 0x22
    3386:	4b a1       	ldd	r20, Y+35	; 0x23
    3388:	5c a1       	ldd	r21, Y+36	; 0x24
    338a:	6d a1       	ldd	r22, Y+37	; 0x25
    338c:	7e a1       	ldd	r23, Y+38	; 0x26
    338e:	8f a1       	ldd	r24, Y+39	; 0x27
    3390:	98 a5       	ldd	r25, Y+40	; 0x28
    3392:	12 dd       	rcall	.-1500   	; 0x2db8 <SendandVerify>
    3394:	29 8d       	ldd	r18, Y+25	; 0x19
    3396:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3398:	4b 8d       	ldd	r20, Y+27	; 0x1b
    339a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    339c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    339e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    33a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33a2:	98 a1       	ldd	r25, Y+32	; 0x20
    33a4:	09 dd       	rcall	.-1518   	; 0x2db8 <SendandVerify>
    33a6:	29 a5       	ldd	r18, Y+41	; 0x29
    33a8:	3a a5       	ldd	r19, Y+42	; 0x2a
    33aa:	4b a5       	ldd	r20, Y+43	; 0x2b
    33ac:	5c a5       	ldd	r21, Y+44	; 0x2c
    33ae:	6d a5       	ldd	r22, Y+45	; 0x2d
    33b0:	7e a5       	ldd	r23, Y+46	; 0x2e
    33b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    33b4:	98 a9       	ldd	r25, Y+48	; 0x30
    33b6:	00 dd       	rcall	.-1536   	; 0x2db8 <SendandVerify>
    33b8:	29 a9       	ldd	r18, Y+49	; 0x31
    33ba:	3a a9       	ldd	r19, Y+50	; 0x32
    33bc:	4b a9       	ldd	r20, Y+51	; 0x33
    33be:	5c a9       	ldd	r21, Y+52	; 0x34
    33c0:	6d a9       	ldd	r22, Y+53	; 0x35
    33c2:	7e a9       	ldd	r23, Y+54	; 0x36
    33c4:	8f a9       	ldd	r24, Y+55	; 0x37
    33c6:	98 ad       	ldd	r25, Y+56	; 0x38
    33c8:	f7 dc       	rcall	.-1554   	; 0x2db8 <SendandVerify>
    33ca:	29 ad       	ldd	r18, Y+57	; 0x39
    33cc:	3a ad       	ldd	r19, Y+58	; 0x3a
    33ce:	4b ad       	ldd	r20, Y+59	; 0x3b
    33d0:	5c ad       	ldd	r21, Y+60	; 0x3c
    33d2:	6d ad       	ldd	r22, Y+61	; 0x3d
    33d4:	7e ad       	ldd	r23, Y+62	; 0x3e
    33d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    33d8:	21 96       	adiw	r28, 0x01	; 1
    33da:	9f ad       	ldd	r25, Y+63	; 0x3f
    33dc:	21 97       	sbiw	r28, 0x01	; 1
    33de:	ec dc       	rcall	.-1576   	; 0x2db8 <SendandVerify>
    33e0:	22 96       	adiw	r28, 0x02	; 2
    33e2:	2f ad       	ldd	r18, Y+63	; 0x3f
    33e4:	22 97       	sbiw	r28, 0x02	; 2
    33e6:	23 96       	adiw	r28, 0x03	; 3
    33e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    33ea:	23 97       	sbiw	r28, 0x03	; 3
    33ec:	24 96       	adiw	r28, 0x04	; 4
    33ee:	4f ad       	ldd	r20, Y+63	; 0x3f
    33f0:	24 97       	sbiw	r28, 0x04	; 4
    33f2:	25 96       	adiw	r28, 0x05	; 5
    33f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    33f6:	25 97       	sbiw	r28, 0x05	; 5
    33f8:	26 96       	adiw	r28, 0x06	; 6
    33fa:	6f ad       	ldd	r22, Y+63	; 0x3f
    33fc:	26 97       	sbiw	r28, 0x06	; 6
    33fe:	27 96       	adiw	r28, 0x07	; 7
    3400:	7f ad       	ldd	r23, Y+63	; 0x3f
    3402:	27 97       	sbiw	r28, 0x07	; 7
    3404:	28 96       	adiw	r28, 0x08	; 8
    3406:	8f ad       	ldd	r24, Y+63	; 0x3f
    3408:	28 97       	sbiw	r28, 0x08	; 8
    340a:	29 96       	adiw	r28, 0x09	; 9
    340c:	9f ad       	ldd	r25, Y+63	; 0x3f
    340e:	29 97       	sbiw	r28, 0x09	; 9
    3410:	d3 dc       	rcall	.-1626   	; 0x2db8 <SendandVerify>
    3412:	2a 96       	adiw	r28, 0x0a	; 10
    3414:	2f ad       	ldd	r18, Y+63	; 0x3f
    3416:	2a 97       	sbiw	r28, 0x0a	; 10
    3418:	2b 96       	adiw	r28, 0x0b	; 11
    341a:	3f ad       	ldd	r19, Y+63	; 0x3f
    341c:	2b 97       	sbiw	r28, 0x0b	; 11
    341e:	2c 96       	adiw	r28, 0x0c	; 12
    3420:	4f ad       	ldd	r20, Y+63	; 0x3f
    3422:	2c 97       	sbiw	r28, 0x0c	; 12
    3424:	2d 96       	adiw	r28, 0x0d	; 13
    3426:	5f ad       	ldd	r21, Y+63	; 0x3f
    3428:	2d 97       	sbiw	r28, 0x0d	; 13
    342a:	2e 96       	adiw	r28, 0x0e	; 14
    342c:	6f ad       	ldd	r22, Y+63	; 0x3f
    342e:	2e 97       	sbiw	r28, 0x0e	; 14
    3430:	2f 96       	adiw	r28, 0x0f	; 15
    3432:	7f ad       	ldd	r23, Y+63	; 0x3f
    3434:	2f 97       	sbiw	r28, 0x0f	; 15
    3436:	60 96       	adiw	r28, 0x10	; 16
    3438:	8f ad       	ldd	r24, Y+63	; 0x3f
    343a:	60 97       	sbiw	r28, 0x10	; 16
    343c:	61 96       	adiw	r28, 0x11	; 17
    343e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3440:	61 97       	sbiw	r28, 0x11	; 17
    3442:	ba dc       	rcall	.-1676   	; 0x2db8 <SendandVerify>
    3444:	c0 5b       	subi	r28, 0xB0	; 176
    3446:	df 4f       	sbci	r29, 0xFF	; 255
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	1f 91       	pop	r17
    3458:	0f 91       	pop	r16
    345a:	ff 90       	pop	r15
    345c:	ef 90       	pop	r14
    345e:	08 95       	ret

00003460 <ConveyorMotor_VelMode>:
    3460:	ef 92       	push	r14
    3462:	ff 92       	push	r15
    3464:	0f 93       	push	r16
    3466:	1f 93       	push	r17
    3468:	cf 93       	push	r28
    346a:	df 93       	push	r29
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
    3470:	68 97       	sbiw	r28, 0x18	; 24
    3472:	0f b6       	in	r0, 0x3f	; 63
    3474:	f8 94       	cli
    3476:	de bf       	out	0x3e, r29	; 62
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	cd bf       	out	0x3d, r28	; 61
    347c:	88 e0       	ldi	r24, 0x08	; 8
    347e:	ee e0       	ldi	r30, 0x0E	; 14
    3480:	f3 e0       	ldi	r31, 0x03	; 3
    3482:	de 01       	movw	r26, r28
    3484:	11 96       	adiw	r26, 0x01	; 1
    3486:	01 90       	ld	r0, Z+
    3488:	0d 92       	st	X+, r0
    348a:	8a 95       	dec	r24
    348c:	e1 f7       	brne	.-8      	; 0x3486 <ConveyorMotor_VelMode+0x26>
    348e:	88 e0       	ldi	r24, 0x08	; 8
    3490:	e6 e1       	ldi	r30, 0x16	; 22
    3492:	f3 e0       	ldi	r31, 0x03	; 3
    3494:	de 01       	movw	r26, r28
    3496:	19 96       	adiw	r26, 0x09	; 9
    3498:	01 90       	ld	r0, Z+
    349a:	0d 92       	st	X+, r0
    349c:	8a 95       	dec	r24
    349e:	e1 f7       	brne	.-8      	; 0x3498 <ConveyorMotor_VelMode+0x38>
    34a0:	88 e0       	ldi	r24, 0x08	; 8
    34a2:	ee e1       	ldi	r30, 0x1E	; 30
    34a4:	f3 e0       	ldi	r31, 0x03	; 3
    34a6:	de 01       	movw	r26, r28
    34a8:	51 96       	adiw	r26, 0x11	; 17
    34aa:	01 90       	ld	r0, Z+
    34ac:	0d 92       	st	X+, r0
    34ae:	8a 95       	dec	r24
    34b0:	e1 f7       	brne	.-8      	; 0x34aa <ConveyorMotor_VelMode+0x4a>
    34b2:	0f 2e       	mov	r0, r31
    34b4:	f5 e0       	ldi	r31, 0x05	; 5
    34b6:	ef 2e       	mov	r14, r31
    34b8:	f1 2c       	mov	r15, r1
    34ba:	f0 2d       	mov	r31, r0
    34bc:	0d ef       	ldi	r16, 0xFD	; 253
    34be:	1b e0       	ldi	r17, 0x0B	; 11
    34c0:	29 81       	ldd	r18, Y+1	; 0x01
    34c2:	3a 81       	ldd	r19, Y+2	; 0x02
    34c4:	4b 81       	ldd	r20, Y+3	; 0x03
    34c6:	5c 81       	ldd	r21, Y+4	; 0x04
    34c8:	6d 81       	ldd	r22, Y+5	; 0x05
    34ca:	7e 81       	ldd	r23, Y+6	; 0x06
    34cc:	8f 81       	ldd	r24, Y+7	; 0x07
    34ce:	98 85       	ldd	r25, Y+8	; 0x08
    34d0:	73 dc       	rcall	.-1818   	; 0x2db8 <SendandVerify>
    34d2:	29 85       	ldd	r18, Y+9	; 0x09
    34d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    34d6:	4b 85       	ldd	r20, Y+11	; 0x0b
    34d8:	5c 85       	ldd	r21, Y+12	; 0x0c
    34da:	6d 85       	ldd	r22, Y+13	; 0x0d
    34dc:	7e 85       	ldd	r23, Y+14	; 0x0e
    34de:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e0:	98 89       	ldd	r25, Y+16	; 0x10
    34e2:	6a dc       	rcall	.-1836   	; 0x2db8 <SendandVerify>
    34e4:	29 89       	ldd	r18, Y+17	; 0x11
    34e6:	3a 89       	ldd	r19, Y+18	; 0x12
    34e8:	4b 89       	ldd	r20, Y+19	; 0x13
    34ea:	5c 89       	ldd	r21, Y+20	; 0x14
    34ec:	6d 89       	ldd	r22, Y+21	; 0x15
    34ee:	7e 89       	ldd	r23, Y+22	; 0x16
    34f0:	8f 89       	ldd	r24, Y+23	; 0x17
    34f2:	98 8d       	ldd	r25, Y+24	; 0x18
    34f4:	61 dc       	rcall	.-1854   	; 0x2db8 <SendandVerify>
    34f6:	68 96       	adiw	r28, 0x18	; 24
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	f8 94       	cli
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	cd bf       	out	0x3d, r28	; 61
    3502:	df 91       	pop	r29
    3504:	cf 91       	pop	r28
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
    350a:	ff 90       	pop	r15
    350c:	ef 90       	pop	r14
    350e:	08 95       	ret

00003510 <BucketMotor_VelMode>:
    3510:	ef 92       	push	r14
    3512:	ff 92       	push	r15
    3514:	0f 93       	push	r16
    3516:	1f 93       	push	r17
    3518:	cf 93       	push	r28
    351a:	df 93       	push	r29
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	68 97       	sbiw	r28, 0x18	; 24
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	88 e0       	ldi	r24, 0x08	; 8
    352e:	e6 e2       	ldi	r30, 0x26	; 38
    3530:	f3 e0       	ldi	r31, 0x03	; 3
    3532:	de 01       	movw	r26, r28
    3534:	11 96       	adiw	r26, 0x01	; 1
    3536:	01 90       	ld	r0, Z+
    3538:	0d 92       	st	X+, r0
    353a:	8a 95       	dec	r24
    353c:	e1 f7       	brne	.-8      	; 0x3536 <BucketMotor_VelMode+0x26>
    353e:	88 e0       	ldi	r24, 0x08	; 8
    3540:	ee e2       	ldi	r30, 0x2E	; 46
    3542:	f3 e0       	ldi	r31, 0x03	; 3
    3544:	de 01       	movw	r26, r28
    3546:	19 96       	adiw	r26, 0x09	; 9
    3548:	01 90       	ld	r0, Z+
    354a:	0d 92       	st	X+, r0
    354c:	8a 95       	dec	r24
    354e:	e1 f7       	brne	.-8      	; 0x3548 <BucketMotor_VelMode+0x38>
    3550:	88 e0       	ldi	r24, 0x08	; 8
    3552:	e6 e3       	ldi	r30, 0x36	; 54
    3554:	f3 e0       	ldi	r31, 0x03	; 3
    3556:	de 01       	movw	r26, r28
    3558:	51 96       	adiw	r26, 0x11	; 17
    355a:	01 90       	ld	r0, Z+
    355c:	0d 92       	st	X+, r0
    355e:	8a 95       	dec	r24
    3560:	e1 f7       	brne	.-8      	; 0x355a <BucketMotor_VelMode+0x4a>
    3562:	68 94       	set
    3564:	ee 24       	eor	r14, r14
    3566:	e2 f8       	bld	r14, 2
    3568:	f1 2c       	mov	r15, r1
    356a:	04 e5       	ldi	r16, 0x54	; 84
    356c:	1d e0       	ldi	r17, 0x0D	; 13
    356e:	29 81       	ldd	r18, Y+1	; 0x01
    3570:	3a 81       	ldd	r19, Y+2	; 0x02
    3572:	4b 81       	ldd	r20, Y+3	; 0x03
    3574:	5c 81       	ldd	r21, Y+4	; 0x04
    3576:	6d 81       	ldd	r22, Y+5	; 0x05
    3578:	7e 81       	ldd	r23, Y+6	; 0x06
    357a:	8f 81       	ldd	r24, Y+7	; 0x07
    357c:	98 85       	ldd	r25, Y+8	; 0x08
    357e:	1c dc       	rcall	.-1992   	; 0x2db8 <SendandVerify>
    3580:	29 85       	ldd	r18, Y+9	; 0x09
    3582:	3a 85       	ldd	r19, Y+10	; 0x0a
    3584:	4b 85       	ldd	r20, Y+11	; 0x0b
    3586:	5c 85       	ldd	r21, Y+12	; 0x0c
    3588:	6d 85       	ldd	r22, Y+13	; 0x0d
    358a:	7e 85       	ldd	r23, Y+14	; 0x0e
    358c:	8f 85       	ldd	r24, Y+15	; 0x0f
    358e:	98 89       	ldd	r25, Y+16	; 0x10
    3590:	13 dc       	rcall	.-2010   	; 0x2db8 <SendandVerify>
    3592:	29 89       	ldd	r18, Y+17	; 0x11
    3594:	3a 89       	ldd	r19, Y+18	; 0x12
    3596:	4b 89       	ldd	r20, Y+19	; 0x13
    3598:	5c 89       	ldd	r21, Y+20	; 0x14
    359a:	6d 89       	ldd	r22, Y+21	; 0x15
    359c:	7e 89       	ldd	r23, Y+22	; 0x16
    359e:	8f 89       	ldd	r24, Y+23	; 0x17
    35a0:	98 8d       	ldd	r25, Y+24	; 0x18
    35a2:	0a dc       	rcall	.-2028   	; 0x2db8 <SendandVerify>
    35a4:	68 96       	adiw	r28, 0x18	; 24
    35a6:	0f b6       	in	r0, 0x3f	; 63
    35a8:	f8 94       	cli
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	cd bf       	out	0x3d, r28	; 61
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	1f 91       	pop	r17
    35b6:	0f 91       	pop	r16
    35b8:	ff 90       	pop	r15
    35ba:	ef 90       	pop	r14
    35bc:	08 95       	ret

000035be <ConveyorMotor_SetVel>:
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
    35ce:	28 97       	sbiw	r28, 0x08	; 8
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	81 37       	cpi	r24, 0x71	; 113
    35dc:	27 e1       	ldi	r18, 0x17	; 23
    35de:	92 07       	cpc	r25, r18
    35e0:	14 f0       	brlt	.+4      	; 0x35e6 <ConveyorMotor_SetVel+0x28>
    35e2:	80 e7       	ldi	r24, 0x70	; 112
    35e4:	97 e1       	ldi	r25, 0x17	; 23
    35e6:	2c e7       	ldi	r18, 0x7C	; 124
    35e8:	29 83       	std	Y+1, r18	; 0x01
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	33 e3       	ldi	r19, 0x33	; 51
    35ee:	3b 83       	std	Y+3, r19	; 0x03
    35f0:	2a 83       	std	Y+2, r18	; 0x02
    35f2:	1c 82       	std	Y+4, r1	; 0x04
    35f4:	80 39       	cpi	r24, 0x90	; 144
    35f6:	28 ee       	ldi	r18, 0xE8	; 232
    35f8:	92 07       	cpc	r25, r18
    35fa:	14 f4       	brge	.+4      	; 0x3600 <ConveyorMotor_SetVel+0x42>
    35fc:	80 e9       	ldi	r24, 0x90	; 144
    35fe:	98 ee       	ldi	r25, 0xE8	; 232
    3600:	09 2e       	mov	r0, r25
    3602:	00 0c       	add	r0, r0
    3604:	aa 0b       	sbc	r26, r26
    3606:	bb 0b       	sbc	r27, r27
    3608:	68 2f       	mov	r22, r24
    360a:	8d 83       	std	Y+5, r24	; 0x05
    360c:	9e 83       	std	Y+6, r25	; 0x06
    360e:	af 83       	std	Y+7, r26	; 0x07
    3610:	b8 87       	std	Y+8, r27	; 0x08
    3612:	0f 2e       	mov	r0, r31
    3614:	f5 e0       	ldi	r31, 0x05	; 5
    3616:	ef 2e       	mov	r14, r31
    3618:	f1 2c       	mov	r15, r1
    361a:	f0 2d       	mov	r31, r0
    361c:	0d ef       	ldi	r16, 0xFD	; 253
    361e:	1b e0       	ldi	r17, 0x0B	; 11
    3620:	29 81       	ldd	r18, Y+1	; 0x01
    3622:	3a 81       	ldd	r19, Y+2	; 0x02
    3624:	4b 81       	ldd	r20, Y+3	; 0x03
    3626:	5c 81       	ldd	r21, Y+4	; 0x04
    3628:	7e 81       	ldd	r23, Y+6	; 0x06
    362a:	8f 81       	ldd	r24, Y+7	; 0x07
    362c:	98 85       	ldd	r25, Y+8	; 0x08
    362e:	c4 db       	rcall	.-2168   	; 0x2db8 <SendandVerify>
    3630:	28 96       	adiw	r28, 0x08	; 8
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	df 91       	pop	r29
    363e:	cf 91       	pop	r28
    3640:	1f 91       	pop	r17
    3642:	0f 91       	pop	r16
    3644:	ff 90       	pop	r15
    3646:	ef 90       	pop	r14
    3648:	08 95       	ret

0000364a <ConveyorMotor_SetVelNoCommsSafety>:
    364a:	cf 93       	push	r28
    364c:	df 93       	push	r29
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
    3652:	60 97       	sbiw	r28, 0x10	; 16
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	de bf       	out	0x3e, r29	; 62
    365a:	0f be       	out	0x3f, r0	; 63
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	81 37       	cpi	r24, 0x71	; 113
    3660:	27 e1       	ldi	r18, 0x17	; 23
    3662:	92 07       	cpc	r25, r18
    3664:	14 f0       	brlt	.+4      	; 0x366a <ConveyorMotor_SetVelNoCommsSafety+0x20>
    3666:	80 e7       	ldi	r24, 0x70	; 112
    3668:	97 e1       	ldi	r25, 0x17	; 23
    366a:	2c e7       	ldi	r18, 0x7C	; 124
    366c:	29 87       	std	Y+9, r18	; 0x09
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	33 e3       	ldi	r19, 0x33	; 51
    3672:	3b 87       	std	Y+11, r19	; 0x0b
    3674:	2a 87       	std	Y+10, r18	; 0x0a
    3676:	1c 86       	std	Y+12, r1	; 0x0c
    3678:	80 39       	cpi	r24, 0x90	; 144
    367a:	28 ee       	ldi	r18, 0xE8	; 232
    367c:	92 07       	cpc	r25, r18
    367e:	14 f4       	brge	.+4      	; 0x3684 <ConveyorMotor_SetVelNoCommsSafety+0x3a>
    3680:	80 e9       	ldi	r24, 0x90	; 144
    3682:	98 ee       	ldi	r25, 0xE8	; 232
    3684:	09 2e       	mov	r0, r25
    3686:	00 0c       	add	r0, r0
    3688:	aa 0b       	sbc	r26, r26
    368a:	bb 0b       	sbc	r27, r27
    368c:	8d 87       	std	Y+13, r24	; 0x0d
    368e:	9e 87       	std	Y+14, r25	; 0x0e
    3690:	af 87       	std	Y+15, r26	; 0x0f
    3692:	b8 8b       	std	Y+16, r27	; 0x10
    3694:	07 c0       	rjmp	.+14     	; 0x36a4 <ConveyorMotor_SetVelNoCommsSafety+0x5a>
    3696:	be 01       	movw	r22, r28
    3698:	6f 5f       	subi	r22, 0xFF	; 255
    369a:	7f 4f       	sbci	r23, 0xFF	; 255
    369c:	8d ef       	ldi	r24, 0xFD	; 253
    369e:	9b e0       	ldi	r25, 0x0B	; 11
    36a0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <cb_pop_front>
    36a4:	8d ef       	ldi	r24, 0xFD	; 253
    36a6:	9b e0       	ldi	r25, 0x0B	; 11
    36a8:	0e 94 1b 01 	call	0x236	; 0x236 <cb_size>
    36ac:	18 16       	cp	r1, r24
    36ae:	19 06       	cpc	r1, r25
    36b0:	94 f3       	brlt	.-28     	; 0x3696 <ConveyorMotor_SetVelNoCommsSafety+0x4c>
    36b2:	29 85       	ldd	r18, Y+9	; 0x09
    36b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    36b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    36b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    36ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    36bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    36be:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c0:	98 89       	ldd	r25, Y+16	; 0x10
    36c2:	a4 d3       	rcall	.+1864   	; 0x3e0c <SDOWritePacket>
    36c4:	88 23       	and	r24, r24
    36c6:	a9 f3       	breq	.-22     	; 0x36b2 <ConveyorMotor_SetVelNoCommsSafety+0x68>
    36c8:	60 96       	adiw	r28, 0x10	; 16
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	08 95       	ret

000036da <BucketMotor_SetVelNoCommsSafety>:
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	68 97       	sbiw	r28, 0x18	; 24
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
    36ee:	81 37       	cpi	r24, 0x71	; 113
    36f0:	27 e1       	ldi	r18, 0x17	; 23
    36f2:	92 07       	cpc	r25, r18
    36f4:	14 f0       	brlt	.+4      	; 0x36fa <BucketMotor_SetVelNoCommsSafety+0x20>
    36f6:	80 e7       	ldi	r24, 0x70	; 112
    36f8:	97 e1       	ldi	r25, 0x17	; 23
    36fa:	28 e0       	ldi	r18, 0x08	; 8
    36fc:	ee e5       	ldi	r30, 0x5E	; 94
    36fe:	f3 e0       	ldi	r31, 0x03	; 3
    3700:	de 01       	movw	r26, r28
    3702:	19 96       	adiw	r26, 0x09	; 9
    3704:	01 90       	ld	r0, Z+
    3706:	0d 92       	st	X+, r0
    3708:	2a 95       	dec	r18
    370a:	e1 f7       	brne	.-8      	; 0x3704 <BucketMotor_SetVelNoCommsSafety+0x2a>
    370c:	2f e7       	ldi	r18, 0x7F	; 127
    370e:	29 8b       	std	Y+17, r18	; 0x11
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	33 e3       	ldi	r19, 0x33	; 51
    3714:	3b 8b       	std	Y+19, r19	; 0x13
    3716:	2a 8b       	std	Y+18, r18	; 0x12
    3718:	1c 8a       	std	Y+20, r1	; 0x14
    371a:	80 39       	cpi	r24, 0x90	; 144
    371c:	28 ee       	ldi	r18, 0xE8	; 232
    371e:	92 07       	cpc	r25, r18
    3720:	14 f4       	brge	.+4      	; 0x3726 <BucketMotor_SetVelNoCommsSafety+0x4c>
    3722:	80 e9       	ldi	r24, 0x90	; 144
    3724:	98 ee       	ldi	r25, 0xE8	; 232
    3726:	09 2e       	mov	r0, r25
    3728:	00 0c       	add	r0, r0
    372a:	aa 0b       	sbc	r26, r26
    372c:	bb 0b       	sbc	r27, r27
    372e:	8d 8b       	std	Y+21, r24	; 0x15
    3730:	9e 8b       	std	Y+22, r25	; 0x16
    3732:	af 8b       	std	Y+23, r26	; 0x17
    3734:	b8 8f       	std	Y+24, r27	; 0x18
    3736:	07 c0       	rjmp	.+14     	; 0x3746 <BucketMotor_SetVelNoCommsSafety+0x6c>
    3738:	be 01       	movw	r22, r28
    373a:	6f 5f       	subi	r22, 0xFF	; 255
    373c:	7f 4f       	sbci	r23, 0xFF	; 255
    373e:	84 e5       	ldi	r24, 0x54	; 84
    3740:	9d e0       	ldi	r25, 0x0D	; 13
    3742:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <cb_pop_front>
    3746:	84 e5       	ldi	r24, 0x54	; 84
    3748:	9d e0       	ldi	r25, 0x0D	; 13
    374a:	0e 94 1b 01 	call	0x236	; 0x236 <cb_size>
    374e:	18 16       	cp	r1, r24
    3750:	19 06       	cpc	r1, r25
    3752:	94 f3       	brlt	.-28     	; 0x3738 <BucketMotor_SetVelNoCommsSafety+0x5e>
    3754:	29 85       	ldd	r18, Y+9	; 0x09
    3756:	3a 85       	ldd	r19, Y+10	; 0x0a
    3758:	4b 85       	ldd	r20, Y+11	; 0x0b
    375a:	5c 85       	ldd	r21, Y+12	; 0x0c
    375c:	6d 85       	ldd	r22, Y+13	; 0x0d
    375e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3760:	8f 85       	ldd	r24, Y+15	; 0x0f
    3762:	98 89       	ldd	r25, Y+16	; 0x10
    3764:	53 d3       	rcall	.+1702   	; 0x3e0c <SDOWritePacket>
    3766:	88 23       	and	r24, r24
    3768:	a9 f3       	breq	.-22     	; 0x3754 <BucketMotor_SetVelNoCommsSafety+0x7a>
    376a:	29 89       	ldd	r18, Y+17	; 0x11
    376c:	3a 89       	ldd	r19, Y+18	; 0x12
    376e:	4b 89       	ldd	r20, Y+19	; 0x13
    3770:	5c 89       	ldd	r21, Y+20	; 0x14
    3772:	6d 89       	ldd	r22, Y+21	; 0x15
    3774:	7e 89       	ldd	r23, Y+22	; 0x16
    3776:	8f 89       	ldd	r24, Y+23	; 0x17
    3778:	98 8d       	ldd	r25, Y+24	; 0x18
    377a:	48 d3       	rcall	.+1680   	; 0x3e0c <SDOWritePacket>
    377c:	88 23       	and	r24, r24
    377e:	a9 f3       	breq	.-22     	; 0x376a <BucketMotor_SetVelNoCommsSafety+0x90>
    3780:	68 96       	adiw	r28, 0x18	; 24
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	08 95       	ret

00003792 <BucketMotor_SetLimit>:

void BucketMotor_SetLimit(void)
{
    3792:	ef 92       	push	r14
    3794:	ff 92       	push	r15
    3796:	0f 93       	push	r16
    3798:	1f 93       	push	r17
    379a:	cf 93       	push	r28
    379c:	df 93       	push	r29
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	68 97       	sbiw	r28, 0x18	; 24
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
	SDO_packet PositiveLimit = {BUCKETMOTORID, 0x3055, 0x00, 0x130}; //activates digital input 0 as positive limit switch high active
    37ae:	88 e0       	ldi	r24, 0x08	; 8
    37b0:	e6 e6       	ldi	r30, 0x66	; 102
    37b2:	f3 e0       	ldi	r31, 0x03	; 3
    37b4:	de 01       	movw	r26, r28
    37b6:	11 96       	adiw	r26, 0x01	; 1
    37b8:	01 90       	ld	r0, Z+
    37ba:	0d 92       	st	X+, r0
    37bc:	8a 95       	dec	r24
    37be:	e1 f7       	brne	.-8      	; 0x37b8 <BucketMotor_SetLimit+0x26>
	SDO_packet NegativeLimit = {BUCKETMOTORID, 0x3056, 0x00, 0x132}; //activates digital input 1 as negative limit switch high active
    37c0:	88 e0       	ldi	r24, 0x08	; 8
    37c2:	ee e6       	ldi	r30, 0x6E	; 110
    37c4:	f3 e0       	ldi	r31, 0x03	; 3
    37c6:	de 01       	movw	r26, r28
    37c8:	19 96       	adiw	r26, 0x09	; 9
    37ca:	01 90       	ld	r0, Z+
    37cc:	0d 92       	st	X+, r0
    37ce:	8a 95       	dec	r24
    37d0:	e1 f7       	brne	.-8      	; 0x37ca <BucketMotor_SetLimit+0x38>
	SDO_packet HomeLimit = {BUCKETMOTORID, 0x3056, 0x00, 0x132}; //activates digital input 2 as home limit switch high active
    37d2:	88 e0       	ldi	r24, 0x08	; 8
    37d4:	ee e6       	ldi	r30, 0x6E	; 110
    37d6:	f3 e0       	ldi	r31, 0x03	; 3
    37d8:	de 01       	movw	r26, r28
    37da:	51 96       	adiw	r26, 0x11	; 17
    37dc:	01 90       	ld	r0, Z+
    37de:	0d 92       	st	X+, r0
    37e0:	8a 95       	dec	r24
    37e2:	e1 f7       	brne	.-8      	; 0x37dc <BucketMotor_SetLimit+0x4a>
	//SDO_packet Home_Method = {BUCKETMOTORID, 0x37B2, 0x00, 2}; //homes by turning CW to positive limit, should be what we want.
	
	SendandVerify(PositiveLimit,  &BucketMotor_Buffer, BUCKETMOTOR_STATUS);
    37e4:	68 94       	set
    37e6:	ee 24       	eor	r14, r14
    37e8:	e2 f8       	bld	r14, 2
    37ea:	f1 2c       	mov	r15, r1
    37ec:	04 e5       	ldi	r16, 0x54	; 84
    37ee:	1d e0       	ldi	r17, 0x0D	; 13
    37f0:	29 81       	ldd	r18, Y+1	; 0x01
    37f2:	3a 81       	ldd	r19, Y+2	; 0x02
    37f4:	4b 81       	ldd	r20, Y+3	; 0x03
    37f6:	5c 81       	ldd	r21, Y+4	; 0x04
    37f8:	6d 81       	ldd	r22, Y+5	; 0x05
    37fa:	7e 81       	ldd	r23, Y+6	; 0x06
    37fc:	8f 81       	ldd	r24, Y+7	; 0x07
    37fe:	98 85       	ldd	r25, Y+8	; 0x08
    3800:	db da       	rcall	.-2634   	; 0x2db8 <SendandVerify>
	SendandVerify(NegativeLimit,  &BucketMotor_Buffer, BUCKETMOTOR_STATUS);
    3802:	29 85       	ldd	r18, Y+9	; 0x09
    3804:	3a 85       	ldd	r19, Y+10	; 0x0a
    3806:	4b 85       	ldd	r20, Y+11	; 0x0b
    3808:	5c 85       	ldd	r21, Y+12	; 0x0c
    380a:	6d 85       	ldd	r22, Y+13	; 0x0d
    380c:	7e 85       	ldd	r23, Y+14	; 0x0e
    380e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3810:	98 89       	ldd	r25, Y+16	; 0x10
    3812:	d2 da       	rcall	.-2652   	; 0x2db8 <SendandVerify>
	SendandVerify(HomeLimit,  &BucketMotor_Buffer, BUCKETMOTOR_STATUS);
    3814:	29 89       	ldd	r18, Y+17	; 0x11
    3816:	3a 89       	ldd	r19, Y+18	; 0x12
    3818:	4b 89       	ldd	r20, Y+19	; 0x13
    381a:	5c 89       	ldd	r21, Y+20	; 0x14
    381c:	6d 89       	ldd	r22, Y+21	; 0x15
    381e:	7e 89       	ldd	r23, Y+22	; 0x16
    3820:	8f 89       	ldd	r24, Y+23	; 0x17
    3822:	98 8d       	ldd	r25, Y+24	; 0x18
    3824:	c9 da       	rcall	.-2670   	; 0x2db8 <SendandVerify>
	//SendandVerify(Home_Method,  &BucketMotor_Buffer, BUCKETMOTOR_STATUS);
}
    3826:	68 96       	adiw	r28, 0x18	; 24
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	de bf       	out	0x3e, r29	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	cd bf       	out	0x3d, r28	; 61
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	ff 90       	pop	r15
    383c:	ef 90       	pop	r14
    383e:	08 95       	ret

00003840 <ReceiveMotor2>:
	}
	else
	{
		return 0;
	}
}
    3840:	bc 01       	movw	r22, r24
    3842:	6d 5f       	subi	r22, 0xFD	; 253
    3844:	7f 4f       	sbci	r23, 0xFF	; 255
    3846:	8b e0       	ldi	r24, 0x0B	; 11
    3848:	9c e0       	ldi	r25, 0x0C	; 12
    384a:	0c 94 be 00 	jmp	0x17c	; 0x17c <cb_push_back>
    384e:	08 95       	ret

00003850 <RightMotor_Init>:
    3850:	ef 92       	push	r14
    3852:	ff 92       	push	r15
    3854:	0f 93       	push	r16
    3856:	1f 93       	push	r17
    3858:	cf 93       	push	r28
    385a:	df 93       	push	r29
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    3860:	c8 56       	subi	r28, 0x68	; 104
    3862:	d1 09       	sbc	r29, r1
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	88 e0       	ldi	r24, 0x08	; 8
    3870:	ee eb       	ldi	r30, 0xBE	; 190
    3872:	f3 e0       	ldi	r31, 0x03	; 3
    3874:	de 01       	movw	r26, r28
    3876:	11 96       	adiw	r26, 0x01	; 1
    3878:	01 90       	ld	r0, Z+
    387a:	0d 92       	st	X+, r0
    387c:	8a 95       	dec	r24
    387e:	e1 f7       	brne	.-8      	; 0x3878 <RightMotor_Init+0x28>
    3880:	88 e0       	ldi	r24, 0x08	; 8
    3882:	e6 ec       	ldi	r30, 0xC6	; 198
    3884:	f3 e0       	ldi	r31, 0x03	; 3
    3886:	de 01       	movw	r26, r28
    3888:	19 96       	adiw	r26, 0x09	; 9
    388a:	01 90       	ld	r0, Z+
    388c:	0d 92       	st	X+, r0
    388e:	8a 95       	dec	r24
    3890:	e1 f7       	brne	.-8      	; 0x388a <RightMotor_Init+0x3a>
    3892:	88 e0       	ldi	r24, 0x08	; 8
    3894:	ee ec       	ldi	r30, 0xCE	; 206
    3896:	f3 e0       	ldi	r31, 0x03	; 3
    3898:	de 01       	movw	r26, r28
    389a:	51 96       	adiw	r26, 0x11	; 17
    389c:	01 90       	ld	r0, Z+
    389e:	0d 92       	st	X+, r0
    38a0:	8a 95       	dec	r24
    38a2:	e1 f7       	brne	.-8      	; 0x389c <RightMotor_Init+0x4c>
    38a4:	88 e0       	ldi	r24, 0x08	; 8
    38a6:	e6 ed       	ldi	r30, 0xD6	; 214
    38a8:	f3 e0       	ldi	r31, 0x03	; 3
    38aa:	de 01       	movw	r26, r28
    38ac:	59 96       	adiw	r26, 0x19	; 25
    38ae:	01 90       	ld	r0, Z+
    38b0:	0d 92       	st	X+, r0
    38b2:	8a 95       	dec	r24
    38b4:	e1 f7       	brne	.-8      	; 0x38ae <RightMotor_Init+0x5e>
    38b6:	88 e0       	ldi	r24, 0x08	; 8
    38b8:	ee ed       	ldi	r30, 0xDE	; 222
    38ba:	f3 e0       	ldi	r31, 0x03	; 3
    38bc:	de 01       	movw	r26, r28
    38be:	91 96       	adiw	r26, 0x21	; 33
    38c0:	01 90       	ld	r0, Z+
    38c2:	0d 92       	st	X+, r0
    38c4:	8a 95       	dec	r24
    38c6:	e1 f7       	brne	.-8      	; 0x38c0 <RightMotor_Init+0x70>
    38c8:	88 e0       	ldi	r24, 0x08	; 8
    38ca:	e6 ee       	ldi	r30, 0xE6	; 230
    38cc:	f3 e0       	ldi	r31, 0x03	; 3
    38ce:	de 01       	movw	r26, r28
    38d0:	99 96       	adiw	r26, 0x29	; 41
    38d2:	01 90       	ld	r0, Z+
    38d4:	0d 92       	st	X+, r0
    38d6:	8a 95       	dec	r24
    38d8:	e1 f7       	brne	.-8      	; 0x38d2 <RightMotor_Init+0x82>
    38da:	88 e0       	ldi	r24, 0x08	; 8
    38dc:	ee ee       	ldi	r30, 0xEE	; 238
    38de:	f3 e0       	ldi	r31, 0x03	; 3
    38e0:	de 01       	movw	r26, r28
    38e2:	d1 96       	adiw	r26, 0x31	; 49
    38e4:	01 90       	ld	r0, Z+
    38e6:	0d 92       	st	X+, r0
    38e8:	8a 95       	dec	r24
    38ea:	e1 f7       	brne	.-8      	; 0x38e4 <RightMotor_Init+0x94>
    38ec:	88 e0       	ldi	r24, 0x08	; 8
    38ee:	e6 ef       	ldi	r30, 0xF6	; 246
    38f0:	f3 e0       	ldi	r31, 0x03	; 3
    38f2:	de 01       	movw	r26, r28
    38f4:	d9 96       	adiw	r26, 0x39	; 57
    38f6:	01 90       	ld	r0, Z+
    38f8:	0d 92       	st	X+, r0
    38fa:	8a 95       	dec	r24
    38fc:	e1 f7       	brne	.-8      	; 0x38f6 <RightMotor_Init+0xa6>
    38fe:	88 e0       	ldi	r24, 0x08	; 8
    3900:	ee ef       	ldi	r30, 0xFE	; 254
    3902:	f3 e0       	ldi	r31, 0x03	; 3
    3904:	de 01       	movw	r26, r28
    3906:	af 5b       	subi	r26, 0xBF	; 191
    3908:	bf 4f       	sbci	r27, 0xFF	; 255
    390a:	01 90       	ld	r0, Z+
    390c:	0d 92       	st	X+, r0
    390e:	8a 95       	dec	r24
    3910:	e1 f7       	brne	.-8      	; 0x390a <RightMotor_Init+0xba>
    3912:	88 e0       	ldi	r24, 0x08	; 8
    3914:	e6 e0       	ldi	r30, 0x06	; 6
    3916:	f4 e0       	ldi	r31, 0x04	; 4
    3918:	de 01       	movw	r26, r28
    391a:	a7 5b       	subi	r26, 0xB7	; 183
    391c:	bf 4f       	sbci	r27, 0xFF	; 255
    391e:	01 90       	ld	r0, Z+
    3920:	0d 92       	st	X+, r0
    3922:	8a 95       	dec	r24
    3924:	e1 f7       	brne	.-8      	; 0x391e <RightMotor_Init+0xce>
    3926:	88 e0       	ldi	r24, 0x08	; 8
    3928:	ee e0       	ldi	r30, 0x0E	; 14
    392a:	f4 e0       	ldi	r31, 0x04	; 4
    392c:	de 01       	movw	r26, r28
    392e:	af 5a       	subi	r26, 0xAF	; 175
    3930:	bf 4f       	sbci	r27, 0xFF	; 255
    3932:	01 90       	ld	r0, Z+
    3934:	0d 92       	st	X+, r0
    3936:	8a 95       	dec	r24
    3938:	e1 f7       	brne	.-8      	; 0x3932 <RightMotor_Init+0xe2>
    393a:	88 e0       	ldi	r24, 0x08	; 8
    393c:	e6 e1       	ldi	r30, 0x16	; 22
    393e:	f4 e0       	ldi	r31, 0x04	; 4
    3940:	de 01       	movw	r26, r28
    3942:	a7 5a       	subi	r26, 0xA7	; 167
    3944:	bf 4f       	sbci	r27, 0xFF	; 255
    3946:	01 90       	ld	r0, Z+
    3948:	0d 92       	st	X+, r0
    394a:	8a 95       	dec	r24
    394c:	e1 f7       	brne	.-8      	; 0x3946 <RightMotor_Init+0xf6>
    394e:	88 e0       	ldi	r24, 0x08	; 8
    3950:	ee e1       	ldi	r30, 0x1E	; 30
    3952:	f4 e0       	ldi	r31, 0x04	; 4
    3954:	de 01       	movw	r26, r28
    3956:	af 59       	subi	r26, 0x9F	; 159
    3958:	bf 4f       	sbci	r27, 0xFF	; 255
    395a:	01 90       	ld	r0, Z+
    395c:	0d 92       	st	X+, r0
    395e:	8a 95       	dec	r24
    3960:	e1 f7       	brne	.-8      	; 0x395a <RightMotor_Init+0x10a>
    3962:	48 e0       	ldi	r20, 0x08	; 8
    3964:	50 e0       	ldi	r21, 0x00	; 0
    3966:	64 e0       	ldi	r22, 0x04	; 4
    3968:	70 e0       	ldi	r23, 0x00	; 0
    396a:	8b e0       	ldi	r24, 0x0B	; 11
    396c:	9c e0       	ldi	r25, 0x0C	; 12
    396e:	0e 94 8e 00 	call	0x11c	; 0x11c <cb_init>
    3972:	20 e2       	ldi	r18, 0x20	; 32
    3974:	3c e1       	ldi	r19, 0x1C	; 28
    3976:	4f ef       	ldi	r20, 0xFF	; 255
    3978:	57 e0       	ldi	r21, 0x07	; 7
    397a:	6e ef       	ldi	r22, 0xFE	; 254
    397c:	75 e0       	ldi	r23, 0x05	; 5
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	0e 94 70 05 	call	0xae0	; 0xae0 <prepare_rx>
    3984:	88 23       	and	r24, r24
    3986:	09 f0       	breq	.+2      	; 0x398a <RightMotor_Init+0x13a>
    3988:	98 95       	break
    398a:	0f 2e       	mov	r0, r31
    398c:	f6 e0       	ldi	r31, 0x06	; 6
    398e:	ef 2e       	mov	r14, r31
    3990:	f1 2c       	mov	r15, r1
    3992:	f0 2d       	mov	r31, r0
    3994:	0b e0       	ldi	r16, 0x0B	; 11
    3996:	1c e0       	ldi	r17, 0x0C	; 12
    3998:	29 81       	ldd	r18, Y+1	; 0x01
    399a:	3a 81       	ldd	r19, Y+2	; 0x02
    399c:	4b 81       	ldd	r20, Y+3	; 0x03
    399e:	5c 81       	ldd	r21, Y+4	; 0x04
    39a0:	6d 81       	ldd	r22, Y+5	; 0x05
    39a2:	7e 81       	ldd	r23, Y+6	; 0x06
    39a4:	8f 81       	ldd	r24, Y+7	; 0x07
    39a6:	98 85       	ldd	r25, Y+8	; 0x08
    39a8:	07 da       	rcall	.-3058   	; 0x2db8 <SendandVerify>
    39aa:	a2 96       	adiw	r28, 0x22	; 34
    39ac:	2f ad       	ldd	r18, Y+63	; 0x3f
    39ae:	a2 97       	sbiw	r28, 0x22	; 34
    39b0:	a3 96       	adiw	r28, 0x23	; 35
    39b2:	3f ad       	ldd	r19, Y+63	; 0x3f
    39b4:	a3 97       	sbiw	r28, 0x23	; 35
    39b6:	a4 96       	adiw	r28, 0x24	; 36
    39b8:	4f ad       	ldd	r20, Y+63	; 0x3f
    39ba:	a4 97       	sbiw	r28, 0x24	; 36
    39bc:	a5 96       	adiw	r28, 0x25	; 37
    39be:	5f ad       	ldd	r21, Y+63	; 0x3f
    39c0:	a5 97       	sbiw	r28, 0x25	; 37
    39c2:	a6 96       	adiw	r28, 0x26	; 38
    39c4:	6f ad       	ldd	r22, Y+63	; 0x3f
    39c6:	a6 97       	sbiw	r28, 0x26	; 38
    39c8:	a7 96       	adiw	r28, 0x27	; 39
    39ca:	7f ad       	ldd	r23, Y+63	; 0x3f
    39cc:	a7 97       	sbiw	r28, 0x27	; 39
    39ce:	a8 96       	adiw	r28, 0x28	; 40
    39d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    39d2:	a8 97       	sbiw	r28, 0x28	; 40
    39d4:	a9 96       	adiw	r28, 0x29	; 41
    39d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    39d8:	a9 97       	sbiw	r28, 0x29	; 41
    39da:	ee d9       	rcall	.-3108   	; 0x2db8 <SendandVerify>
    39dc:	29 a1       	ldd	r18, Y+33	; 0x21
    39de:	3a a1       	ldd	r19, Y+34	; 0x22
    39e0:	4b a1       	ldd	r20, Y+35	; 0x23
    39e2:	5c a1       	ldd	r21, Y+36	; 0x24
    39e4:	6d a1       	ldd	r22, Y+37	; 0x25
    39e6:	7e a1       	ldd	r23, Y+38	; 0x26
    39e8:	8f a1       	ldd	r24, Y+39	; 0x27
    39ea:	98 a5       	ldd	r25, Y+40	; 0x28
    39ec:	e5 d9       	rcall	.-3126   	; 0x2db8 <SendandVerify>
    39ee:	29 a5       	ldd	r18, Y+41	; 0x29
    39f0:	3a a5       	ldd	r19, Y+42	; 0x2a
    39f2:	4b a5       	ldd	r20, Y+43	; 0x2b
    39f4:	5c a5       	ldd	r21, Y+44	; 0x2c
    39f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    39f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    39fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    39fc:	98 a9       	ldd	r25, Y+48	; 0x30
    39fe:	dc d9       	rcall	.-3144   	; 0x2db8 <SendandVerify>
    3a00:	29 a9       	ldd	r18, Y+49	; 0x31
    3a02:	3a a9       	ldd	r19, Y+50	; 0x32
    3a04:	4b a9       	ldd	r20, Y+51	; 0x33
    3a06:	5c a9       	ldd	r21, Y+52	; 0x34
    3a08:	6d a9       	ldd	r22, Y+53	; 0x35
    3a0a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a0c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a0e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a10:	d3 d9       	rcall	.-3162   	; 0x2db8 <SendandVerify>
    3a12:	29 85       	ldd	r18, Y+9	; 0x09
    3a14:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a16:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a18:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a1a:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a1c:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a20:	98 89       	ldd	r25, Y+16	; 0x10
    3a22:	ca d9       	rcall	.-3180   	; 0x2db8 <SendandVerify>
    3a24:	29 89       	ldd	r18, Y+17	; 0x11
    3a26:	3a 89       	ldd	r19, Y+18	; 0x12
    3a28:	4b 89       	ldd	r20, Y+19	; 0x13
    3a2a:	5c 89       	ldd	r21, Y+20	; 0x14
    3a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a30:	8f 89       	ldd	r24, Y+23	; 0x17
    3a32:	98 8d       	ldd	r25, Y+24	; 0x18
    3a34:	c1 d9       	rcall	.-3198   	; 0x2db8 <SendandVerify>
    3a36:	8f e3       	ldi	r24, 0x3F	; 63
    3a38:	9f e1       	ldi	r25, 0x1F	; 31
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	f1 f7       	brne	.-4      	; 0x3a3a <RightMotor_Init+0x1ea>
    3a3e:	00 c0       	rjmp	.+0      	; 0x3a40 <RightMotor_Init+0x1f0>
    3a40:	00 00       	nop
    3a42:	29 ad       	ldd	r18, Y+57	; 0x39
    3a44:	3a ad       	ldd	r19, Y+58	; 0x3a
    3a46:	4b ad       	ldd	r20, Y+59	; 0x3b
    3a48:	5c ad       	ldd	r21, Y+60	; 0x3c
    3a4a:	6d ad       	ldd	r22, Y+61	; 0x3d
    3a4c:	7e ad       	ldd	r23, Y+62	; 0x3e
    3a4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a50:	21 96       	adiw	r28, 0x01	; 1
    3a52:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a54:	21 97       	sbiw	r28, 0x01	; 1
    3a56:	b0 d9       	rcall	.-3232   	; 0x2db8 <SendandVerify>
    3a58:	22 96       	adiw	r28, 0x02	; 2
    3a5a:	2f ad       	ldd	r18, Y+63	; 0x3f
    3a5c:	22 97       	sbiw	r28, 0x02	; 2
    3a5e:	23 96       	adiw	r28, 0x03	; 3
    3a60:	3f ad       	ldd	r19, Y+63	; 0x3f
    3a62:	23 97       	sbiw	r28, 0x03	; 3
    3a64:	24 96       	adiw	r28, 0x04	; 4
    3a66:	4f ad       	ldd	r20, Y+63	; 0x3f
    3a68:	24 97       	sbiw	r28, 0x04	; 4
    3a6a:	25 96       	adiw	r28, 0x05	; 5
    3a6c:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a6e:	25 97       	sbiw	r28, 0x05	; 5
    3a70:	26 96       	adiw	r28, 0x06	; 6
    3a72:	6f ad       	ldd	r22, Y+63	; 0x3f
    3a74:	26 97       	sbiw	r28, 0x06	; 6
    3a76:	27 96       	adiw	r28, 0x07	; 7
    3a78:	7f ad       	ldd	r23, Y+63	; 0x3f
    3a7a:	27 97       	sbiw	r28, 0x07	; 7
    3a7c:	28 96       	adiw	r28, 0x08	; 8
    3a7e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a80:	28 97       	sbiw	r28, 0x08	; 8
    3a82:	29 96       	adiw	r28, 0x09	; 9
    3a84:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a86:	29 97       	sbiw	r28, 0x09	; 9
    3a88:	97 d9       	rcall	.-3282   	; 0x2db8 <SendandVerify>
    3a8a:	2a 96       	adiw	r28, 0x0a	; 10
    3a8c:	2f ad       	ldd	r18, Y+63	; 0x3f
    3a8e:	2a 97       	sbiw	r28, 0x0a	; 10
    3a90:	2b 96       	adiw	r28, 0x0b	; 11
    3a92:	3f ad       	ldd	r19, Y+63	; 0x3f
    3a94:	2b 97       	sbiw	r28, 0x0b	; 11
    3a96:	2c 96       	adiw	r28, 0x0c	; 12
    3a98:	4f ad       	ldd	r20, Y+63	; 0x3f
    3a9a:	2c 97       	sbiw	r28, 0x0c	; 12
    3a9c:	2d 96       	adiw	r28, 0x0d	; 13
    3a9e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3aa0:	2d 97       	sbiw	r28, 0x0d	; 13
    3aa2:	2e 96       	adiw	r28, 0x0e	; 14
    3aa4:	6f ad       	ldd	r22, Y+63	; 0x3f
    3aa6:	2e 97       	sbiw	r28, 0x0e	; 14
    3aa8:	2f 96       	adiw	r28, 0x0f	; 15
    3aaa:	7f ad       	ldd	r23, Y+63	; 0x3f
    3aac:	2f 97       	sbiw	r28, 0x0f	; 15
    3aae:	60 96       	adiw	r28, 0x10	; 16
    3ab0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ab2:	60 97       	sbiw	r28, 0x10	; 16
    3ab4:	61 96       	adiw	r28, 0x11	; 17
    3ab6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ab8:	61 97       	sbiw	r28, 0x11	; 17
    3aba:	7e d9       	rcall	.-3332   	; 0x2db8 <SendandVerify>
    3abc:	62 96       	adiw	r28, 0x12	; 18
    3abe:	2f ad       	ldd	r18, Y+63	; 0x3f
    3ac0:	62 97       	sbiw	r28, 0x12	; 18
    3ac2:	63 96       	adiw	r28, 0x13	; 19
    3ac4:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ac6:	63 97       	sbiw	r28, 0x13	; 19
    3ac8:	64 96       	adiw	r28, 0x14	; 20
    3aca:	4f ad       	ldd	r20, Y+63	; 0x3f
    3acc:	64 97       	sbiw	r28, 0x14	; 20
    3ace:	65 96       	adiw	r28, 0x15	; 21
    3ad0:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ad2:	65 97       	sbiw	r28, 0x15	; 21
    3ad4:	66 96       	adiw	r28, 0x16	; 22
    3ad6:	6f ad       	ldd	r22, Y+63	; 0x3f
    3ad8:	66 97       	sbiw	r28, 0x16	; 22
    3ada:	67 96       	adiw	r28, 0x17	; 23
    3adc:	7f ad       	ldd	r23, Y+63	; 0x3f
    3ade:	67 97       	sbiw	r28, 0x17	; 23
    3ae0:	68 96       	adiw	r28, 0x18	; 24
    3ae2:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ae4:	68 97       	sbiw	r28, 0x18	; 24
    3ae6:	69 96       	adiw	r28, 0x19	; 25
    3ae8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3aea:	69 97       	sbiw	r28, 0x19	; 25
    3aec:	65 d9       	rcall	.-3382   	; 0x2db8 <SendandVerify>
    3aee:	29 8d       	ldd	r18, Y+25	; 0x19
    3af0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3af2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3af4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3af6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3af8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3afa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3afc:	98 a1       	ldd	r25, Y+32	; 0x20
    3afe:	5c d9       	rcall	.-3400   	; 0x2db8 <SendandVerify>
    3b00:	6a 96       	adiw	r28, 0x1a	; 26
    3b02:	2f ad       	ldd	r18, Y+63	; 0x3f
    3b04:	6a 97       	sbiw	r28, 0x1a	; 26
    3b06:	6b 96       	adiw	r28, 0x1b	; 27
    3b08:	3f ad       	ldd	r19, Y+63	; 0x3f
    3b0a:	6b 97       	sbiw	r28, 0x1b	; 27
    3b0c:	6c 96       	adiw	r28, 0x1c	; 28
    3b0e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3b10:	6c 97       	sbiw	r28, 0x1c	; 28
    3b12:	6d 96       	adiw	r28, 0x1d	; 29
    3b14:	5f ad       	ldd	r21, Y+63	; 0x3f
    3b16:	6d 97       	sbiw	r28, 0x1d	; 29
    3b18:	6e 96       	adiw	r28, 0x1e	; 30
    3b1a:	6f ad       	ldd	r22, Y+63	; 0x3f
    3b1c:	6e 97       	sbiw	r28, 0x1e	; 30
    3b1e:	6f 96       	adiw	r28, 0x1f	; 31
    3b20:	7f ad       	ldd	r23, Y+63	; 0x3f
    3b22:	6f 97       	sbiw	r28, 0x1f	; 31
    3b24:	a0 96       	adiw	r28, 0x20	; 32
    3b26:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b28:	a0 97       	sbiw	r28, 0x20	; 32
    3b2a:	a1 96       	adiw	r28, 0x21	; 33
    3b2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b2e:	a1 97       	sbiw	r28, 0x21	; 33
    3b30:	43 d9       	rcall	.-3450   	; 0x2db8 <SendandVerify>
    3b32:	c8 59       	subi	r28, 0x98	; 152
    3b34:	df 4f       	sbci	r29, 0xFF	; 255
    3b36:	0f b6       	in	r0, 0x3f	; 63
    3b38:	f8 94       	cli
    3b3a:	de bf       	out	0x3e, r29	; 62
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	cd bf       	out	0x3d, r28	; 61
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	1f 91       	pop	r17
    3b46:	0f 91       	pop	r16
    3b48:	ff 90       	pop	r15
    3b4a:	ef 90       	pop	r14
    3b4c:	08 95       	ret

00003b4e <RightMotor_VelMode>:
    3b4e:	ef 92       	push	r14
    3b50:	ff 92       	push	r15
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	cd b7       	in	r28, 0x3d	; 61
    3b5c:	de b7       	in	r29, 0x3e	; 62
    3b5e:	68 97       	sbiw	r28, 0x18	; 24
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
    3b6a:	88 e0       	ldi	r24, 0x08	; 8
    3b6c:	e6 e2       	ldi	r30, 0x26	; 38
    3b6e:	f4 e0       	ldi	r31, 0x04	; 4
    3b70:	de 01       	movw	r26, r28
    3b72:	11 96       	adiw	r26, 0x01	; 1
    3b74:	01 90       	ld	r0, Z+
    3b76:	0d 92       	st	X+, r0
    3b78:	8a 95       	dec	r24
    3b7a:	e1 f7       	brne	.-8      	; 0x3b74 <RightMotor_VelMode+0x26>
    3b7c:	88 e0       	ldi	r24, 0x08	; 8
    3b7e:	ee e2       	ldi	r30, 0x2E	; 46
    3b80:	f4 e0       	ldi	r31, 0x04	; 4
    3b82:	de 01       	movw	r26, r28
    3b84:	19 96       	adiw	r26, 0x09	; 9
    3b86:	01 90       	ld	r0, Z+
    3b88:	0d 92       	st	X+, r0
    3b8a:	8a 95       	dec	r24
    3b8c:	e1 f7       	brne	.-8      	; 0x3b86 <RightMotor_VelMode+0x38>
    3b8e:	88 e0       	ldi	r24, 0x08	; 8
    3b90:	e6 e3       	ldi	r30, 0x36	; 54
    3b92:	f4 e0       	ldi	r31, 0x04	; 4
    3b94:	de 01       	movw	r26, r28
    3b96:	51 96       	adiw	r26, 0x11	; 17
    3b98:	01 90       	ld	r0, Z+
    3b9a:	0d 92       	st	X+, r0
    3b9c:	8a 95       	dec	r24
    3b9e:	e1 f7       	brne	.-8      	; 0x3b98 <RightMotor_VelMode+0x4a>
    3ba0:	0f 2e       	mov	r0, r31
    3ba2:	f6 e0       	ldi	r31, 0x06	; 6
    3ba4:	ef 2e       	mov	r14, r31
    3ba6:	f1 2c       	mov	r15, r1
    3ba8:	f0 2d       	mov	r31, r0
    3baa:	0b e0       	ldi	r16, 0x0B	; 11
    3bac:	1c e0       	ldi	r17, 0x0C	; 12
    3bae:	29 81       	ldd	r18, Y+1	; 0x01
    3bb0:	3a 81       	ldd	r19, Y+2	; 0x02
    3bb2:	4b 81       	ldd	r20, Y+3	; 0x03
    3bb4:	5c 81       	ldd	r21, Y+4	; 0x04
    3bb6:	6d 81       	ldd	r22, Y+5	; 0x05
    3bb8:	7e 81       	ldd	r23, Y+6	; 0x06
    3bba:	8f 81       	ldd	r24, Y+7	; 0x07
    3bbc:	98 85       	ldd	r25, Y+8	; 0x08
    3bbe:	fc d8       	rcall	.-3592   	; 0x2db8 <SendandVerify>
    3bc0:	29 85       	ldd	r18, Y+9	; 0x09
    3bc2:	3a 85       	ldd	r19, Y+10	; 0x0a
    3bc4:	4b 85       	ldd	r20, Y+11	; 0x0b
    3bc6:	5c 85       	ldd	r21, Y+12	; 0x0c
    3bc8:	6d 85       	ldd	r22, Y+13	; 0x0d
    3bca:	7e 85       	ldd	r23, Y+14	; 0x0e
    3bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bce:	98 89       	ldd	r25, Y+16	; 0x10
    3bd0:	f3 d8       	rcall	.-3610   	; 0x2db8 <SendandVerify>
    3bd2:	29 89       	ldd	r18, Y+17	; 0x11
    3bd4:	3a 89       	ldd	r19, Y+18	; 0x12
    3bd6:	4b 89       	ldd	r20, Y+19	; 0x13
    3bd8:	5c 89       	ldd	r21, Y+20	; 0x14
    3bda:	6d 89       	ldd	r22, Y+21	; 0x15
    3bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    3bde:	8f 89       	ldd	r24, Y+23	; 0x17
    3be0:	98 8d       	ldd	r25, Y+24	; 0x18
    3be2:	ea d8       	rcall	.-3628   	; 0x2db8 <SendandVerify>
    3be4:	68 96       	adiw	r28, 0x18	; 24
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	de bf       	out	0x3e, r29	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	cd bf       	out	0x3d, r28	; 61
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	1f 91       	pop	r17
    3bf6:	0f 91       	pop	r16
    3bf8:	ff 90       	pop	r15
    3bfa:	ef 90       	pop	r14
    3bfc:	08 95       	ret

00003bfe <RightMotor_SetVel>:
    3bfe:	ef 92       	push	r14
    3c00:	ff 92       	push	r15
    3c02:	0f 93       	push	r16
    3c04:	1f 93       	push	r17
    3c06:	cf 93       	push	r28
    3c08:	df 93       	push	r29
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	28 97       	sbiw	r28, 0x08	; 8
    3c10:	0f b6       	in	r0, 0x3f	; 63
    3c12:	f8 94       	cli
    3c14:	de bf       	out	0x3e, r29	; 62
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	cd bf       	out	0x3d, r28	; 61
    3c1a:	81 37       	cpi	r24, 0x71	; 113
    3c1c:	27 e1       	ldi	r18, 0x17	; 23
    3c1e:	92 07       	cpc	r25, r18
    3c20:	14 f0       	brlt	.+4      	; 0x3c26 <RightMotor_SetVel+0x28>
    3c22:	80 e7       	ldi	r24, 0x70	; 112
    3c24:	97 e1       	ldi	r25, 0x17	; 23
    3c26:	2e e7       	ldi	r18, 0x7E	; 126
    3c28:	29 83       	std	Y+1, r18	; 0x01
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	33 e3       	ldi	r19, 0x33	; 51
    3c2e:	3b 83       	std	Y+3, r19	; 0x03
    3c30:	2a 83       	std	Y+2, r18	; 0x02
    3c32:	1c 82       	std	Y+4, r1	; 0x04
    3c34:	80 39       	cpi	r24, 0x90	; 144
    3c36:	28 ee       	ldi	r18, 0xE8	; 232
    3c38:	92 07       	cpc	r25, r18
    3c3a:	14 f4       	brge	.+4      	; 0x3c40 <RightMotor_SetVel+0x42>
    3c3c:	80 e9       	ldi	r24, 0x90	; 144
    3c3e:	98 ee       	ldi	r25, 0xE8	; 232
    3c40:	09 2e       	mov	r0, r25
    3c42:	00 0c       	add	r0, r0
    3c44:	aa 0b       	sbc	r26, r26
    3c46:	bb 0b       	sbc	r27, r27
    3c48:	68 2f       	mov	r22, r24
    3c4a:	8d 83       	std	Y+5, r24	; 0x05
    3c4c:	9e 83       	std	Y+6, r25	; 0x06
    3c4e:	af 83       	std	Y+7, r26	; 0x07
    3c50:	b8 87       	std	Y+8, r27	; 0x08
    3c52:	0f 2e       	mov	r0, r31
    3c54:	f6 e0       	ldi	r31, 0x06	; 6
    3c56:	ef 2e       	mov	r14, r31
    3c58:	f1 2c       	mov	r15, r1
    3c5a:	f0 2d       	mov	r31, r0
    3c5c:	0b e0       	ldi	r16, 0x0B	; 11
    3c5e:	1c e0       	ldi	r17, 0x0C	; 12
    3c60:	29 81       	ldd	r18, Y+1	; 0x01
    3c62:	3a 81       	ldd	r19, Y+2	; 0x02
    3c64:	4b 81       	ldd	r20, Y+3	; 0x03
    3c66:	5c 81       	ldd	r21, Y+4	; 0x04
    3c68:	7e 81       	ldd	r23, Y+6	; 0x06
    3c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c6c:	98 85       	ldd	r25, Y+8	; 0x08
    3c6e:	a4 d8       	rcall	.-3768   	; 0x2db8 <SendandVerify>
    3c70:	28 96       	adiw	r28, 0x08	; 8
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	1f 91       	pop	r17
    3c82:	0f 91       	pop	r16
    3c84:	ff 90       	pop	r15
    3c86:	ef 90       	pop	r14
    3c88:	08 95       	ret

00003c8a <RightMotor_SetVelNoCommsSafety>:
    3c8a:	cf 93       	push	r28
    3c8c:	df 93       	push	r29
    3c8e:	cd b7       	in	r28, 0x3d	; 61
    3c90:	de b7       	in	r29, 0x3e	; 62
    3c92:	60 97       	sbiw	r28, 0x10	; 16
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	de bf       	out	0x3e, r29	; 62
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	cd bf       	out	0x3d, r28	; 61
    3c9e:	81 37       	cpi	r24, 0x71	; 113
    3ca0:	27 e1       	ldi	r18, 0x17	; 23
    3ca2:	92 07       	cpc	r25, r18
    3ca4:	14 f0       	brlt	.+4      	; 0x3caa <RightMotor_SetVelNoCommsSafety+0x20>
    3ca6:	80 e7       	ldi	r24, 0x70	; 112
    3ca8:	97 e1       	ldi	r25, 0x17	; 23
    3caa:	2e e7       	ldi	r18, 0x7E	; 126
    3cac:	29 87       	std	Y+9, r18	; 0x09
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	33 e3       	ldi	r19, 0x33	; 51
    3cb2:	3b 87       	std	Y+11, r19	; 0x0b
    3cb4:	2a 87       	std	Y+10, r18	; 0x0a
    3cb6:	1c 86       	std	Y+12, r1	; 0x0c
    3cb8:	80 39       	cpi	r24, 0x90	; 144
    3cba:	28 ee       	ldi	r18, 0xE8	; 232
    3cbc:	92 07       	cpc	r25, r18
    3cbe:	14 f4       	brge	.+4      	; 0x3cc4 <RightMotor_SetVelNoCommsSafety+0x3a>
    3cc0:	80 e9       	ldi	r24, 0x90	; 144
    3cc2:	98 ee       	ldi	r25, 0xE8	; 232
    3cc4:	09 2e       	mov	r0, r25
    3cc6:	00 0c       	add	r0, r0
    3cc8:	aa 0b       	sbc	r26, r26
    3cca:	bb 0b       	sbc	r27, r27
    3ccc:	8d 87       	std	Y+13, r24	; 0x0d
    3cce:	9e 87       	std	Y+14, r25	; 0x0e
    3cd0:	af 87       	std	Y+15, r26	; 0x0f
    3cd2:	b8 8b       	std	Y+16, r27	; 0x10
    3cd4:	07 c0       	rjmp	.+14     	; 0x3ce4 <RightMotor_SetVelNoCommsSafety+0x5a>
    3cd6:	be 01       	movw	r22, r28
    3cd8:	6f 5f       	subi	r22, 0xFF	; 255
    3cda:	7f 4f       	sbci	r23, 0xFF	; 255
    3cdc:	8b e0       	ldi	r24, 0x0B	; 11
    3cde:	9c e0       	ldi	r25, 0x0C	; 12
    3ce0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <cb_pop_front>
    3ce4:	8b e0       	ldi	r24, 0x0B	; 11
    3ce6:	9c e0       	ldi	r25, 0x0C	; 12
    3ce8:	0e 94 1b 01 	call	0x236	; 0x236 <cb_size>
    3cec:	18 16       	cp	r1, r24
    3cee:	19 06       	cpc	r1, r25
    3cf0:	94 f3       	brlt	.-28     	; 0x3cd6 <RightMotor_SetVelNoCommsSafety+0x4c>
    3cf2:	29 85       	ldd	r18, Y+9	; 0x09
    3cf4:	3a 85       	ldd	r19, Y+10	; 0x0a
    3cf6:	4b 85       	ldd	r20, Y+11	; 0x0b
    3cf8:	5c 85       	ldd	r21, Y+12	; 0x0c
    3cfa:	6d 85       	ldd	r22, Y+13	; 0x0d
    3cfc:	7e 85       	ldd	r23, Y+14	; 0x0e
    3cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d00:	98 89       	ldd	r25, Y+16	; 0x10
    3d02:	84 d0       	rcall	.+264    	; 0x3e0c <SDOWritePacket>
    3d04:	88 23       	and	r24, r24
    3d06:	a9 f3       	breq	.-22     	; 0x3cf2 <RightMotor_SetVelNoCommsSafety+0x68>
    3d08:	60 96       	adiw	r28, 0x10	; 16
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	f8 94       	cli
    3d0e:	de bf       	out	0x3e, r29	; 62
    3d10:	0f be       	out	0x3f, r0	; 63
    3d12:	cd bf       	out	0x3d, r28	; 61
    3d14:	df 91       	pop	r29
    3d16:	cf 91       	pop	r28
    3d18:	08 95       	ret

00003d1a <RightMotor_GetPosReached>:

bool RightMotor_GetPosReached()
{
    3d1a:	cf 92       	push	r12
    3d1c:	df 92       	push	r13
    3d1e:	ef 92       	push	r14
    3d20:	ff 92       	push	r15
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
    3d2e:	60 97       	sbiw	r28, 0x10	; 16
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
	char temp[8];
	SDO_packet ReadPositionReached ={RIGHTMOTORID, 0x3002, 0x00, 0x00};// {RIGHTMOTORID, 0x396A, 0x00, 0x00};
    3d3a:	88 e0       	ldi	r24, 0x08	; 8
    3d3c:	e6 e5       	ldi	r30, 0x56	; 86
    3d3e:	f4 e0       	ldi	r31, 0x04	; 4
    3d40:	de 01       	movw	r26, r28
    3d42:	19 96       	adiw	r26, 0x09	; 9
    3d44:	01 90       	ld	r0, Z+
    3d46:	0d 92       	st	X+, r0
    3d48:	8a 95       	dec	r24
    3d4a:	e1 f7       	brne	.-8      	; 0x3d44 <RightMotor_GetPosReached+0x2a>

	if(ReadandVerify(ReadPositionReached, &RightMotor_Buffer, RIGHTMOTOR_STATUS, temp))
    3d4c:	ce 01       	movw	r24, r28
    3d4e:	01 96       	adiw	r24, 0x01	; 1
    3d50:	6c 01       	movw	r12, r24
    3d52:	0f 2e       	mov	r0, r31
    3d54:	f6 e0       	ldi	r31, 0x06	; 6
    3d56:	ef 2e       	mov	r14, r31
    3d58:	f1 2c       	mov	r15, r1
    3d5a:	f0 2d       	mov	r31, r0
    3d5c:	0b e0       	ldi	r16, 0x0B	; 11
    3d5e:	1c e0       	ldi	r17, 0x0C	; 12
    3d60:	29 85       	ldd	r18, Y+9	; 0x09
    3d62:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d64:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d66:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d68:	6d 85       	ldd	r22, Y+13	; 0x0d
    3d6a:	7e 85       	ldd	r23, Y+14	; 0x0e
    3d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d6e:	98 89       	ldd	r25, Y+16	; 0x10
    3d70:	b2 d8       	rcall	.-3740   	; 0x2ed6 <ReadandVerify>
    3d72:	88 23       	and	r24, r24
    3d74:	21 f0       	breq	.+8      	; 0x3d7e <RightMotor_GetPosReached+0x64>
	{
		//long result = ArrayToLong(temp);
		return (temp[4]&0x10); //returns position Reached
    3d76:	8d 81       	ldd	r24, Y+5	; 0x05
    3d78:	82 95       	swap	r24
    3d7a:	81 70       	andi	r24, 0x01	; 1
    3d7c:	01 c0       	rjmp	.+2      	; 0x3d80 <RightMotor_GetPosReached+0x66>
	}
	else
	{
		return 0;
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3d80:	60 96       	adiw	r28, 0x10	; 16
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	df 91       	pop	r29
    3d8e:	cf 91       	pop	r28
    3d90:	1f 91       	pop	r17
    3d92:	0f 91       	pop	r16
    3d94:	ff 90       	pop	r15
    3d96:	ef 90       	pop	r14
    3d98:	df 90       	pop	r13
    3d9a:	cf 90       	pop	r12
    3d9c:	08 95       	ret

00003d9e <List_Init>:
	

 
	//point head to null
	void List_Init(struct Node** head) {
		*head = NULL;
    3d9e:	fc 01       	movw	r30, r24
    3da0:	11 82       	std	Z+1, r1	; 0x01
    3da2:	10 82       	st	Z, r1
    3da4:	08 95       	ret

00003da6 <SDOReadRequest>:
	SDO.data[5] = Data>>8; 
	SDO.data[6] = Data>>16;
	SDO.data[7] = Data>>24; 
	
	can_tx(SDOMOB, &SDO);
}
    3da6:	cf 93       	push	r28
    3da8:	df 93       	push	r29
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
    3dae:	63 97       	sbiw	r28, 0x13	; 19
    3db0:	0f b6       	in	r0, 0x3f	; 63
    3db2:	f8 94       	cli
    3db4:	de bf       	out	0x3e, r29	; 62
    3db6:	0f be       	out	0x3f, r0	; 63
    3db8:	cd bf       	out	0x3d, r28	; 61
    3dba:	93 2f       	mov	r25, r19
    3dbc:	5f 87       	std	Y+15, r21	; 0x0f
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	3a 5f       	subi	r19, 0xFA	; 250
    3dc2:	3a 83       	std	Y+2, r19	; 0x02
    3dc4:	29 83       	std	Y+1, r18	; 0x01
    3dc6:	88 e0       	ldi	r24, 0x08	; 8
    3dc8:	8b 83       	std	Y+3, r24	; 0x03
    3dca:	e6 e7       	ldi	r30, 0x76	; 118
    3dcc:	f4 e0       	ldi	r31, 0x04	; 4
    3dce:	de 01       	movw	r26, r28
    3dd0:	14 96       	adiw	r26, 0x04	; 4
    3dd2:	01 90       	ld	r0, Z+
    3dd4:	0d 92       	st	X+, r0
    3dd6:	8a 95       	dec	r24
    3dd8:	e1 f7       	brne	.-8      	; 0x3dd2 <SDOReadRequest+0x2c>
    3dda:	80 e4       	ldi	r24, 0x40	; 64
    3ddc:	8c 83       	std	Y+4, r24	; 0x04
    3dde:	9d 83       	std	Y+5, r25	; 0x05
    3de0:	4e 83       	std	Y+6, r20	; 0x06
    3de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3de4:	8f 83       	std	Y+7, r24	; 0x07
    3de6:	18 86       	std	Y+8, r1	; 0x08
    3de8:	19 86       	std	Y+9, r1	; 0x09
    3dea:	1a 86       	std	Y+10, r1	; 0x0a
    3dec:	1b 86       	std	Y+11, r1	; 0x0b
    3dee:	be 01       	movw	r22, r28
    3df0:	6f 5f       	subi	r22, 0xFF	; 255
    3df2:	7f 4f       	sbci	r23, 0xFF	; 255
    3df4:	8e e0       	ldi	r24, 0x0E	; 14
    3df6:	0e 94 07 05 	call	0xa0e	; 0xa0e <can_tx>
    3dfa:	63 96       	adiw	r28, 0x13	; 19
    3dfc:	0f b6       	in	r0, 0x3f	; 63
    3dfe:	f8 94       	cli
    3e00:	de bf       	out	0x3e, r29	; 62
    3e02:	0f be       	out	0x3f, r0	; 63
    3e04:	cd bf       	out	0x3d, r28	; 61
    3e06:	df 91       	pop	r29
    3e08:	cf 91       	pop	r28
    3e0a:	08 95       	ret

00003e0c <SDOWritePacket>:

BOOL SDOWritePacket(SDO_packet SDOpacket){
    3e0c:	1f 93       	push	r17
    3e0e:	cf 93       	push	r28
    3e10:	df 93       	push	r29
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
    3e16:	63 97       	sbiw	r28, 0x13	; 19
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	f8 94       	cli
    3e1c:	de bf       	out	0x3e, r29	; 62
    3e1e:	0f be       	out	0x3f, r0	; 63
    3e20:	cd bf       	out	0x3d, r28	; 61
    3e22:	13 2f       	mov	r17, r19
    3e24:	5f 87       	std	Y+15, r21	; 0x0f
    3e26:	79 8b       	std	Y+17, r23	; 0x11
    3e28:	76 2f       	mov	r23, r22
    3e2a:	69 89       	ldd	r22, Y+17	; 0x11
    3e2c:	58 2f       	mov	r21, r24

	CAN_packet SDO = {0x600+SDOpacket.NodeID, 8, "01234567"};
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	3a 5f       	subi	r19, 0xFA	; 250
    3e32:	3a 83       	std	Y+2, r19	; 0x02
    3e34:	29 83       	std	Y+1, r18	; 0x01
    3e36:	88 e0       	ldi	r24, 0x08	; 8
    3e38:	8b 83       	std	Y+3, r24	; 0x03
    3e3a:	e6 e7       	ldi	r30, 0x76	; 118
    3e3c:	f4 e0       	ldi	r31, 0x04	; 4
    3e3e:	de 01       	movw	r26, r28
    3e40:	14 96       	adiw	r26, 0x04	; 4
    3e42:	01 90       	ld	r0, Z+
    3e44:	0d 92       	st	X+, r0
    3e46:	8a 95       	dec	r24
    3e48:	e1 f7       	brne	.-8      	; 0x3e42 <SDOWritePacket+0x36>
	SDO.data[0] = 0x23;
    3e4a:	83 e2       	ldi	r24, 0x23	; 35
    3e4c:	8c 83       	std	Y+4, r24	; 0x04
	SDO.data[1] = SDOpacket.ObjIndx;
    3e4e:	1d 83       	std	Y+5, r17	; 0x05
	SDO.data[2] = SDOpacket.ObjIndx>>8;
    3e50:	4e 83       	std	Y+6, r20	; 0x06
	SDO.data[3] = SDOpacket.SubIndx;
    3e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e54:	8f 83       	std	Y+7, r24	; 0x07
	SDO.data[4] = SDOpacket.Data;
    3e56:	78 87       	std	Y+8, r23	; 0x08
	SDO.data[5] = SDOpacket.Data>>8;
    3e58:	69 87       	std	Y+9, r22	; 0x09
	SDO.data[6] = SDOpacket.Data>>16;
    3e5a:	5a 87       	std	Y+10, r21	; 0x0a
	SDO.data[7] = SDOpacket.Data>>24;
    3e5c:	9b 87       	std	Y+11, r25	; 0x0b
	
	return can_tx(SDOMOB, &SDO);
    3e5e:	be 01       	movw	r22, r28
    3e60:	6f 5f       	subi	r22, 0xFF	; 255
    3e62:	7f 4f       	sbci	r23, 0xFF	; 255
    3e64:	8e e0       	ldi	r24, 0x0E	; 14
    3e66:	0e 94 07 05 	call	0xa0e	; 0xa0e <can_tx>
}
    3e6a:	63 96       	adiw	r28, 0x13	; 19
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	f8 94       	cli
    3e70:	de bf       	out	0x3e, r29	; 62
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	cd bf       	out	0x3d, r28	; 61
    3e76:	df 91       	pop	r29
    3e78:	cf 91       	pop	r28
    3e7a:	1f 91       	pop	r17
    3e7c:	08 95       	ret

00003e7e <SDOVerifyReply>:

BOOL SDOVerifyReply(char SDOreply[], SDO_packet SDOsent) {
    3e7e:	0f 93       	push	r16
    3e80:	1f 93       	push	r17
    3e82:	cf 93       	push	r28
    3e84:	df 93       	push	r29
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
    3e8a:	28 97       	sbiw	r28, 0x08	; 8
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	f8 94       	cli
    3e90:	de bf       	out	0x3e, r29	; 62
    3e92:	0f be       	out	0x3f, r0	; 63
    3e94:	cd bf       	out	0x3d, r28	; 61
    3e96:	fc 01       	movw	r30, r24
    3e98:	1a 83       	std	Y+2, r17	; 0x02
    3e9a:	2b 83       	std	Y+3, r18	; 0x03
    3e9c:	3c 83       	std	Y+4, r19	; 0x04
    3e9e:	2a 81       	ldd	r18, Y+2	; 0x02
    3ea0:	3b 81       	ldd	r19, Y+3	; 0x03
	//reply has 0x60 in the first byte, and the same data in the other overhead bytes
	//Ignore data bytes (4-7)
	if(SDOreply[0] != 0x60) {
    3ea2:	80 81       	ld	r24, Z
    3ea4:	80 36       	cpi	r24, 0x60	; 96
    3ea6:	a9 f4       	brne	.+42     	; 0x3ed2 <SDOVerifyReply+0x54>
		return FALSE;
	}
	if(SDOreply[1] != (0xFF & SDOsent.ObjIndx)) {
    3ea8:	81 81       	ldd	r24, Z+1	; 0x01
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	a9 01       	movw	r20, r18
    3eae:	55 27       	eor	r21, r21
    3eb0:	84 17       	cp	r24, r20
    3eb2:	95 07       	cpc	r25, r21
    3eb4:	81 f4       	brne	.+32     	; 0x3ed6 <SDOVerifyReply+0x58>
		return FALSE;
	}
	if(SDOreply[2] != SDOsent.ObjIndx>>8) {
    3eb6:	82 81       	ldd	r24, Z+2	; 0x02
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	23 2f       	mov	r18, r19
    3ebc:	33 27       	eor	r19, r19
    3ebe:	82 17       	cp	r24, r18
    3ec0:	93 07       	cpc	r25, r19
    3ec2:	59 f4       	brne	.+22     	; 0x3eda <SDOVerifyReply+0x5c>
		return FALSE;
	}
	if(SDOreply[3] != SDOsent.SubIndx) {
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	23 81       	ldd	r18, Z+3	; 0x03
    3ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eca:	29 17       	cp	r18, r25
    3ecc:	39 f0       	breq	.+14     	; 0x3edc <SDOVerifyReply+0x5e>
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	05 c0       	rjmp	.+10     	; 0x3edc <SDOVerifyReply+0x5e>

BOOL SDOVerifyReply(char SDOreply[], SDO_packet SDOsent) {
	//reply has 0x60 in the first byte, and the same data in the other overhead bytes
	//Ignore data bytes (4-7)
	if(SDOreply[0] != 0x60) {
		return FALSE;
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	03 c0       	rjmp	.+6      	; 0x3edc <SDOVerifyReply+0x5e>
	}
	if(SDOreply[1] != (0xFF & SDOsent.ObjIndx)) {
		return FALSE;
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	01 c0       	rjmp	.+2      	; 0x3edc <SDOVerifyReply+0x5e>
	}
	if(SDOreply[2] != SDOsent.ObjIndx>>8) {
		return FALSE;
    3eda:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(SDOreply[3] != SDOsent.SubIndx) {
		return FALSE;
	}
	return TRUE;
}
    3edc:	28 96       	adiw	r28, 0x08	; 8
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	df 91       	pop	r29
    3eea:	cf 91       	pop	r28
    3eec:	1f 91       	pop	r17
    3eee:	0f 91       	pop	r16
    3ef0:	08 95       	ret

00003ef2 <SDOVerifyRead>:

BOOL SDOVerifyRead(char SDOreply[], SDO_packet SDOsent) {
    3ef2:	0f 93       	push	r16
    3ef4:	1f 93       	push	r17
    3ef6:	cf 93       	push	r28
    3ef8:	df 93       	push	r29
    3efa:	cd b7       	in	r28, 0x3d	; 61
    3efc:	de b7       	in	r29, 0x3e	; 62
    3efe:	28 97       	sbiw	r28, 0x08	; 8
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	fc 01       	movw	r30, r24
    3f0c:	1a 83       	std	Y+2, r17	; 0x02
    3f0e:	2b 83       	std	Y+3, r18	; 0x03
    3f10:	3c 83       	std	Y+4, r19	; 0x04
    3f12:	2a 81       	ldd	r18, Y+2	; 0x02
    3f14:	3b 81       	ldd	r19, Y+3	; 0x03
	//reply has 0x60 in the first byte, and the same data in the other overhead bytes
	//Ignore data bytes (4-7)
	if((SDOreply[0] != 0x42) && (SDOreply[0] != 0x43) && (SDOreply[0] != 0x4B) && (SDOreply[0] != 0x4F)) { //could be 0x43 for exactly 4 bytes, 0x4B for 2 bytes, or 0x4F for 1 byte
    3f16:	90 81       	ld	r25, Z
    3f18:	8e eb       	ldi	r24, 0xBE	; 190
    3f1a:	89 0f       	add	r24, r25
    3f1c:	82 30       	cpi	r24, 0x02	; 2
    3f1e:	18 f0       	brcs	.+6      	; 0x3f26 <SDOVerifyRead+0x34>
    3f20:	9b 7f       	andi	r25, 0xFB	; 251
    3f22:	9b 34       	cpi	r25, 0x4B	; 75
    3f24:	a9 f4       	brne	.+42     	; 0x3f50 <SDOVerifyRead+0x5e>
		return FALSE;
	}
	if(SDOreply[1] != (0xFF & SDOsent.ObjIndx)) {
    3f26:	81 81       	ldd	r24, Z+1	; 0x01
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	a9 01       	movw	r20, r18
    3f2c:	55 27       	eor	r21, r21
    3f2e:	84 17       	cp	r24, r20
    3f30:	95 07       	cpc	r25, r21
    3f32:	81 f4       	brne	.+32     	; 0x3f54 <SDOVerifyRead+0x62>
		return FALSE;
	}
	if(SDOreply[2] != SDOsent.ObjIndx>>8) {
    3f34:	82 81       	ldd	r24, Z+2	; 0x02
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	23 2f       	mov	r18, r19
    3f3a:	33 27       	eor	r19, r19
    3f3c:	82 17       	cp	r24, r18
    3f3e:	93 07       	cpc	r25, r19
    3f40:	59 f4       	brne	.+22     	; 0x3f58 <SDOVerifyRead+0x66>
		return FALSE;
	}
	if(SDOreply[3] != SDOsent.SubIndx) {
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	23 81       	ldd	r18, Z+3	; 0x03
    3f46:	9c 81       	ldd	r25, Y+4	; 0x04
    3f48:	29 17       	cp	r18, r25
    3f4a:	39 f0       	breq	.+14     	; 0x3f5a <SDOVerifyRead+0x68>
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	05 c0       	rjmp	.+10     	; 0x3f5a <SDOVerifyRead+0x68>

BOOL SDOVerifyRead(char SDOreply[], SDO_packet SDOsent) {
	//reply has 0x60 in the first byte, and the same data in the other overhead bytes
	//Ignore data bytes (4-7)
	if((SDOreply[0] != 0x42) && (SDOreply[0] != 0x43) && (SDOreply[0] != 0x4B) && (SDOreply[0] != 0x4F)) { //could be 0x43 for exactly 4 bytes, 0x4B for 2 bytes, or 0x4F for 1 byte
		return FALSE;
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	03 c0       	rjmp	.+6      	; 0x3f5a <SDOVerifyRead+0x68>
	}
	if(SDOreply[1] != (0xFF & SDOsent.ObjIndx)) {
		return FALSE;
    3f54:	80 e0       	ldi	r24, 0x00	; 0
    3f56:	01 c0       	rjmp	.+2      	; 0x3f5a <SDOVerifyRead+0x68>
	}
	if(SDOreply[2] != SDOsent.ObjIndx>>8) {
		return FALSE;
    3f58:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(SDOreply[3] != SDOsent.SubIndx) {
		return FALSE;
	}
	return TRUE;
}
    3f5a:	28 96       	adiw	r28, 0x08	; 8
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	f8 94       	cli
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	cd bf       	out	0x3d, r28	; 61
    3f66:	df 91       	pop	r29
    3f68:	cf 91       	pop	r28
    3f6a:	1f 91       	pop	r17
    3f6c:	0f 91       	pop	r16
    3f6e:	08 95       	ret

00003f70 <setTimerInterval>:
#endif

volatile unsigned long long globalTime=0;

void setTimerInterval(timer_t * t, unsigned long long l)
{
    3f70:	0f 93       	push	r16
    3f72:	1f 93       	push	r17
    3f74:	fc 01       	movw	r30, r24
	t->timerLength=l;
    3f76:	00 83       	st	Z, r16
    3f78:	11 83       	std	Z+1, r17	; 0x01
    3f7a:	22 83       	std	Z+2, r18	; 0x02
    3f7c:	33 83       	std	Z+3, r19	; 0x03
    3f7e:	44 83       	std	Z+4, r20	; 0x04
    3f80:	55 83       	std	Z+5, r21	; 0x05
    3f82:	66 83       	std	Z+6, r22	; 0x06
    3f84:	77 83       	std	Z+7, r23	; 0x07
}
    3f86:	1f 91       	pop	r17
    3f88:	0f 91       	pop	r16
    3f8a:	08 95       	ret

00003f8c <resetTimer>:

void resetTimer(timer_t * t)
{
    3f8c:	fc 01       	movw	r30, r24
	unsigned long long timenow=globalTime;
    3f8e:	70 91 b3 04 	lds	r23, 0x04B3	; 0x8004b3 <globalTime>
    3f92:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <globalTime+0x1>
    3f96:	50 91 b5 04 	lds	r21, 0x04B5	; 0x8004b5 <globalTime+0x2>
    3f9a:	40 91 b6 04 	lds	r20, 0x04B6	; 0x8004b6 <globalTime+0x3>
    3f9e:	30 91 b7 04 	lds	r19, 0x04B7	; 0x8004b7 <globalTime+0x4>
    3fa2:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <globalTime+0x5>
    3fa6:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <globalTime+0x6>
    3faa:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <globalTime+0x7>
	t->prevTime=timenow;
    3fae:	70 87       	std	Z+8, r23	; 0x08
    3fb0:	61 87       	std	Z+9, r22	; 0x09
    3fb2:	52 87       	std	Z+10, r21	; 0x0a
    3fb4:	43 87       	std	Z+11, r20	; 0x0b
    3fb6:	34 87       	std	Z+12, r19	; 0x0c
    3fb8:	25 87       	std	Z+13, r18	; 0x0d
    3fba:	96 87       	std	Z+14, r25	; 0x0e
    3fbc:	87 87       	std	Z+15, r24	; 0x0f
    3fbe:	08 95       	ret

00003fc0 <timerDone>:
}

bool timerDone(timer_t * t)
{
    3fc0:	6f 92       	push	r6
    3fc2:	7f 92       	push	r7
    3fc4:	8f 92       	push	r8
    3fc6:	9f 92       	push	r9
    3fc8:	af 92       	push	r10
    3fca:	bf 92       	push	r11
    3fcc:	cf 92       	push	r12
    3fce:	df 92       	push	r13
    3fd0:	ef 92       	push	r14
    3fd2:	ff 92       	push	r15
    3fd4:	0f 93       	push	r16
    3fd6:	1f 93       	push	r17
    3fd8:	cf 93       	push	r28
    3fda:	df 93       	push	r29
    3fdc:	fc 01       	movw	r30, r24
	unsigned long long timenow=globalTime;
    3fde:	60 90 b3 04 	lds	r6, 0x04B3	; 0x8004b3 <globalTime>
    3fe2:	70 90 b4 04 	lds	r7, 0x04B4	; 0x8004b4 <globalTime+0x1>
    3fe6:	80 90 b5 04 	lds	r8, 0x04B5	; 0x8004b5 <globalTime+0x2>
    3fea:	90 90 b6 04 	lds	r9, 0x04B6	; 0x8004b6 <globalTime+0x3>
    3fee:	d0 91 b7 04 	lds	r29, 0x04B7	; 0x8004b7 <globalTime+0x4>
    3ff2:	c0 91 b8 04 	lds	r28, 0x04B8	; 0x8004b8 <globalTime+0x5>
    3ff6:	b0 91 b9 04 	lds	r27, 0x04B9	; 0x8004b9 <globalTime+0x6>
    3ffa:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <globalTime+0x7>
	if(timenow >= t->prevTime+t->timerLength)
    3ffe:	20 81       	ld	r18, Z
    4000:	31 81       	ldd	r19, Z+1	; 0x01
    4002:	42 81       	ldd	r20, Z+2	; 0x02
    4004:	53 81       	ldd	r21, Z+3	; 0x03
    4006:	64 81       	ldd	r22, Z+4	; 0x04
    4008:	75 81       	ldd	r23, Z+5	; 0x05
    400a:	86 81       	ldd	r24, Z+6	; 0x06
    400c:	97 81       	ldd	r25, Z+7	; 0x07
    400e:	a0 84       	ldd	r10, Z+8	; 0x08
    4010:	b1 84       	ldd	r11, Z+9	; 0x09
    4012:	c2 84       	ldd	r12, Z+10	; 0x0a
    4014:	d3 84       	ldd	r13, Z+11	; 0x0b
    4016:	e4 84       	ldd	r14, Z+12	; 0x0c
    4018:	f5 84       	ldd	r15, Z+13	; 0x0d
    401a:	06 85       	ldd	r16, Z+14	; 0x0e
    401c:	17 85       	ldd	r17, Z+15	; 0x0f
    401e:	7a d0       	rcall	.+244    	; 0x4114 <__adddi3>
    4020:	a2 2e       	mov	r10, r18
    4022:	b3 2e       	mov	r11, r19
    4024:	c4 2e       	mov	r12, r20
    4026:	d5 2e       	mov	r13, r21
    4028:	e6 2e       	mov	r14, r22
    402a:	f7 2e       	mov	r15, r23
    402c:	08 2f       	mov	r16, r24
    402e:	19 2f       	mov	r17, r25
    4030:	26 2d       	mov	r18, r6
    4032:	37 2d       	mov	r19, r7
    4034:	48 2d       	mov	r20, r8
    4036:	59 2d       	mov	r21, r9
    4038:	6d 2f       	mov	r22, r29
    403a:	7c 2f       	mov	r23, r28
    403c:	8b 2f       	mov	r24, r27
    403e:	9a 2f       	mov	r25, r26
    4040:	7e d0       	rcall	.+252    	; 0x413e <__cmpdi2>
    4042:	50 f0       	brcs	.+20     	; 0x4058 <timerDone+0x98>
	{
		t->prevTime=timenow;
    4044:	60 86       	std	Z+8, r6	; 0x08
    4046:	71 86       	std	Z+9, r7	; 0x09
    4048:	82 86       	std	Z+10, r8	; 0x0a
    404a:	93 86       	std	Z+11, r9	; 0x0b
    404c:	d4 87       	std	Z+12, r29	; 0x0c
    404e:	c5 87       	std	Z+13, r28	; 0x0d
    4050:	b6 87       	std	Z+14, r27	; 0x0e
    4052:	a7 87       	std	Z+15, r26	; 0x0f
		return true;
    4054:	81 e0       	ldi	r24, 0x01	; 1
    4056:	01 c0       	rjmp	.+2      	; 0x405a <timerDone+0x9a>
	}
	else
	{
		return false;
    4058:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    405a:	df 91       	pop	r29
    405c:	cf 91       	pop	r28
    405e:	1f 91       	pop	r17
    4060:	0f 91       	pop	r16
    4062:	ff 90       	pop	r15
    4064:	ef 90       	pop	r14
    4066:	df 90       	pop	r13
    4068:	cf 90       	pop	r12
    406a:	bf 90       	pop	r11
    406c:	af 90       	pop	r10
    406e:	9f 90       	pop	r9
    4070:	8f 90       	pop	r8
    4072:	7f 90       	pop	r7
    4074:	6f 90       	pop	r6
    4076:	08 95       	ret

00004078 <initTimer0>:

void initTimer0(void)
{
	TCCR0A = PRESCALER;		//Set the prescaler
    4078:	85 e0       	ldi	r24, 0x05	; 5
    407a:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1<<TOIE0);		//ENABLE Timer Overflow interrupt
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    4082:	08 95       	ret

00004084 <__vector_17>:
}

ISR(TIMER0_OVF_vect)
{
    4084:	1f 92       	push	r1
    4086:	0f 92       	push	r0
    4088:	0f b6       	in	r0, 0x3f	; 63
    408a:	0f 92       	push	r0
    408c:	11 24       	eor	r1, r1
    408e:	2f 93       	push	r18
    4090:	3f 93       	push	r19
    4092:	4f 93       	push	r20
    4094:	5f 93       	push	r21
    4096:	6f 93       	push	r22
    4098:	7f 93       	push	r23
    409a:	8f 93       	push	r24
    409c:	9f 93       	push	r25
    409e:	af 93       	push	r26
	#ifdef PRESCALER1024
		globalTime+=16;
    40a0:	20 91 b3 04 	lds	r18, 0x04B3	; 0x8004b3 <globalTime>
    40a4:	30 91 b4 04 	lds	r19, 0x04B4	; 0x8004b4 <globalTime+0x1>
    40a8:	40 91 b5 04 	lds	r20, 0x04B5	; 0x8004b5 <globalTime+0x2>
    40ac:	50 91 b6 04 	lds	r21, 0x04B6	; 0x8004b6 <globalTime+0x3>
    40b0:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <globalTime+0x4>
    40b4:	70 91 b8 04 	lds	r23, 0x04B8	; 0x8004b8 <globalTime+0x5>
    40b8:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <globalTime+0x6>
    40bc:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <globalTime+0x7>
    40c0:	a0 e1       	ldi	r26, 0x10	; 16
    40c2:	31 d0       	rcall	.+98     	; 0x4126 <__adddi3_s8>
    40c4:	20 93 b3 04 	sts	0x04B3, r18	; 0x8004b3 <globalTime>
    40c8:	30 93 b4 04 	sts	0x04B4, r19	; 0x8004b4 <globalTime+0x1>
    40cc:	40 93 b5 04 	sts	0x04B5, r20	; 0x8004b5 <globalTime+0x2>
    40d0:	50 93 b6 04 	sts	0x04B6, r21	; 0x8004b6 <globalTime+0x3>
    40d4:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <globalTime+0x4>
    40d8:	70 93 b8 04 	sts	0x04B8, r23	; 0x8004b8 <globalTime+0x5>
    40dc:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <globalTime+0x6>
    40e0:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <globalTime+0x7>
		globalTime+=4;
	#elif PRESCALER64
		globalTime++;
	#endif

	TIFR0 = (0<<TOV0);	//Reset timer0 overflow interrupt flag
    40e4:	15 ba       	out	0x15, r1	; 21
    40e6:	af 91       	pop	r26
    40e8:	9f 91       	pop	r25
    40ea:	8f 91       	pop	r24
    40ec:	7f 91       	pop	r23
    40ee:	6f 91       	pop	r22
    40f0:	5f 91       	pop	r21
    40f2:	4f 91       	pop	r20
    40f4:	3f 91       	pop	r19
    40f6:	2f 91       	pop	r18
    40f8:	0f 90       	pop	r0
    40fa:	0f be       	out	0x3f, r0	; 63
    40fc:	0f 90       	pop	r0
    40fe:	1f 90       	pop	r1
    4100:	18 95       	reti

00004102 <__tablejump2__>:
    4102:	ee 0f       	add	r30, r30
    4104:	ff 1f       	adc	r31, r31
    4106:	00 24       	eor	r0, r0
    4108:	00 1c       	adc	r0, r0
    410a:	0b be       	out	0x3b, r0	; 59
    410c:	07 90       	elpm	r0, Z+
    410e:	f6 91       	elpm	r31, Z
    4110:	e0 2d       	mov	r30, r0
    4112:	09 94       	ijmp

00004114 <__adddi3>:
    4114:	2a 0d       	add	r18, r10
    4116:	3b 1d       	adc	r19, r11
    4118:	4c 1d       	adc	r20, r12
    411a:	5d 1d       	adc	r21, r13
    411c:	6e 1d       	adc	r22, r14
    411e:	7f 1d       	adc	r23, r15
    4120:	80 1f       	adc	r24, r16
    4122:	91 1f       	adc	r25, r17
    4124:	08 95       	ret

00004126 <__adddi3_s8>:
    4126:	00 24       	eor	r0, r0
    4128:	a7 fd       	sbrc	r26, 7
    412a:	00 94       	com	r0
    412c:	2a 0f       	add	r18, r26
    412e:	30 1d       	adc	r19, r0
    4130:	40 1d       	adc	r20, r0
    4132:	50 1d       	adc	r21, r0
    4134:	60 1d       	adc	r22, r0
    4136:	70 1d       	adc	r23, r0
    4138:	80 1d       	adc	r24, r0
    413a:	90 1d       	adc	r25, r0
    413c:	08 95       	ret

0000413e <__cmpdi2>:
    413e:	2a 15       	cp	r18, r10
    4140:	3b 05       	cpc	r19, r11
    4142:	4c 05       	cpc	r20, r12
    4144:	5d 05       	cpc	r21, r13
    4146:	6e 05       	cpc	r22, r14
    4148:	7f 05       	cpc	r23, r15
    414a:	80 07       	cpc	r24, r16
    414c:	91 07       	cpc	r25, r17
    414e:	08 95       	ret

00004150 <malloc>:
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
    4154:	82 30       	cpi	r24, 0x02	; 2
    4156:	91 05       	cpc	r25, r1
    4158:	10 f4       	brcc	.+4      	; 0x415e <malloc+0xe>
    415a:	82 e0       	ldi	r24, 0x02	; 2
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	e0 91 9f 0e 	lds	r30, 0x0E9F	; 0x800e9f <__flp>
    4162:	f0 91 a0 0e 	lds	r31, 0x0EA0	; 0x800ea0 <__flp+0x1>
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	c0 e0       	ldi	r28, 0x00	; 0
    416c:	d0 e0       	ldi	r29, 0x00	; 0
    416e:	30 97       	sbiw	r30, 0x00	; 0
    4170:	11 f1       	breq	.+68     	; 0x41b6 <malloc+0x66>
    4172:	40 81       	ld	r20, Z
    4174:	51 81       	ldd	r21, Z+1	; 0x01
    4176:	48 17       	cp	r20, r24
    4178:	59 07       	cpc	r21, r25
    417a:	c0 f0       	brcs	.+48     	; 0x41ac <malloc+0x5c>
    417c:	48 17       	cp	r20, r24
    417e:	59 07       	cpc	r21, r25
    4180:	61 f4       	brne	.+24     	; 0x419a <malloc+0x4a>
    4182:	82 81       	ldd	r24, Z+2	; 0x02
    4184:	93 81       	ldd	r25, Z+3	; 0x03
    4186:	20 97       	sbiw	r28, 0x00	; 0
    4188:	19 f0       	breq	.+6      	; 0x4190 <malloc+0x40>
    418a:	9b 83       	std	Y+3, r25	; 0x03
    418c:	8a 83       	std	Y+2, r24	; 0x02
    418e:	2b c0       	rjmp	.+86     	; 0x41e6 <malloc+0x96>
    4190:	90 93 a0 0e 	sts	0x0EA0, r25	; 0x800ea0 <__flp+0x1>
    4194:	80 93 9f 0e 	sts	0x0E9F, r24	; 0x800e9f <__flp>
    4198:	26 c0       	rjmp	.+76     	; 0x41e6 <malloc+0x96>
    419a:	21 15       	cp	r18, r1
    419c:	31 05       	cpc	r19, r1
    419e:	19 f0       	breq	.+6      	; 0x41a6 <malloc+0x56>
    41a0:	42 17       	cp	r20, r18
    41a2:	53 07       	cpc	r21, r19
    41a4:	18 f4       	brcc	.+6      	; 0x41ac <malloc+0x5c>
    41a6:	9a 01       	movw	r18, r20
    41a8:	be 01       	movw	r22, r28
    41aa:	df 01       	movw	r26, r30
    41ac:	ef 01       	movw	r28, r30
    41ae:	02 80       	ldd	r0, Z+2	; 0x02
    41b0:	f3 81       	ldd	r31, Z+3	; 0x03
    41b2:	e0 2d       	mov	r30, r0
    41b4:	dc cf       	rjmp	.-72     	; 0x416e <malloc+0x1e>
    41b6:	21 15       	cp	r18, r1
    41b8:	31 05       	cpc	r19, r1
    41ba:	09 f1       	breq	.+66     	; 0x41fe <malloc+0xae>
    41bc:	28 1b       	sub	r18, r24
    41be:	39 0b       	sbc	r19, r25
    41c0:	24 30       	cpi	r18, 0x04	; 4
    41c2:	31 05       	cpc	r19, r1
    41c4:	90 f4       	brcc	.+36     	; 0x41ea <malloc+0x9a>
    41c6:	12 96       	adiw	r26, 0x02	; 2
    41c8:	8d 91       	ld	r24, X+
    41ca:	9c 91       	ld	r25, X
    41cc:	13 97       	sbiw	r26, 0x03	; 3
    41ce:	61 15       	cp	r22, r1
    41d0:	71 05       	cpc	r23, r1
    41d2:	21 f0       	breq	.+8      	; 0x41dc <malloc+0x8c>
    41d4:	fb 01       	movw	r30, r22
    41d6:	93 83       	std	Z+3, r25	; 0x03
    41d8:	82 83       	std	Z+2, r24	; 0x02
    41da:	04 c0       	rjmp	.+8      	; 0x41e4 <malloc+0x94>
    41dc:	90 93 a0 0e 	sts	0x0EA0, r25	; 0x800ea0 <__flp+0x1>
    41e0:	80 93 9f 0e 	sts	0x0E9F, r24	; 0x800e9f <__flp>
    41e4:	fd 01       	movw	r30, r26
    41e6:	32 96       	adiw	r30, 0x02	; 2
    41e8:	44 c0       	rjmp	.+136    	; 0x4272 <malloc+0x122>
    41ea:	fd 01       	movw	r30, r26
    41ec:	e2 0f       	add	r30, r18
    41ee:	f3 1f       	adc	r31, r19
    41f0:	81 93       	st	Z+, r24
    41f2:	91 93       	st	Z+, r25
    41f4:	22 50       	subi	r18, 0x02	; 2
    41f6:	31 09       	sbc	r19, r1
    41f8:	2d 93       	st	X+, r18
    41fa:	3c 93       	st	X, r19
    41fc:	3a c0       	rjmp	.+116    	; 0x4272 <malloc+0x122>
    41fe:	20 91 9d 0e 	lds	r18, 0x0E9D	; 0x800e9d <__brkval>
    4202:	30 91 9e 0e 	lds	r19, 0x0E9E	; 0x800e9e <__brkval+0x1>
    4206:	23 2b       	or	r18, r19
    4208:	41 f4       	brne	.+16     	; 0x421a <malloc+0xca>
    420a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    420e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4212:	30 93 9e 0e 	sts	0x0E9E, r19	; 0x800e9e <__brkval+0x1>
    4216:	20 93 9d 0e 	sts	0x0E9D, r18	; 0x800e9d <__brkval>
    421a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    421e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4222:	21 15       	cp	r18, r1
    4224:	31 05       	cpc	r19, r1
    4226:	41 f4       	brne	.+16     	; 0x4238 <malloc+0xe8>
    4228:	2d b7       	in	r18, 0x3d	; 61
    422a:	3e b7       	in	r19, 0x3e	; 62
    422c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4230:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4234:	24 1b       	sub	r18, r20
    4236:	35 0b       	sbc	r19, r21
    4238:	e0 91 9d 0e 	lds	r30, 0x0E9D	; 0x800e9d <__brkval>
    423c:	f0 91 9e 0e 	lds	r31, 0x0E9E	; 0x800e9e <__brkval+0x1>
    4240:	e2 17       	cp	r30, r18
    4242:	f3 07       	cpc	r31, r19
    4244:	a0 f4       	brcc	.+40     	; 0x426e <malloc+0x11e>
    4246:	2e 1b       	sub	r18, r30
    4248:	3f 0b       	sbc	r19, r31
    424a:	28 17       	cp	r18, r24
    424c:	39 07       	cpc	r19, r25
    424e:	78 f0       	brcs	.+30     	; 0x426e <malloc+0x11e>
    4250:	ac 01       	movw	r20, r24
    4252:	4e 5f       	subi	r20, 0xFE	; 254
    4254:	5f 4f       	sbci	r21, 0xFF	; 255
    4256:	24 17       	cp	r18, r20
    4258:	35 07       	cpc	r19, r21
    425a:	48 f0       	brcs	.+18     	; 0x426e <malloc+0x11e>
    425c:	4e 0f       	add	r20, r30
    425e:	5f 1f       	adc	r21, r31
    4260:	50 93 9e 0e 	sts	0x0E9E, r21	; 0x800e9e <__brkval+0x1>
    4264:	40 93 9d 0e 	sts	0x0E9D, r20	; 0x800e9d <__brkval>
    4268:	81 93       	st	Z+, r24
    426a:	91 93       	st	Z+, r25
    426c:	02 c0       	rjmp	.+4      	; 0x4272 <malloc+0x122>
    426e:	e0 e0       	ldi	r30, 0x00	; 0
    4270:	f0 e0       	ldi	r31, 0x00	; 0
    4272:	cf 01       	movw	r24, r30
    4274:	df 91       	pop	r29
    4276:	cf 91       	pop	r28
    4278:	08 95       	ret

0000427a <free>:
    427a:	0f 93       	push	r16
    427c:	1f 93       	push	r17
    427e:	cf 93       	push	r28
    4280:	df 93       	push	r29
    4282:	00 97       	sbiw	r24, 0x00	; 0
    4284:	09 f4       	brne	.+2      	; 0x4288 <free+0xe>
    4286:	8c c0       	rjmp	.+280    	; 0x43a0 <free+0x126>
    4288:	fc 01       	movw	r30, r24
    428a:	32 97       	sbiw	r30, 0x02	; 2
    428c:	13 82       	std	Z+3, r1	; 0x03
    428e:	12 82       	std	Z+2, r1	; 0x02
    4290:	00 91 9f 0e 	lds	r16, 0x0E9F	; 0x800e9f <__flp>
    4294:	10 91 a0 0e 	lds	r17, 0x0EA0	; 0x800ea0 <__flp+0x1>
    4298:	01 15       	cp	r16, r1
    429a:	11 05       	cpc	r17, r1
    429c:	81 f4       	brne	.+32     	; 0x42be <free+0x44>
    429e:	20 81       	ld	r18, Z
    42a0:	31 81       	ldd	r19, Z+1	; 0x01
    42a2:	82 0f       	add	r24, r18
    42a4:	93 1f       	adc	r25, r19
    42a6:	20 91 9d 0e 	lds	r18, 0x0E9D	; 0x800e9d <__brkval>
    42aa:	30 91 9e 0e 	lds	r19, 0x0E9E	; 0x800e9e <__brkval+0x1>
    42ae:	28 17       	cp	r18, r24
    42b0:	39 07       	cpc	r19, r25
    42b2:	79 f5       	brne	.+94     	; 0x4312 <free+0x98>
    42b4:	f0 93 9e 0e 	sts	0x0E9E, r31	; 0x800e9e <__brkval+0x1>
    42b8:	e0 93 9d 0e 	sts	0x0E9D, r30	; 0x800e9d <__brkval>
    42bc:	71 c0       	rjmp	.+226    	; 0x43a0 <free+0x126>
    42be:	d8 01       	movw	r26, r16
    42c0:	40 e0       	ldi	r20, 0x00	; 0
    42c2:	50 e0       	ldi	r21, 0x00	; 0
    42c4:	ae 17       	cp	r26, r30
    42c6:	bf 07       	cpc	r27, r31
    42c8:	50 f4       	brcc	.+20     	; 0x42de <free+0x64>
    42ca:	12 96       	adiw	r26, 0x02	; 2
    42cc:	2d 91       	ld	r18, X+
    42ce:	3c 91       	ld	r19, X
    42d0:	13 97       	sbiw	r26, 0x03	; 3
    42d2:	ad 01       	movw	r20, r26
    42d4:	21 15       	cp	r18, r1
    42d6:	31 05       	cpc	r19, r1
    42d8:	09 f1       	breq	.+66     	; 0x431c <free+0xa2>
    42da:	d9 01       	movw	r26, r18
    42dc:	f3 cf       	rjmp	.-26     	; 0x42c4 <free+0x4a>
    42de:	9d 01       	movw	r18, r26
    42e0:	da 01       	movw	r26, r20
    42e2:	33 83       	std	Z+3, r19	; 0x03
    42e4:	22 83       	std	Z+2, r18	; 0x02
    42e6:	60 81       	ld	r22, Z
    42e8:	71 81       	ldd	r23, Z+1	; 0x01
    42ea:	86 0f       	add	r24, r22
    42ec:	97 1f       	adc	r25, r23
    42ee:	82 17       	cp	r24, r18
    42f0:	93 07       	cpc	r25, r19
    42f2:	69 f4       	brne	.+26     	; 0x430e <free+0x94>
    42f4:	ec 01       	movw	r28, r24
    42f6:	28 81       	ld	r18, Y
    42f8:	39 81       	ldd	r19, Y+1	; 0x01
    42fa:	26 0f       	add	r18, r22
    42fc:	37 1f       	adc	r19, r23
    42fe:	2e 5f       	subi	r18, 0xFE	; 254
    4300:	3f 4f       	sbci	r19, 0xFF	; 255
    4302:	31 83       	std	Z+1, r19	; 0x01
    4304:	20 83       	st	Z, r18
    4306:	8a 81       	ldd	r24, Y+2	; 0x02
    4308:	9b 81       	ldd	r25, Y+3	; 0x03
    430a:	93 83       	std	Z+3, r25	; 0x03
    430c:	82 83       	std	Z+2, r24	; 0x02
    430e:	45 2b       	or	r20, r21
    4310:	29 f4       	brne	.+10     	; 0x431c <free+0xa2>
    4312:	f0 93 a0 0e 	sts	0x0EA0, r31	; 0x800ea0 <__flp+0x1>
    4316:	e0 93 9f 0e 	sts	0x0E9F, r30	; 0x800e9f <__flp>
    431a:	42 c0       	rjmp	.+132    	; 0x43a0 <free+0x126>
    431c:	13 96       	adiw	r26, 0x03	; 3
    431e:	fc 93       	st	X, r31
    4320:	ee 93       	st	-X, r30
    4322:	12 97       	sbiw	r26, 0x02	; 2
    4324:	ed 01       	movw	r28, r26
    4326:	49 91       	ld	r20, Y+
    4328:	59 91       	ld	r21, Y+
    432a:	9e 01       	movw	r18, r28
    432c:	24 0f       	add	r18, r20
    432e:	35 1f       	adc	r19, r21
    4330:	e2 17       	cp	r30, r18
    4332:	f3 07       	cpc	r31, r19
    4334:	71 f4       	brne	.+28     	; 0x4352 <free+0xd8>
    4336:	80 81       	ld	r24, Z
    4338:	91 81       	ldd	r25, Z+1	; 0x01
    433a:	84 0f       	add	r24, r20
    433c:	95 1f       	adc	r25, r21
    433e:	02 96       	adiw	r24, 0x02	; 2
    4340:	11 96       	adiw	r26, 0x01	; 1
    4342:	9c 93       	st	X, r25
    4344:	8e 93       	st	-X, r24
    4346:	82 81       	ldd	r24, Z+2	; 0x02
    4348:	93 81       	ldd	r25, Z+3	; 0x03
    434a:	13 96       	adiw	r26, 0x03	; 3
    434c:	9c 93       	st	X, r25
    434e:	8e 93       	st	-X, r24
    4350:	12 97       	sbiw	r26, 0x02	; 2
    4352:	e0 e0       	ldi	r30, 0x00	; 0
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	d8 01       	movw	r26, r16
    4358:	12 96       	adiw	r26, 0x02	; 2
    435a:	8d 91       	ld	r24, X+
    435c:	9c 91       	ld	r25, X
    435e:	13 97       	sbiw	r26, 0x03	; 3
    4360:	00 97       	sbiw	r24, 0x00	; 0
    4362:	19 f0       	breq	.+6      	; 0x436a <free+0xf0>
    4364:	f8 01       	movw	r30, r16
    4366:	8c 01       	movw	r16, r24
    4368:	f6 cf       	rjmp	.-20     	; 0x4356 <free+0xdc>
    436a:	8d 91       	ld	r24, X+
    436c:	9c 91       	ld	r25, X
    436e:	98 01       	movw	r18, r16
    4370:	2e 5f       	subi	r18, 0xFE	; 254
    4372:	3f 4f       	sbci	r19, 0xFF	; 255
    4374:	82 0f       	add	r24, r18
    4376:	93 1f       	adc	r25, r19
    4378:	20 91 9d 0e 	lds	r18, 0x0E9D	; 0x800e9d <__brkval>
    437c:	30 91 9e 0e 	lds	r19, 0x0E9E	; 0x800e9e <__brkval+0x1>
    4380:	28 17       	cp	r18, r24
    4382:	39 07       	cpc	r19, r25
    4384:	69 f4       	brne	.+26     	; 0x43a0 <free+0x126>
    4386:	30 97       	sbiw	r30, 0x00	; 0
    4388:	29 f4       	brne	.+10     	; 0x4394 <free+0x11a>
    438a:	10 92 a0 0e 	sts	0x0EA0, r1	; 0x800ea0 <__flp+0x1>
    438e:	10 92 9f 0e 	sts	0x0E9F, r1	; 0x800e9f <__flp>
    4392:	02 c0       	rjmp	.+4      	; 0x4398 <free+0x11e>
    4394:	13 82       	std	Z+3, r1	; 0x03
    4396:	12 82       	std	Z+2, r1	; 0x02
    4398:	10 93 9e 0e 	sts	0x0E9E, r17	; 0x800e9e <__brkval+0x1>
    439c:	00 93 9d 0e 	sts	0x0E9D, r16	; 0x800e9d <__brkval>
    43a0:	df 91       	pop	r29
    43a2:	cf 91       	pop	r28
    43a4:	1f 91       	pop	r17
    43a6:	0f 91       	pop	r16
    43a8:	08 95       	ret

000043aa <memcpy>:
    43aa:	fb 01       	movw	r30, r22
    43ac:	dc 01       	movw	r26, r24
    43ae:	02 c0       	rjmp	.+4      	; 0x43b4 <memcpy+0xa>
    43b0:	01 90       	ld	r0, Z+
    43b2:	0d 92       	st	X+, r0
    43b4:	41 50       	subi	r20, 0x01	; 1
    43b6:	50 40       	sbci	r21, 0x00	; 0
    43b8:	d8 f7       	brcc	.-10     	; 0x43b0 <memcpy+0x6>
    43ba:	08 95       	ret

000043bc <puts>:
    43bc:	0f 93       	push	r16
    43be:	1f 93       	push	r17
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	e0 91 a3 0e 	lds	r30, 0x0EA3	; 0x800ea3 <__iob+0x2>
    43c8:	f0 91 a4 0e 	lds	r31, 0x0EA4	; 0x800ea4 <__iob+0x3>
    43cc:	23 81       	ldd	r18, Z+3	; 0x03
    43ce:	21 ff       	sbrs	r18, 1
    43d0:	1b c0       	rjmp	.+54     	; 0x4408 <puts+0x4c>
    43d2:	8c 01       	movw	r16, r24
    43d4:	d0 e0       	ldi	r29, 0x00	; 0
    43d6:	c0 e0       	ldi	r28, 0x00	; 0
    43d8:	f8 01       	movw	r30, r16
    43da:	81 91       	ld	r24, Z+
    43dc:	8f 01       	movw	r16, r30
    43de:	60 91 a3 0e 	lds	r22, 0x0EA3	; 0x800ea3 <__iob+0x2>
    43e2:	70 91 a4 0e 	lds	r23, 0x0EA4	; 0x800ea4 <__iob+0x3>
    43e6:	db 01       	movw	r26, r22
    43e8:	18 96       	adiw	r26, 0x08	; 8
    43ea:	ed 91       	ld	r30, X+
    43ec:	fc 91       	ld	r31, X
    43ee:	19 97       	sbiw	r26, 0x09	; 9
    43f0:	88 23       	and	r24, r24
    43f2:	31 f0       	breq	.+12     	; 0x4400 <puts+0x44>
    43f4:	09 95       	icall
    43f6:	89 2b       	or	r24, r25
    43f8:	79 f3       	breq	.-34     	; 0x43d8 <puts+0x1c>
    43fa:	df ef       	ldi	r29, 0xFF	; 255
    43fc:	cf ef       	ldi	r28, 0xFF	; 255
    43fe:	ec cf       	rjmp	.-40     	; 0x43d8 <puts+0x1c>
    4400:	8a e0       	ldi	r24, 0x0A	; 10
    4402:	09 95       	icall
    4404:	89 2b       	or	r24, r25
    4406:	19 f0       	breq	.+6      	; 0x440e <puts+0x52>
    4408:	8f ef       	ldi	r24, 0xFF	; 255
    440a:	9f ef       	ldi	r25, 0xFF	; 255
    440c:	02 c0       	rjmp	.+4      	; 0x4412 <puts+0x56>
    440e:	8d 2f       	mov	r24, r29
    4410:	9c 2f       	mov	r25, r28
    4412:	df 91       	pop	r29
    4414:	cf 91       	pop	r28
    4416:	1f 91       	pop	r17
    4418:	0f 91       	pop	r16
    441a:	08 95       	ret

0000441c <_exit>:
    441c:	f8 94       	cli

0000441e <__stop_program>:
    441e:	ff cf       	rjmp	.-2      	; 0x441e <__stop_program>
